# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSNATATIVIDADE,
    TSSIMNAO,
    TSTPREGPREV,
    TIdeEmpregador,
    TIdeEventoTrab,
    TIdeTrabSemVinculo,
    TInfoEstagiario,
    TRemuneracao,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTSVAltContr/v_S_01_01_00"


class ESocial(models.AbstractModel):
    """S-2306 - Trabalhador Sem Vínculo de Emprego/Estatutário - Alteração
    Contratual"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtTSVAltContr = fields.Many2one(
        comodel_name="eso.11.evttsvaltcontr",
        string="Evento TSVE - Alteração Contratual",
        xsd_required=True,
        help=(
            "Evento TSVE - Alteração Contratual\nDESCRICAO_COMPLETA:Evento "
            "Trabalhador Sem Vínculo de Emprego/Estatutário - Alteração "
            "Contratual.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO"
            "\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO_POSTERIOR_CAT_OB"
            "ITO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_GERAL_VALIDA"
            "_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_RETIFIC"
            "A_MESMO_VINCULO\nREGRA:REGRA_TSV_ATIVO_NA_DTEVENTO\nREGRA:REGRA_V"
            "ALIDA_TRABALHADOR_BASE_CPF"
        ),
    )


class EvtTsvaltContr(models.AbstractModel):
    """Evento TSVE - Alteração Contratual
    DESCRICAO_COMPLETA:Evento Trabalhador Sem Vínculo de Emprego/Estatutário -
    Alteração Contratual.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_TSV_ATIVO_NA_DTEVENTO
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttsvaltcontr"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvaltContr"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideTrabSemVinculo = fields.Many2one(
        comodel_name="eso.11.tidetrabsemvinculo",
        string="ideTrabSemVinculo",
        xsd_required=True,
        xsd_type="T_ideTrabSemVinculo",
    )

    eso11_infoTSVAlteracao = fields.Many2one(
        comodel_name="eso.11.infotsvalteracao",
        string="TSVE - Alteração Contratual",
        xsd_required=True,
        help="TSVE - Alteração Contratual.\nCHAVE_GRUPO: {dtAlteracao*}",
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoTsvalteracao(models.AbstractModel):
    """TSVE - Alteração Contratual.
    CHAVE_GRUPO: {dtAlteracao*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotsvalteracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvaltContr.InfoTsvalteracao"

    eso11_dtAlteracao = fields.Date(
        string="dtAlteracao", xsd_required=True, xsd_type="TS_dtAlteracao"
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="Natureza da atividade",
        xsd_type="TS_natAtividade",
        help=(
            "Natureza da atividade.\nValidação: Preenchimento obrigatório se o"
            " código de categoria no Registro de Eventos Trabalhistas - RET "
            "for igual a [201, 202, 401, 731, 734, 738]. Não deve ser "
            "preenchido se o código de categoria no RET for igual a [721, 722,"
            " 771, 901]."
        ),
    )

    eso11_infoComplementares = fields.Many2one(
        comodel_name="eso.11.infocomplementares",
        string="Informações complementares",
        help=(
            "Informações complementares\nDESCRICAO_COMPLETA:Grupo onde são "
            "fornecidas informações complementares, preenchidas conforme a "
            "categoria do TSVE.\nCONDICAO_GRUPO: O (de acordo com a condição "
            "dos grupos inferiores); OC (nos demais casos)"
        ),
    )


class InfoComplementares(models.AbstractModel):
    """Informações complementares
    DESCRICAO_COMPLETA:Grupo onde são fornecidas informações complementares,
    preenchidas conforme a categoria do TSVE.
    CONDICAO_GRUPO: O (de acordo com a condição dos grupos inferiores); OC (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplementares"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvaltContr.InfoTsvalteracao.InfoComplementares"

    eso11_cargoFuncao = fields.Many2one(
        comodel_name="eso.11.cargofuncao",
        string="Cargo/Função ocupado pelo TSVE",
        help=(
            "Cargo/Função ocupado pelo TSVE\nDESCRICAO_COMPLETA:Grupo que "
            "apresenta o cargo e/ou função ocupada pelo TSVE.\nCONDICAO_GRUPO:"
            " OC (se o código de categoria no RET for igual a [901, 903, 904, "
            "906]); O (nos demais casos)"
        ),
    )

    eso11_remuneracao = fields.Many2one(
        comodel_name="eso.11.tremuneracao",
        string="Informações da remuneração",
        xsd_type="T_remuneracao",
        help=(
            "Informações da remuneração e periodicidade de "
            "pagamento.\nCONDICAO_GRUPO: O (se o código de categoria no RET "
            "for igual a [721, 722, 771, 906]); OC (nos demais casos)"
        ),
    )

    eso11_infoDirigenteSindical = fields.Many2one(
        comodel_name="eso.11.infodirigentesindical",
        string="Informações relativas",
        help=(
            "Informações relativas ao dirigente sindical.\nCONDICAO_GRUPO: O "
            "(se o código de categoria no RET for igual a [401]); N (nos "
            "demais casos)"
        ),
    )

    eso11_infoTrabCedido = fields.Many2one(
        comodel_name="eso.11.infotrabcedido",
        string="Informações relativas (infoTrabCedido)",
        help=(
            "Informações relativas ao trabalhador cedido/em exercício em outro"
            " órgão\nDESCRICAO_COMPLETA:Informações relativas ao trabalhador "
            "cedido/em exercício em outro órgão, preenchidas exclusivamente "
            "pelo cessionário/órgão de destino.\nCONDICAO_GRUPO: O (se o "
            "código de categoria no RET for igual a [410]); N (nos demais "
            "casos)"
        ),
    )

    eso11_infoMandElet = fields.Many2one(
        comodel_name="eso.11.infomandelet",
        string="Informações relativas (infoMandElet)",
        help=(
            "Informações relativas a servidor público exercente de mandato "
            "eletivo.\nCONDICAO_GRUPO: O (se o código de categoria no RET for "
            "igual a [304]); N (nos demais casos)"
        ),
    )

    eso11_infoEstagiario = fields.Many2one(
        comodel_name="eso.11.tinfoestagiario",
        string="Informações relativas ao estagiário",
        xsd_type="T_infoEstagiario",
        help=(
            "Informações relativas ao estagiário ou ao beneficiário do "
            "Programa Nacional de Prestação de Serviço Civil "
            "Voluntário.\nCONDICAO_GRUPO: O (se o código de categoria no RET "
            "for igual a [901, 906]); N (nos demais casos)"
        ),
    )


class CargoFuncao(models.AbstractModel):
    """Cargo/Função ocupado pelo TSVE
    DESCRICAO_COMPLETA:Grupo que apresenta o cargo e/ou função ocupada pelo TSVE.
    CONDICAO_GRUPO: OC (se o código de categoria no RET for igual a [901, 903, 904,
    906]); O (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.cargofuncao"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtTsvaltContr.InfoTsvalteracao.InfoComplementares.CargoFuncao"
    )

    eso11_nmCargo = fields.Char(
        string="nome do cargo",
        xsd_type="TS_texto_100",
        help=(
            "nome do cargo.\nValidação: Preenchimento obrigatório se o código "
            "de categoria no RET for diferente de [410]."
        ),
    )

    eso11_CBOCargo = fields.Char(string="CBOCargo", xsd_type="TS_CBOCargo")

    eso11_nmFuncao = fields.Char(
        string="nome da função de confiança",
        xsd_type="TS_texto_100",
        help=(
            "nome da função de confiança.\nValidação: Preenchimento "
            "obrigatório se o código de categoria no RET for igual a [410] e "
            "não houver informação de {nmCargo}(./nmCargo)."
        ),
    )

    eso11_CBOFuncao = fields.Char(string="CBOFuncao", xsd_type="TS_CBOFuncao")


class InfoDirigenteSindical(models.AbstractModel):
    """Informações relativas ao dirigente sindical.
    CONDICAO_GRUPO: O (se o código de categoria no RET for igual a [401]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodirigentesindical"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvaltContr.InfoTsvalteracao.InfoComplementares.InfoDirigenteSindical"

    eso11_tpRegPrev = fields.Selection(
        TS_TPREGPREV,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev",
        help=(
            "Tipo de regime previdenciário (ou Sistema de Proteção Social dos "
            "Militares).\nValidação: Se {infoDirigenteSindical/categOrig}(2300"
            "_infoTSVInicio_infoComplementares_infoDirigenteSindical_categOrig"
            ") do evento S-2300 for relativa a 'Empregado', não pode ser "
            "preenchido com [2]."
        ),
    )


class InfoTrabCedido(models.AbstractModel):
    """Informações relativas ao trabalhador cedido/em exercício em outro órgão
    DESCRICAO_COMPLETA:Informações relativas ao trabalhador cedido/em exercício em
    outro órgão, preenchidas exclusivamente pelo cessionário/órgão de destino.
    CONDICAO_GRUPO: O (se o código de categoria no RET for igual a [410]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotrabcedido"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtTsvaltContr.InfoTsvalteracao.InfoComplementares.InfoTrabCedido"
    )

    eso11_tpRegPrev = fields.Selection(
        TS_TPREGPREV,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev",
        help=(
            "Tipo de regime previdenciário (ou Sistema de Proteção Social dos "
            "Militares).\nValidação: Se {infoTrabCedido/categOrig}(2300_infoTS"
            "VInicio_infoComplementares_infoTrabCedido_categOrig) do evento "
            "S-2300 for relativa a 'Empregado', não pode ser preenchido com "
            "[2]."
        ),
    )


class InfoMandElet(models.AbstractModel):
    """Informações relativas a servidor público exercente de mandato eletivo.
    CONDICAO_GRUPO: O (se o código de categoria no RET for igual a [304]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infomandelet"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtTsvaltContr.InfoTsvalteracao.InfoComplementares.InfoMandElet"
    )

    eso11_indRemunCargo = fields.Selection(
        TS_SIM_NAO, string="indRemunCargo", xsd_type="TS_indRemunCargo"
    )

    eso11_tpRegPrev = fields.Selection(
        TS_TPREGPREV,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev",
        help=(
            "Tipo de regime previdenciário (ou Sistema de Proteção Social dos "
            "Militares)."
        ),
    )
