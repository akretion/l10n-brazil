# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDCONSTR,
    TSINDCOOP,
    TSTPINSC12,
    TIdeEventoEvtTabInicial,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtInfoEmpregador/v_S_01_01_00"

"""Indicativo de desoneração da folha.
    Validação: Pode ser igual a [1] apenas se {classTrib}(./classTrib) = [02, 03,
    99]. Nos demais casos, deve ser igual a [0]."""
T_INFOCADASTRO_INDDESFOLHA = [
  ("0", "Não aplicável"),
  ("1", "Empresa enquadrada nos arts. 7º a 9º da Lei 12.546/2011"),
]

"""Indicativo da opção pelo produtor rural pela forma de tributação da
    contribuição previdenciária, nos termos do art. 25, § 13, da Lei
    8.212/1991 e do art. 25, § 7°, da Lei 8.870/1994. O não preenchimento
    deste campo por parte do produtor rural implica opção pela
    comercialização da sua produção.
    Validação: Não preencher se {classTrib}(./classTrib) for diferente de [07,
    21]."""
T_INFOCADASTRO_INDOPCCP = [
  ("1", "Sobre a comercialização da sua produção"),
  ("2", "Sobre a folha de pagamento"),
]

"""Indica se houve opção pelo registro eletrônico de empregados. Caso o
    declarante seja órgão público sem empregados regidos pela CLT, informar
    [0]."""
T_INFOCADASTRO_INDOPTREGELETRON = [
  ("0", "Não optou pelo registro eletrônico de empregados (ou opção não aplicável)"),
  ("1", "Optou pelo registro eletrônico de empregados"),
]

"""Indicativo de microempresa - ME ou empresa de pequeno porte - EPP para
    permissão de acesso ao módulo simplificado. Não preencher caso o
    empregador não se enquadre como micro ou pequena empresa.
    Validação: Não preencher se {classTrib}(./classTrib) = [21, 22]."""
T_INFOCADASTRO_INDPORTE = [
  ("S", "Sim"),
]

"""Indicador de tributação sobre a folha de pagamento - PIS e COFINS.
    Preenchimento exclusivo para o empregador em situação de tributação de PIS e
    COFINS sobre a folha de pagamento."""
T_INFOCADASTRO_INDTRIBFOLHAPISCOFINS = [
  ("S", "Sim"),
]

"""Indicativo da existência de acordo internacional para isenção de
    multa."""
INFOORGINTERNACIONAL_INDACORDOISENMULTA = [
  ("0", "Sem acordo"),
  ("1", "Com acordo"),
]


class TIdePeriodo(models.AbstractModel):
    """Período de validade das informações.
    CHAVE_GRUPO: {iniValid*}, {fimValid*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideperiodo"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdePeriodo"


    
    eso11_iniValid = fields.Char(
        string="iniValid",
        xsd_required=True,
        xsd_type="TS_iniValid"
    )
    
    eso11_fimValid = fields.Char(
        string="fimValid",
        xsd_type="TS_fimValid"
    )


class TInfoCadastro(models.AbstractModel):
    "Detalhamento das informações do empregador."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tinfocadastro"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoCadastro"


    
    eso11_classTrib = fields.Char(
        string="classTrib",
        xsd_required=True
    )
    
    eso11_indCoop = fields.Selection(TS_INDCOOP,
        string="Indicativo de cooperativa",
        xsd_type="TS_indCoop",
        help=(
            "Indicativo de cooperativa.\nValidação: O preenchimento do campo é"
            " exclusivo e obrigatório para PJ. Somente pode ser diferente de "
            "[0] se a natureza jurídica do declarante for igual a 214-3."
        )
    )
    
    eso11_indConstr = fields.Selection(TS_INDCONSTR,
        string="Indicativo de construtora",
        xsd_type="TS_indConstr",
        help=(
            "Indicativo de construtora.\nValidação: O preenchimento do campo é"
            " exclusivo e obrigatório para PJ."
        )
    )
    
    eso11_indDesFolha = fields.Selection(T_INFOCADASTRO_INDDESFOLHA,
        string="indDesFolha",
        xsd_required=True
    )
    
    eso11_indOpcCP = fields.Selection(T_INFOCADASTRO_INDOPCCP,
        string="indOpcCP"
    )
    
    eso11_indPorte = fields.Selection(T_INFOCADASTRO_INDPORTE,
        string="indPorte"
    )
    
    eso11_indOptRegEletron = fields.Selection(T_INFOCADASTRO_INDOPTREGELETRON,
        string="indOptRegEletron",
        xsd_required=True
    )
    
    eso11_cnpjEFR = fields.Char(
        string="CNPJ do Ente Federativo Responsável",
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do Ente Federativo Responsável - EFR.\nValidação: "
            "Preenchimento obrigatório e exclusivo se a natureza jurídica do "
            "declarante for Administração Pública (grupo [1]). Nesse caso, "
            "informar o campo com 14 (catorze) algarismos.\nInformação "
            "validada no cadastro do CNPJ da RFB."
        )
    )
    
    eso11_dtTrans11096 = fields.Date(
        string="Data da transformação em sociedade",
        xsd_type="xs:date",
        help=(
            "Data da transformação em sociedade de fins lucrativos - Lei "
            "11.096/2005.\nValidação: Não preencher se "
            "{classTrib}(./classTrib) = [21, 22]."
        )
    )
    
    eso11_indTribFolhaPisCofins = fields.Selection(T_INFOCADASTRO_INDTRIBFOLHAPISCOFINS,
        string="indTribFolhaPisCofins"
    )
    
    eso11_dadosIsencao = fields.Many2one(
        comodel_name="eso.11.dadosisencao",
        string="Informações complementares",
        help=(
            "Informações complementares - Empresas isentas - Dados da "
            "isenção.\nCONDICAO_GRUPO: OC (se "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "= [80]); N (nos demais casos)"
        )
    )
    
    eso11_infoOrgInternacional = fields.Many2one(
        comodel_name="eso.11.infoorginternacional",
        string="Informações exclusivas",
        help=(
            "Informações exclusivas de organismos internacionais e outras "
            "instituições extraterritoriais.\nCONDICAO_GRUPO: O (se a natureza"
            " jurídica pertencer ao grupo [5]); N (nos demais casos)"
        )
    )
    

class DadosIsencao(models.AbstractModel):
    """Informações complementares - Empresas isentas - Dados da isenção.
    CONDICAO_GRUPO: OC (se
    {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) = [80]); N
    (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dadosisencao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoCadastro.DadosIsencao"


    
    eso11_ideMinLei = fields.Char(
        string="ideMinLei",
        xsd_required=True
    )
    
    eso11_nrCertif = fields.Char(
        string="nrCertif",
        xsd_required=True
    )
    
    eso11_dtEmisCertif = fields.Date(
        string="Data de emissão",
        xsd_required=True,
        xsd_type="xs:date",
        help="Data de emissão do certificado/publicação da lei."
    )
    
    eso11_dtVencCertif = fields.Date(
        string="Data de vencimento do certificado",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de vencimento do certificado.\nValidação: Não pode ser "
            "anterior a {dtEmisCertif}(./dtEmisCertif)."
        )
    )
    
    eso11_nrProtRenov = fields.Char(
        string="nrProtRenov"
    )
    
    eso11_dtProtRenov = fields.Date(
        string="Data do protocolo de renovação",
        xsd_type="xs:date"
    )
    
    eso11_dtDou = fields.Date(
        string="Data de publicação no Diário Oficial",
        xsd_type="xs:date",
        help="Data de publicação no Diário Oficial da União - DOU."
    )
    
    eso11_pagDou = fields.Char(
        string="pagDou"
    )
    

class InfoOrgInternacional(models.AbstractModel):
    """Informações exclusivas de organismos internacionais e outras
    instituições extraterritoriais.
    CONDICAO_GRUPO: O (se a natureza jurídica pertencer ao grupo [5]); N (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoorginternacional"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoCadastro.InfoOrgInternacional"


    
    eso11_indAcordoIsenMulta = fields.Selection(INFOORGINTERNACIONAL_INDACORDOISENMULTA,
        string="indAcordoIsenMulta",
        xsd_required=True
    )


class ESocial(models.AbstractModel):
    "S-1000 - Informações do Empregador/Contribuinte/Órgão Público"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtInfoEmpregador = fields.Many2one(
        comodel_name="eso.11.evtinfoempregador",
        string="Evento Informações do Empregador",
        xsd_required=True,
        help=(
            "Evento Informações do Empregador.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA"
            "_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_INFO_EMP_PERIODO_CONFLITANTE\"
            "nREGRA:REGRA_INFO_EMP_VALIDA_CLASSTRIB_NATJURID\nREGRA:REGRA_INFO"
            "_EMP_VALIDA_DTINICIAL\nREGRA:REGRA_TAB_PERMITE_EXCLUSAO\nREGRA:RE"
            "GRA_VALIDA_DT_FUTURA\nREGRA:REGRA_VALIDA_EMPREGADOR"
        )
    )
    

class EvtInfoEmpregador(models.AbstractModel):
    """Evento Informações do Empregador.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_INFO_EMP_PERIODO_CONFLITANTE
    REGRA:REGRA_INFO_EMP_VALIDA_CLASSTRIB_NATJURID
    REGRA:REGRA_INFO_EMP_VALIDA_DTINICIAL
    REGRA:REGRA_TAB_PERMITE_EXCLUSAO
    REGRA:REGRA_VALIDA_DT_FUTURA
    REGRA:REGRA_VALIDA_EMPREGADOR"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtinfoempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoEmpregador"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoevttabinicial",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_evtTab_inicial"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.ideempregador",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do empregador.\nCHAVE_GRUPO: "
            "{tpInsc*}, {nrInsc*}"
        )
    )
    
    eso11_infoEmpregador = fields.Many2one(
        comodel_name="eso.11.infoempregador",
        string="Informações do empregador",
        xsd_required=True,
        help=(
            "Informações do empregador.\nDESCRICAO_COMPLETA:Identificação da "
            "operação (inclusão, alteração ou exclusão) e das respectivas "
            "informações do empregador."
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id"
    )
    

class IdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoEmpregador.IdeEmpregador"


    
    eso11_tpInsc = fields.Selection(TS_TPINSC_1_2,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2"
    )
    
    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_8_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {tpInsc}(./tpInsc).\nValidação: Se "
            "{tpInsc}(./tpInsc) for igual a [1], deve ser um número de CNPJ "
            "válido. Neste caso, deve ser informada apenas a raiz/base (8 "
            "posições), exceto se a natureza jurídica do declarante for igual "
            "a 101-5, 104-0, 107-4, 116-3 ou 134-1, situação em que o campo "
            "deve ser preenchido com o CNPJ completo (14 posições).\nSe "
            "{tpInsc}(./tpInsc) for igual a [2], deve ser um CPF válido."
        )
    )
    

class InfoEmpregador(models.AbstractModel):
    """Informações do empregador.
    DESCRICAO_COMPLETA:Identificação da operação (inclusão, alteração ou exclusão)
    e das respectivas informações do empregador."""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoEmpregador.InfoEmpregador"


    
    eso11_inclusao = fields.Many2one(
        comodel_name="eso.11.inclusao",
        string="Inclusão de novas informações",
        choice="infoempregador",
        xsd_choice_required=True,
        help="Inclusão de novas informações.\nCONDICAO_GRUPO: OC"
    )
    
    eso11_alteracao = fields.Many2one(
        comodel_name="eso.11.alteracao",
        string="Alteração das informações",
        choice="infoempregador",
        xsd_choice_required=True,
        help="Alteração das informações.\nCONDICAO_GRUPO: OC"
    )
    
    eso11_exclusao = fields.Many2one(
        comodel_name="eso.11.exclusao",
        string="Exclusão das informações",
        choice="infoempregador",
        xsd_choice_required=True,
        help="Exclusão das informações.\nCONDICAO_GRUPO: OC"
    )
    

class Inclusao(models.AbstractModel):
    """Inclusão de novas informações.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoEmpregador.InfoEmpregador.Inclusao"


    
    eso11_idePeriodo = fields.Many2one(
        comodel_name="eso.11.tideperiodo",
        string="idePeriodo",
        xsd_required=True,
        xsd_type="T_idePeriodo"
    )
    
    eso11_infoCadastro = fields.Many2one(
        comodel_name="eso.11.tinfocadastro",
        string="infoCadastro",
        xsd_required=True,
        xsd_type="T_infoCadastro"
    )
    

class Alteracao(models.AbstractModel):
    """Alteração das informações.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.alteracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoEmpregador.InfoEmpregador.Alteracao"


    
    eso11_idePeriodo = fields.Many2one(
        comodel_name="eso.11.tideperiodo",
        string="idePeriodo",
        xsd_required=True,
        xsd_type="T_idePeriodo"
    )
    
    eso11_infoCadastro = fields.Many2one(
        comodel_name="eso.11.tinfocadastro",
        string="infoCadastro",
        xsd_required=True,
        xsd_type="T_infoCadastro"
    )
    
    eso11_novaValidade = fields.Many2one(
        comodel_name="eso.11.tideperiodo",
        string="Novo período de validade das informações",
        xsd_type="T_idePeriodo",
        help=(
            "Novo período de validade das "
            "informações.\nDESCRICAO_COMPLETA:Informação preenchida "
            "exclusivamente em caso de alteração do período de validade das "
            "informações, apresentando o novo período de "
            "validade.\nCONDICAO_GRUPO: OC"
        )
    )
    

class Exclusao(models.AbstractModel):
    """Exclusão das informações.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.exclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoEmpregador.InfoEmpregador.Exclusao"


    
    eso11_idePeriodo = fields.Many2one(
        comodel_name="eso.11.tideperiodo",
        string="idePeriodo",
        xsd_required=True,
        xsd_type="T_idePeriodo"
    )