# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSTPINSC12,
    TIdeEventoTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtContProc/v_S_01_01_00"

INFOCRIRRF_TPCR = [
    ("593656", "IRRF - Decisão da Justiça do Trabalho"),
    ("188951", "IRRF - RRA - Decisão da Justiça do Trabalho"),
]


class ESocial(models.AbstractModel):
    """S-2501 - Informações de Tributos Decorrentes de Processo Trabalhista"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtContProc = fields.Many2one(
        comodel_name="eso.11.evtcontproc",
        string="Evento Informações",
        xsd_required=True,
        help=(
            "Evento Informações de Tributos Decorrentes de Processo "
            "Trabalhista.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_PROC_FECHAMENT"
            "O\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_VALIDA_EMPREGA"
            "DOR"
        ),
    )


class EvtContProc(models.AbstractModel):
    """Evento Informações de Tributos Decorrentes de Processo Trabalhista.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_VALIDA_EMPREGADOR"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcontproc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.ideempregador",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do empregador ou do contribuinte que"
            " está prestando a informação.\nCHAVE_GRUPO: {tpInsc*}, {nrInsc*}"
        ),
    )

    eso11_ideProc = fields.Many2one(
        comodel_name="eso.11.ideproc",
        string="Identificação do processo",
        xsd_required=True,
        help=(
            "Identificação do processo.\nCHAVE_GRUPO: {nrProcTrab*}, " "{perApurPgto*}"
        ),
    )

    eso11_ideTrab = fields.One2many(
        "eso.11.idetrab",
        "eso11_ideTrab_evtContProc_id",
        string="Identificação do trabalhador",
        help="Identificação do trabalhador.\nCHAVE_GRUPO: {cpfTrab}",
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador ou do contribuinte que está
    prestando a informação.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc.IdeEmpregador"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
        help=(
            "o código correspondente ao tipo de inscrição do empregador ou "
            "contribuinte que está prestando a informação, conforme Tabela 05."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do empregador",
        xsd_required=True,
        xsd_type="TS_nrInsc_8_11_14",
        help=(
            "número de inscrição do empregador ou contribuinte que está "
            "prestando a informação, de acordo com o tipo de inscrição "
            "indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e conforme "
            "informado em S-1000."
        ),
    )


class IdeProc(models.AbstractModel):
    """Identificação do processo.
    CHAVE_GRUPO: {nrProcTrab*}, {perApurPgto*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideproc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc.IdeProc"

    eso11_nrProcTrab = fields.Char(
        string="Número do processo trabalhista",
        xsd_required=True,
        xsd_type="TS_nrProcTrab",
        help=(
            "Número do processo trabalhista, da ata ou número de identificação"
            " da conciliação.\nValidação: Deve ser um número de processo "
            "válido e declarado no evento S-2500 para o(s) trabalhador(es) "
            "informado(s) em {cpfTrab}(2501_ideTrab_cpfTrab)."
        ),
    )

    eso11_perApurPgto = fields.Char(
        string="Mês/ano em que é devida a obrigação",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "Mês/ano em que é devida a obrigação de pagar a parcela prevista "
            "no acordo/sentença.\nValidação: Deve ser um período igual ou "
            "posterior ao mês/ano de "
            "{dtSent}(2500_infoProcesso_dadosCompl_infoProcJud_dtSent) ou de "
            "{dtCCP}(2500_infoProcesso_dadosCompl_infoCCP_dtCCP) existente no "
            "evento S-2500 para o processo indicado em "
            "{nrProcTrab}(./nrProcTrab).\nDeve ser informado no formato AAAA-"
            "MM."
        ),
    )

    eso11_obs = fields.Char(
        string="Observação referente ao pagamento",
        xsd_type="TS_texto_999",
        help=(
            "Observação referente ao pagamento de parcela prevista no "
            "acordo/sentença."
        ),
    )


class IdeTrab(models.AbstractModel):
    """Identificação do trabalhador.
    CHAVE_GRUPO: {cpfTrab}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc.IdeTrab"

    eso11_calcTrib = fields.One2many(
        "eso.11.calctrib",
        "eso11_calcTrib_ideTrab_id",
        string="Identificação do período e da base",
        help=(
            "Identificação do período e da base de cálculo dos "
            "tributos.\nCHAVE_GRUPO: {perRef}"
        ),
    )

    eso11_infoCRIRRF = fields.One2many(
        "eso.11.infocrirrf",
        "eso11_infoCRIRRF_ideTrab_id",
        string="Informações de IRRF",
        help=(
            "Informações de IRRF.\nDESCRICAO_COMPLETA:Informações de Imposto "
            "de Renda Retido na Fonte, por Código de Receita - "
            "CR.\nCHAVE_GRUPO: {tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_cpfTrab = fields.Char(
        string="o número do CPF do trabalhador",
        xsd_required=True,
        help=(
            "o número do CPF do trabalhador.\nValidação: Deve ser um CPF "
            "válido e informado no evento S-2500."
        ),
    )


class CalcTrib(models.AbstractModel):
    """Identificação do período e da base de cálculo dos tributos.
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.calctrib"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc.IdeTrab.CalcTrib"

    eso11_infoCRContrib = fields.One2many(
        "eso.11.infocrcontrib",
        "eso11_infoCRContrib_calcTrib_id",
        string="Informações das contribuições sociais",
        help=(
            "Informações das contribuições "
            "sociais.\nDESCRICAO_COMPLETA:Informações das contribuições "
            "sociais devidas à Previdência Social e Outras Entidades e Fundos,"
            " por Código de Receita - CR.\nCHAVE_GRUPO: "
            "{tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_perRef = fields.Char(
        string="mês/ano",
        xsd_required=True,
        help=(
            "mês/ano (formato AAAA-MM) de referência das "
            "informações.\nValidação: Deve ser um período existente no evento "
            "S-2500 para o trabalhador indicado em {cpfTrab}(../cpfTrab) e "
            "igual ou posterior a [2008-12]."
        ),
    )

    eso11_vrBcCpMensal = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        help=(
            "Valor da base de cálculo da contribuição previdenciária sobre a "
            "remuneração mensal do trabalhador.\nValidação: Deve ser maior ou "
            "igual a 0 (zero)."
        ),
    )

    eso11_vrBcCp13 = fields.Float(
        string="Valor da base de cálculo (vrBcCp13)",
        xsd_required=True,
        help=(
            "Valor da base de cálculo da contribuição previdenciária sobre a "
            "remuneração do trabalhador referente ao 13º salário.\nValidação: "
            "Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_vrRendIRRF = fields.Float(
        string="Valor do rendimento tributável",
        xsd_required=True,
        help=(
            "Valor do rendimento tributável do Imposto de Renda.\nValidação: "
            "Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_vrRendIRRF13 = fields.Float(
        string="vrRendIRRF13",
        xsd_required=True,
        help=(
            "Valor do rendimento tributável do Imposto de Renda referente ao "
            "13º salário - Tributação exclusiva.\nValidação: Deve ser maior ou"
            " igual a 0 (zero)."
        ),
    )


class InfoCrcontrib(models.AbstractModel):
    """Informações das contribuições sociais.
    DESCRICAO_COMPLETA:Informações das contribuições sociais devidas à Previdência
    Social e Outras Entidades e Fundos, por Código de Receita - CR.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocrcontrib"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc.IdeTrab.CalcTrib.InfoCrcontrib"

    eso11_tpCR = fields.Char(
        string="Código de Receita",
        xsd_required=True,
        help=(
            "Código de Receita - CR relativo a contribuições sociais devidas à"
            " Previdência Social e a Outras Entidades e Fundos (Terceiros), "
            "conforme legislação em vigor na competência.\nValidação: Deve ser"
            " um código válido e existente na Tabela 29."
        ),
    )

    eso11_vrCR = fields.Float(
        string="Valor correspondente ao Código",
        xsd_required=True,
        help=(
            "Valor correspondente ao Código de Receita - CR.\nValidação: Deve "
            "ser informado de acordo com a legislação em vigor na "
            "competência.\nDeve ser maior que 0 (zero)."
        ),
    )


class InfoCrirrf(models.AbstractModel):
    """Informações de IRRF.
    DESCRICAO_COMPLETA:Informações de Imposto de Renda Retido na Fonte, por Código
    de Receita - CR.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocrirrf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtContProc.IdeTrab.InfoCrirrf"

    eso11_tpCR = fields.Selection(
        INFOCRIRRF_TPCR,
        string="Código de Receita",
        xsd_required=True,
        help=("Código de Receita - CR relativo a Imposto de Renda Retido na " "Fonte."),
    )

    eso11_vrCR = fields.Float(
        string="Valor correspondente ao Código",
        xsd_required=True,
        help=(
            "Valor correspondente ao Código de Receita - CR.\nValidação: Deve "
            "ser informado de acordo com a legislação em vigor na "
            "competência.\nDeve ser maior que 0 (zero)."
        ),
    )
