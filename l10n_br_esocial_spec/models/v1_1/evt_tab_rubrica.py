# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSSIMNAO,
    TSTPPROC12,
    TIdeEmpregador,
    TIdeEventoEvtTab,
    TNovaValidade,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTabRubrica/v_S_01_01_00"

"""Código de incidência tributária da rubrica para a Previdência Social.
    Validação: Para utilização de código [91, 92, 93, 94, 95, 96, 97, 98], é
    necessária a existência de grupo com informações relativas ao processo."""
T_DADOSRUBRICA_CODINCCP = [
  ("00", "Não é base de cálculo"),
  ("01", "Não é base de cálculo em função de acordos internacionais de previdência social"),
  ("11", "Base de cálculo das contribuições sociais - Salário de contribuição:
Mensal"),
  ("12", "13º salário"),
  ("13", "Exclusiva do empregador - Mensal"),
  ("14", "Exclusiva do empregador - 13° salário"),
  ("15", "Exclusiva do segurado - Mensal"),
  ("16", "Exclusiva do segurado - 13° salário"),
  ("21", "Salário-maternidade mensal, pago pelo empregador"),
  ("22", "Salário-maternidade 13º salário, pago pelo empregador"),
  ("25", "Salário-maternidade mensal, pago pelo INSS"),
  ("26", "Salário-maternidade 13° salário, pago pelo INSS"),
  ("31", "Contribuição descontada do segurado sobre salário de contribuição:
Mensal"),
  ("32", "13º salário"),
  ("34", "SEST"),
  ("35", "SENAT"),
  ("51", "Outros:
Salário-família"),
  ("91", "Suspensão de incidência sobre salário de contribuição em decorrência de decisão judicial:
Mensal"),
  ("92", "13º salário"),
  ("93", "Salário-maternidade"),
  ("94", "Salário-maternidade 13º salário"),
  ("95", "Exclusiva do empregador - Mensal"),
  ("96", "Exclusiva do empregador - 13º salário"),
  ("97", "Exclusiva do empregador - Salário-maternidade"),
  ("98", "Exclusiva do empregador - Salário-maternidade 13º salário"),
]

"""Código de incidência da rubrica para as contribuições do Regime Próprio
    de Previdência Social - RPPS/regime militar."""
T_DADOSRUBRICA_CODINCCPRP = [
  ("00", "Não é base de cálculo de contribuições devidas ao RPPS/regime militar"),
  ("11", "Base de cálculo de contribuições devidas ao RPPS/regime militar"),
  ("12", "Base de cálculo de contribuições devidas ao RPPS/regime militar - 13º salário"),
  ("31", "Contribuição descontada do segurado e beneficiário"),
  ("32", "Contribuição descontada do segurado e beneficiário - 13º salário"),
  ("91", "Suspensão de incidência em decorrência de decisão judicial"),
  ("92", "Suspensão de incidência em decorrência de decisão judicial - 13º salário"),
]

"""Código de incidência da rubrica para o Fundo de Garantia do Tempo de
    Serviço - FGTS.
    Validação: Para utilização de código [91, 92, 93], é necessária a existência de
    grupo com informações relativas ao processo."""
T_DADOSRUBRICA_CODINCFGTS = [
  ("00", "Não é base de cálculo do FGTS"),
  ("11", "Base de cálculo do FGTS mensal"),
  ("12", "Base de cálculo do FGTS 13° salário"),
  ("21", "Base de cálculo do FGTS aviso prévio indenizado"),
  ("91", "Incidência suspensa em decorrência de decisão judicial - FGTS mensal"),
  ("92", "Incidência suspensa em decorrência de decisão judicial - FGTS 13º salário"),
  ("93", "Incidência suspensa em decorrência de decisão judicial - FGTS aviso prévio indenizado"),
]

"Tipo de rubrica."
T_DADOSRUBRICA_TPRUBR = [
  ("1", "Vencimento, provento ou pensão"),
  ("2", "Desconto"),
  ("3", "Informativa"),
  ("4", "Informativa dedutora"),
]

"Extensão da decisão/sentença."
IDEPROCESSOCP_EXTDECISAO = [
  ("1", "Contribuição previdenciária patronal"),
  ("2", "Contribuição previdenciária patronal + descontada dos segurados"),
]


class TIdeRubrica(models.AbstractModel):
    """Identificação da rubrica e validade das informações
    DESCRICAO_COMPLETA:Identificação da rubrica e período de validade das
    informações.
    CHAVE_GRUPO: {codRubr*}, {ideTabRubr*}, {iniValid*}, {fimValid*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tiderubrica"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeRubrica"


    
    eso11_codRubr = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador que identifica a rubrica em sua "
            "folha de pagamento.\nValidação: O código não pode conter a "
            "expressão 'eSocial' nas 7 (sete) primeiras "
            "posições.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        )
    )
    
    eso11_ideTabRubr = fields.Char(
        string="o identificador da Tabela de Rubricas",
        xsd_required=True,
        xsd_type="TS_ideTabRubr",
        help=(
            "o identificador da Tabela de Rubricas no âmbito do "
            "empregador.\nValidação: O identificador não pode conter a "
            "expressão 'eSocial' nas 7 (sete) primeiras "
            "posições.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        )
    )
    
    eso11_iniValid = fields.Char(
        string="iniValid",
        xsd_required=True,
        xsd_type="TS_iniValid"
    )
    
    eso11_fimValid = fields.Char(
        string="fimValid",
        xsd_type="TS_fimValid"
    )


class TDadosRubrica(models.AbstractModel):
    "Detalhamento das informações da rubrica."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tdadosrubrica"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosRubrica"


    
    eso11_dscRubr = fields.Char(
        string="descrição",
        xsd_required=True,
        xsd_type="TS_texto_100",
        help=(
            "descrição (nome) da rubrica no sistema de folha de pagamento da "
            "empresa."
        )
    )
    
    eso11_natRubr = fields.Char(
        string="natRubr",
        xsd_required=True
    )
    
    eso11_tpRubr = fields.Selection(T_DADOSRUBRICA_TPRUBR,
        string="tpRubr",
        xsd_required=True
    )
    
    eso11_codIncCP = fields.Selection(T_DADOSRUBRICA_CODINCCP,
        string="codIncCP",
        xsd_required=True
    )
    
    eso11_codIncIRRF = fields.Char(
        string="codIncIRRF",
        xsd_required=True
    )
    
    eso11_codIncFGTS = fields.Selection(T_DADOSRUBRICA_CODINCFGTS,
        string="codIncFGTS",
        xsd_required=True
    )
    
    eso11_codIncCPRP = fields.Selection(T_DADOSRUBRICA_CODINCCPRP,
        string="codIncCPRP"
    )
    
    eso11_tetoRemun = fields.Selection(TS_SIM_NAO,
        string="Informar se a rubrica compõe",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se a rubrica compõe o teto remuneratório específico "
            "(art. 37, XI, da CF/1988).\nValidação: Preenchimento obrigatório "
            "se a natureza jurídica do declarante for Administração Pública "
            "(grupo [1])."
        )
    )
    
    eso11_observacao = fields.Char(
        string="Observações relacionadas à rubrica",
        xsd_type="TS_observacao",
        help="Observações relacionadas à rubrica ou à sua utilização."
    )
    
    eso11_ideProcessoCP = fields.One2many("eso.11.ideprocessocp", "eso11_ideProcessoCP_T_dadosRubrica_id",
        string="Identificação de processo",
        help=(
            "Identificação de processo - Incidência de Contrib. "
            "Previdenciária\nDESCRICAO_COMPLETA:Caso a empresa possua processo"
            " administrativo ou judicial com decisão/sentença favorável, "
            "determinando a não incidência de contribuição previdenciária "
            "relativa à rubrica identificada no evento, as informações deverão"
            " ser incluídas neste grupo, e o detalhamento do processo deverá "
            "ser efetuado através de evento específico na Tabela de Processos "
            "(S-1070).\nCHAVE_GRUPO: {nrProc}\nCONDICAO_GRUPO: O (se "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) = "
            "[9X]); N (nos demais casos)"
        )
    )
    
    eso11_ideProcessoIRRF = fields.One2many("eso.11.ideprocessoirrf", "eso11_ideProcessoIRRF_T_dadosRubrica_id",
        string="ideProcessoIRRF",
        help=(
            "Identificação de processo - Incidência de "
            "IRRF\nDESCRICAO_COMPLETA:Caso a empresa possua processo judicial "
            "com decisão/sentença favorável, determinando a não incidência de "
            "imposto de renda relativo à rubrica identificada no evento, as "
            "informações deverão ser incluídas neste grupo, e o detalhamento "
            "do processo deverá ser efetuado através de evento específico na "
            "Tabela de Processos (S-1070).\nCHAVE_GRUPO: "
            "{nrProc}\nCONDICAO_GRUPO: O (se "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) ="
            " [9X] ou [9XXX]); N (nos demais casos)"
        )
    )
    
    eso11_ideProcessoFGTS = fields.One2many("eso.11.ideprocessofgts", "eso11_ideProcessoFGTS_T_dadosRubrica_id",
        string="ideProcessoFGTS",
        help=(
            "Identificação de processo - Incidência de "
            "FGTS\nDESCRICAO_COMPLETA:Caso a empresa possua processo judicial "
            "com decisão/sentença favorável, determinando a não incidência de "
            "FGTS relativo à rubrica identificada no evento, as informações "
            "deverão ser incluídas neste grupo, e o detalhamento do processo "
            "deverá ser efetuado através de evento específico na Tabela de "
            "Processos (S-1070).\nCHAVE_GRUPO: {nrProc}\nCONDICAO_GRUPO: O (se"
            " {codIncFGTS}(1010_infoRubrica_inclusao_dadosRubrica_codIncFGTS) "
            "= [9X]); N (nos demais casos)"
        )
    )
    

class IdeProcessoCp(models.AbstractModel):
    """Identificação de processo - Incidência de Contrib. Previdenciária
    DESCRICAO_COMPLETA:Caso a empresa possua processo administrativo ou judicial
    com decisão/sentença favorável, determinando a não incidência de
    contribuição previdenciária relativa à rubrica identificada no evento, as
    informações deverão ser incluídas neste grupo, e o detalhamento do processo
    deverá ser efetuado através de evento específico na Tabela de Processos
    (S-1070).
    CHAVE_GRUPO: {nrProc}
    CONDICAO_GRUPO: O (se
    {codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) = [9X]); N (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideprocessocp"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosRubrica.IdeProcessoCp"


    
    eso11_tpProc = fields.Selection(TS_TPPROC_1_2,
        string="tpProc",
        xsd_required=True,
        xsd_type="TS_tpProc_1_2"
    )
    
    eso11_nrProc = fields.Char(
        string="Informar um número",
        xsd_required=True,
        xsd_type="TS_nrProc_17_20_21",
        help=(
            "Informar um número de processo cadastrado através do evento "
            "S-1070, cujo "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) "
            "seja igual a [1].\nValidação: Deve ser um número de processo "
            "administrativo ou judicial válido e existente na Tabela de "
            "Processos (S-1070), com "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) = "
            "[1]."
        )
    )
    
    eso11_extDecisao = fields.Selection(IDEPROCESSOCP_EXTDECISAO,
        string="extDecisao",
        xsd_required=True
    )
    
    eso11_codSusp = fields.Char(
        string="codSusp",
        xsd_required=True,
        xsd_type="TS_codSusp"
    )
    

class IdeProcessoIrrf(models.AbstractModel):
    """Identificação de processo - Incidência de IRRF
    DESCRICAO_COMPLETA:Caso a empresa possua processo judicial com decisão/sentença
    favorável, determinando a não incidência de imposto de renda relativo à
    rubrica identificada no evento, as informações deverão ser incluídas neste
    grupo, e o detalhamento do processo deverá ser efetuado através de evento
    específico na Tabela de Processos (S-1070).
    CHAVE_GRUPO: {nrProc}
    CONDICAO_GRUPO: O (se
    {codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) = [9X] ou
    [9XXX]); N (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideprocessoirrf"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosRubrica.IdeProcessoIrrf"


    
    eso11_nrProc = fields.Char(
        string="nrProc",
        xsd_required=True,
        xsd_type="TS_nrProcJud_1"
    )
    
    eso11_codSusp = fields.Char(
        string="codSusp",
        xsd_required=True,
        xsd_type="TS_codSusp"
    )
    

class IdeProcessoFgts(models.AbstractModel):
    """Identificação de processo - Incidência de FGTS
    DESCRICAO_COMPLETA:Caso a empresa possua processo judicial com decisão/sentença
    favorável, determinando a não incidência de FGTS relativo à rubrica
    identificada no evento, as informações deverão ser incluídas neste grupo, e
    o detalhamento do processo deverá ser efetuado através de evento específico
    na Tabela de Processos (S-1070).
    CHAVE_GRUPO: {nrProc}
    CONDICAO_GRUPO: O (se
    {codIncFGTS}(1010_infoRubrica_inclusao_dadosRubrica_codIncFGTS) = [9X]); N
    (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideprocessofgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosRubrica.IdeProcessoFgts"


    
    eso11_nrProc = fields.Char(
        string="nrProc",
        xsd_required=True,
        xsd_type="TS_nrProcJud_1_7"
    )


class ESocial(models.AbstractModel):
    "S-1010 - Tabela de Rubricas"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtTabRubrica = fields.Many2one(
        comodel_name="eso.11.evttabrubrica",
        string="Evento Tabela de Rubricas",
        xsd_required=True,
        help=(
            "Evento Tabela de Rubricas.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_"
            "PROC_FECHAMENTO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_"
            "TABGERAL_ALTERACAO_PERIODO_CONFLITANTE\nREGRA:REGRA_TABGERAL_EXIS"
            "TE_REGISTRO_ALTERADO\nREGRA:REGRA_TABGERAL_EXISTE_REGISTRO_EXCLUI"
            "DO\nREGRA:REGRA_TABGERAL_INCLUSAO_PERIODO_CONFLITANTE\nREGRA:REGR"
            "A_TABRUBR_INCLUSAO\nREGRA:REGRA_TAB_PERMITE_EXCLUSAO\nREGRA:REGRA"
            "_VALIDA_DT_FUTURA"
        )
    )
    

class EvtTabRubrica(models.AbstractModel):
    """Evento Tabela de Rubricas.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_TABGERAL_ALTERACAO_PERIODO_CONFLITANTE
    REGRA:REGRA_TABGERAL_EXISTE_REGISTRO_ALTERADO
    REGRA:REGRA_TABGERAL_EXISTE_REGISTRO_EXCLUIDO
    REGRA:REGRA_TABGERAL_INCLUSAO_PERIODO_CONFLITANTE
    REGRA:REGRA_TABRUBR_INCLUSAO
    REGRA:REGRA_TAB_PERMITE_EXCLUSAO
    REGRA:REGRA_VALIDA_DT_FUTURA"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttabrubrica"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabRubrica"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoevttab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_evtTab"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador"
    )
    
    eso11_infoRubrica = fields.Many2one(
        comodel_name="eso.11.inforubrica",
        string="Informações da rubrica",
        xsd_required=True,
        help=(
            "Informações da rubrica\nDESCRICAO_COMPLETA:Identificação da "
            "operação (inclusão, alteração ou exclusão) e das informações da "
            "rubrica."
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id"
    )
    

class InfoRubrica(models.AbstractModel):
    """Informações da rubrica
    DESCRICAO_COMPLETA:Identificação da operação (inclusão, alteração ou exclusão)
    e das informações da rubrica."""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inforubrica"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabRubrica.InfoRubrica"


    
    eso11_inclusao = fields.Many2one(
        comodel_name="eso.11.inclusao",
        string="Inclusão de novas informações",
        choice="inforubrica",
        xsd_choice_required=True,
        help="Inclusão de novas informações.\nCONDICAO_GRUPO: OC"
    )
    
    eso11_alteracao = fields.Many2one(
        comodel_name="eso.11.alteracao",
        string="Alteração das informações",
        choice="inforubrica",
        xsd_choice_required=True,
        help="Alteração das informações.\nCONDICAO_GRUPO: OC"
    )
    
    eso11_exclusao = fields.Many2one(
        comodel_name="eso.11.exclusao",
        string="Exclusão das informações",
        choice="inforubrica",
        xsd_choice_required=True,
        help="Exclusão das informações.\nCONDICAO_GRUPO: OC"
    )
    

class Inclusao(models.AbstractModel):
    """Inclusão de novas informações.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabRubrica.InfoRubrica.Inclusao"


    
    eso11_ideRubrica = fields.Many2one(
        comodel_name="eso.11.tiderubrica",
        string="ideRubrica",
        xsd_required=True,
        xsd_type="T_ideRubrica"
    )
    
    eso11_dadosRubrica = fields.Many2one(
        comodel_name="eso.11.tdadosrubrica",
        string="dadosRubrica",
        xsd_required=True,
        xsd_type="T_dadosRubrica"
    )
    

class Alteracao(models.AbstractModel):
    """Alteração das informações.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.alteracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabRubrica.InfoRubrica.Alteracao"


    
    eso11_ideRubrica = fields.Many2one(
        comodel_name="eso.11.tiderubrica",
        string="ideRubrica",
        xsd_required=True,
        xsd_type="T_ideRubrica"
    )
    
    eso11_dadosRubrica = fields.Many2one(
        comodel_name="eso.11.tdadosrubrica",
        string="dadosRubrica",
        xsd_required=True,
        xsd_type="T_dadosRubrica"
    )
    
    eso11_novaValidade = fields.Many2one(
        comodel_name="eso.11.tnovavalidade",
        string="novaValidade",
        xsd_type="T_novaValidade"
    )
    

class Exclusao(models.AbstractModel):
    """Exclusão das informações.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.exclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabRubrica.InfoRubrica.Exclusao"


    
    eso11_ideRubrica = fields.Many2one(
        comodel_name="eso.11.tiderubrica",
        string="ideRubrica",
        xsd_required=True,
        xsd_type="T_ideRubrica"
    )