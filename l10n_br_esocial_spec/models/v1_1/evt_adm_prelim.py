# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSNATATIVIDADE,
    TSTPCONTR,
    TSUNDSALFIXO,
    TIdeEmpregador,
    TIdeEventoTrabAdmissao,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtAdmPrelim/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-2190 - Registro Preliminar de Trabalhador"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtAdmPrelim = fields.Many2one(
        comodel_name="eso.11.evtadmprelim",
        string="Evento Registro Preliminar",
        xsd_required=True,
        help=(
            "Evento Registro Preliminar de Trabalhador.\nCHAVE_GRUPO: {Id}\nRE"
            "GRA:REGRA_ADMISSAO_VALIDA_DT_ADM\nREGRA:REGRA_ADMISSAO_VALIDA_DUR"
            "ACAO_CONTRATO\nREGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR\nREGRA:REG"
            "RA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB\nREGRA:REGRA_EMPREGADO_DOM"
            "ESTICO\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EX"
            "TEMP\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_MESMO_PROCE"
            "MI\nREGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_VALIDA_ADMISS"
            "AO_PRELIMINAR\nREGRA:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_VALIDA_"
            "MATRICULA"
        ),
    )


class EvtAdmPrelim(models.AbstractModel):
    """Evento Registro Preliminar de Trabalhador.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ADMISSAO_VALIDA_DT_ADM
    REGRA:REGRA_ADMISSAO_VALIDA_DURACAO_CONTRATO
    REGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR
    REGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_VALIDA_ADMISSAO_PRELIMINAR
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_MATRICULA"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtadmprelim"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmPrelim"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabadmissao",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_admissao",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_infoRegPrelim = fields.Many2one(
        comodel_name="eso.11.inforegprelim",
        string="Informações do registro preliminar",
        xsd_required=True,
        help=(
            "Informações do registro preliminar do trabalhador.\nCHAVE_GRUPO: "
            "{cpfTrab*}, {matricula*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoRegPrelim(models.AbstractModel):
    """Informações do registro preliminar do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}, {matricula*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inforegprelim"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmPrelim.InfoRegPrelim"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_dtNascto = fields.Date(
        string="a data de nascimento", xsd_required=True, xsd_type="xs:date"
    )

    eso11_dtAdm = fields.Date(
        string="a data de admissão do trabalhador",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de admissão do trabalhador (ou data de início, no caso de "
            "Trabalhador Sem Vínculo de Emprego/Estatutário - "
            "TSVE).\nValidação: Deve ser posterior à data de nascimento do "
            "trabalhador e igual ou posterior à data de início da "
            "obrigatoriedade dos eventos não periódicos para o empregador."
        ),
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa.\nValidação: O "
            "valor informado não pode conter a expressão 'eSocial' nas 7 "
            "(sete) primeiras posições.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador.\nValidação: Deve ser um "
            "código de categoria sujeito ao Registro de Eventos Trabalhistas -"
            " RET de trabalhador não vinculado ao Regime Próprio de "
            "Previdência Social - RPPS, ou seja, 'Empregado' ([1XX]), algumas "
            "categorias de 'Agente Público' ([301, 302, 303, 304, 306, 307, "
            "309, 310, 312]), 'Avulso' ([2XX]), 'Cessão' ([4XX]), algumas "
            "categorias de 'Contribuinte Individual' ([721, 722, 723, 731, "
            "734, 738, 761, 771]) ou de 'Bolsista' ([901, 902])."
        ),
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="Natureza da atividade",
        xsd_type="TS_natAtividade",
        help=(
            "Natureza da atividade.\nValidação: Preenchimento obrigatório se "
            "{codCateg}(./codCateg) for relativo a 'Empregado', 'Agente "
            "Público', 'Avulso' ou igual a [401, 731, 734, 738]. Não deve ser "
            "preenchido se {codCateg}(./codCateg) = [721, 722, 771, 901].\nSe "
            "{codCateg}(./codCateg) = [104], deve ser preenchido com [1]. Se "
            "{codCateg}(./codCateg) = [102], deve ser preenchido com [2]."
        ),
    )

    eso11_infoRegCTPS = fields.Many2one(
        comodel_name="eso.11.inforegctps",
        string="Informações referentes ao registro",
        help=(
            "Informações referentes ao registro e à CTPS "
            "Digital\nDESCRICAO_COMPLETA:Informações referentes ao registro "
            "eletrônico de empregados e à Carteira de Trabalho e Previdência "
            "Digital - CTPS Digital.\nCONDICAO_GRUPO: OC (se "
            "{codCateg}(2190_infoRegPrelim_codCateg) for relativo a "
            "'Empregado' ou 'Agente Público'); N (nos demais casos)"
        ),
    )


class InfoRegCtps(models.AbstractModel):
    """Informações referentes ao registro e à CTPS Digital
    DESCRICAO_COMPLETA:Informações referentes ao registro eletrônico de empregados
    e à Carteira de Trabalho e Previdência Digital - CTPS Digital.
    CONDICAO_GRUPO: OC (se {codCateg}(2190_infoRegPrelim_codCateg) for relativo a
    "Empregado" ou "Agente Público"); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inforegctps"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmPrelim.InfoRegPrelim.InfoRegCtps"

    eso11_CBOCargo = fields.Char(
        string="Classificação Brasileira de Ocupações",
        xsd_required=True,
        xsd_type="TS_cbo",
        help=(
            "Classificação Brasileira de Ocupações - CBO relativa ao "
            "cargo.\nValidação: Deve ser um código válido e existente na "
            "tabela de CBO, com 6 (seis) posições."
        ),
    )

    eso11_vrSalFx = fields.Float(
        string="vrSalFx", xsd_required=True, xsd_type="TS_vrSalFx"
    )

    eso11_undSalFixo = fields.Selection(
        TS_UNDSALFIXO, string="undSalFixo", xsd_required=True, xsd_type="TS_undSalFixo"
    )

    eso11_tpContr = fields.Selection(
        TS_TPCONTR, string="tpContr", xsd_required=True, xsd_type="TS_tpContr"
    )

    eso11_dtTerm = fields.Date(
        string="Data do término do contrato",
        xsd_type="xs:date",
        help=(
            "Data do término do contrato por prazo determinado.\nValidação: O "
            "preenchimento é obrigatório se {tpContr}(./tpContr) = [2]. Não "
            "informar se {tpContr}(./tpContr) = [1]. Deve ser igual ou "
            "posterior à data de admissão."
        ),
    )
