# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models

from .tipos import TSTPINSC12


__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTribProcTrab/v_S_01_01_00"


class ESocial(models.AbstractModel):
    """S-5501 - Informações Consolidadas de Tributos Decorrentes de Processo
    Trabalhista"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtTribProcTrab = fields.Many2one(
        comodel_name="eso.11.evttribproctrab",
        string="Evento Informações Consolidadas",
        xsd_required=True,
        help=(
            "Evento Informações Consolidadas de Tributos Decorrentes de "
            "Processo Trabalhista.\nCHAVE_GRUPO: {Id}"
        ),
    )


class EvtTribProcTrab(models.AbstractModel):
    """Evento Informações Consolidadas de Tributos Decorrentes de Processo
    Trabalhista.
    CHAVE_GRUPO: {Id}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttribproctrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.ideevento",
        string="Informações de identificação do evento",
        xsd_required=True,
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.ideempregador",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do empregador ou do contribuinte que"
            " prestou a informação.\nCHAVE_GRUPO: {tpInsc*}, {nrInsc*}"
        ),
    )

    eso11_ideProc = fields.Many2one(
        comodel_name="eso.11.ideproc",
        string="Identificação do processo",
        xsd_required=True,
        help=("Identificação do processo.\nCHAVE_GRUPO: {nrProcTrab*}, " "{perApur*}"),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id_retorno")


class IdeEvento(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideevento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab.IdeEvento"

    eso11_nrRecArqBase = fields.Char(
        string="o número do recibo do arquivo",
        xsd_required=True,
        xsd_type="TS_nrRecArqBase",
        help=(
            "o número do recibo do arquivo que deu origem ao presente arquivo "
            "de retorno.\nValidação: Deve ser um recibo de entrega válido, "
            "correspondente ao arquivo que deu origem ao presente arquivo de "
            "retorno (S-2501 ou S-3500)."
        ),
    )


class IdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador ou do contribuinte que
    prestou a informação.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab.IdeEmpregador"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
        help=(
            "o código correspondente ao tipo de inscrição do empregador ou "
            "contribuinte que prestou a informação, conforme Tabela 05."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do empregador",
        xsd_required=True,
        xsd_type="TS_nrInsc_8_11_14",
        help=(
            "número de inscrição do empregador ou contribuinte que prestou a "
            "informação, de acordo com o tipo de inscrição indicado no campo "
            "{ideEmpregador/tpInsc}(./tpInsc) e conforme informado em S-1000."
        ),
    )


class IdeProc(models.AbstractModel):
    """Identificação do processo.
    CHAVE_GRUPO: {nrProcTrab*}, {perApur*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideproc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab.IdeProc"

    eso11_nrProcTrab = fields.Char(
        string="Número do processo trabalhista",
        xsd_required=True,
        xsd_type="TS_nrProcTrab",
        help=(
            "Número do processo trabalhista, da ata ou número de identificação"
            " da conciliação.\nValidação: a) Se o evento de origem for S-2501,"
            " retornar o campo {nrProcTrab}(2501_ideProc_nrProcTrab) desse "
            "evento;\nb) Se o evento de origem for S-3500, retornar o campo "
            "{nrProcTrab}(2501_ideProc_nrProcTrab) do evento S-2501 objeto da "
            "exclusão."
        ),
    )

    eso11_perApur = fields.Char(
        string="Mês/ano em que é devida a obrigação",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "Mês/ano em que é devida a obrigação de pagar a parcela prevista "
            "no acordo/sentença.\nValidação: a) Se o evento de origem for "
            "S-2501, retornar o campo {perApurPgto}(2501_ideProc_perApurPgto) "
            "desse evento;\nb) Se o evento de origem for S-3500, retornar o "
            "campo {perApurPgto}(2501_ideProc_perApurPgto) do evento S-2501 "
            "objeto da exclusão."
        ),
    )

    eso11_infoTributos = fields.One2many(
        "eso.11.infotributos",
        "eso11_infoTributos_ideProc_id",
        string="Identificação do período e da base",
        help=(
            "Identificação do período e da base de cálculo dos tributos "
            "referentes ao processo trabalhista.\nCHAVE_GRUPO: {perRef}"
        ),
    )

    eso11_infoCRIRRF = fields.One2many(
        "eso.11.infocrirrf",
        "eso11_infoCRIRRF_ideProc_id",
        string="Informações de IRRF referentes",
        help=(
            "Informações de IRRF referentes ao processo "
            "trabalhista.\nDESCRICAO_COMPLETA:Informações de Imposto de Renda "
            "Retido na Fonte, consolidadas por Código de Receita - "
            "CR.\nCHAVE_GRUPO: {tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoTributos(models.AbstractModel):
    """Identificação do período e da base de cálculo dos tributos referentes ao
    processo trabalhista.
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotributos"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab.IdeProc.InfoTributos"

    eso11_perRef = fields.Char(
        string="mês/ano",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "mês/ano (formato AAAA-MM) de referência das "
            "informações.\nValidação: a) Se o evento de origem for S-2501, "
            "retornar o campo {perRef}(2501_ideTrab_calcTrib_perRef) desse "
            "evento;\nb) Se o evento de origem for S-3500, retornar o campo "
            "{perRef}(2501_ideTrab_calcTrib_perRef) do evento S-2501 objeto da"
            " exclusão."
        ),
    )

    eso11_infoCRContrib = fields.One2many(
        "eso.11.infocrcontrib",
        "eso11_infoCRContrib_infoTributos_id",
        string="Informações",
        help=(
            "Informações das contribuições sociais referentes ao processo "
            "trabalhista.\nDESCRICAO_COMPLETA:Informações das contribuições "
            "sociais devidas à Previdência Social e Outras Entidades e Fundos,"
            " consolidadas por {perRef}(../perRef) e por Código de Receita - "
            "CR.\nCHAVE_GRUPO: {tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoCrcontrib(models.AbstractModel):
    """Informações das contribuições sociais referentes ao processo
    trabalhista.
    DESCRICAO_COMPLETA:Informações das contribuições sociais devidas à Previdência
    Social e Outras Entidades e Fundos, consolidadas por {perRef}(../perRef) e
    por Código de Receita - CR.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocrcontrib"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab.IdeProc.InfoTributos.InfoCrcontrib"

    eso11_tpCR = fields.Char(string="tpCR", xsd_required=True)

    eso11_vrCR = fields.Float(
        string="Valor correspondente ao Código",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor correspondente ao Código de Receita - CR.\nValidação: Deve "
            "ser apurado de acordo com a legislação em vigor na "
            "competência.\nDeve ser maior que 0 (zero)."
        ),
    )


class InfoCrirrf(models.AbstractModel):
    """Informações de IRRF referentes ao processo trabalhista.
    DESCRICAO_COMPLETA:Informações de Imposto de Renda Retido na Fonte,
    consolidadas por Código de Receita - CR.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocrirrf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTribProcTrab.IdeProc.InfoCrirrf"

    eso11_tpCR = fields.Char(string="tpCR", xsd_required=True)

    eso11_vrCR = fields.Float(
        string="Valor correspondente ao Código",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor correspondente ao Código de Receita - CR.\nValidação: Deve "
            "ser apurado de acordo com a legislação em vigor na "
            "competência.\nDeve ser maior que 0 (zero)."
        ),
    )
