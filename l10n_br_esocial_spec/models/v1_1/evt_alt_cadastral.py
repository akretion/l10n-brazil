# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSCONDING,
    TSESTCIVIL,
    TSGRAUINSTR,
    TSRACACOR,
    TSSEXO,
    TSSIMNAO,
    TSTMPRESID,
    TContato,
    TEnderecoBrasil,
    TEnderecoExterior,
    TIdeEmpregador,
    TIdeEventoTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtAltCadastral/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-2205 - Alteração de Dados Cadastrais do Trabalhador"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtAltCadastral = fields.Many2one(
        comodel_name="eso.11.evtaltcadastral",
        string="Evento Alteração de Dados Cadastrais",
        xsd_required=True,
        help=(
            "Evento Alteração de Dados Cadastrais do "
            "Trabalhador.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_PROC_FECHAMENT"
            "O\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO_POSTERIOR_CAT_O"
            "BITO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_EXISTE_TRAB"
            "ALHADOR\nREGRA:REGRA_EXTEMP_DOMESTICO\nREGRA:REGRA_EXTEMP_REINTEG"
            "RACAO\nREGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"
        ),
    )


class EvtAltCadastral(models.AbstractModel):
    """Evento Alteração de Dados Cadastrais do Trabalhador.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXISTE_TRABALHADOR
    REGRA:REGRA_EXTEMP_DOMESTICO
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtaltcadastral"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideTrabalhador = fields.Many2one(
        comodel_name="eso.11.idetrabalhador",
        string="Identificação do trabalhador",
        xsd_required=True,
        help="Identificação do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}",
    )

    eso11_alteracao = fields.Many2one(
        comodel_name="eso.11.alteracao",
        string="Alteração de dados cadastrais",
        xsd_required=True,
        help=(
            "Alteração de dados cadastrais do trabalhador.\nCHAVE_GRUPO: "
            "{dtAlteracao*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeTrabalhador(models.AbstractModel):
    """Identificação do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.IdeTrabalhador"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )


class Alteracao(models.AbstractModel):
    """Alteração de dados cadastrais do trabalhador.
    CHAVE_GRUPO: {dtAlteracao*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.alteracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.Alteracao"

    eso11_dtAlteracao = fields.Date(
        string="dtAlteracao", xsd_required=True, xsd_type="TS_dtAlteracao"
    )

    eso11_dadosTrabalhador = fields.Many2one(
        comodel_name="eso.11.dadostrabalhador",
        string="Informações pessoais do trabalhador",
        xsd_required=True,
    )


class DadosTrabalhador(models.AbstractModel):
    "Informações pessoais do trabalhador."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dadostrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.Alteracao.DadosTrabalhador"

    eso11_nmTrab = fields.Char(string="nmTrab", xsd_required=True, xsd_type="TS_nmTrab")

    eso11_sexo = fields.Selection(
        TS_SEXO, string="sexo", xsd_required=True, xsd_type="TS_sexoTrab"
    )

    eso11_racaCor = fields.Selection(
        TS_RACACOR, string="racaCor", xsd_required=True, xsd_type="TS_racaCorTrab"
    )

    eso11_estCiv = fields.Selection(
        TS_ESTCIVIL, string="estCiv", xsd_type="TS_estCivilTrab"
    )

    eso11_grauInstr = fields.Selection(
        TS_GRAUINSTR, string="grauInstr", xsd_required=True, xsd_type="TS_grauInstr"
    )

    eso11_nmSoc = fields.Char(string="nmSoc", xsd_type="TS_nmSoc")

    eso11_paisNac = fields.Char(
        string="paisNac", xsd_required=True, xsd_type="TS_paisNac"
    )

    eso11_endereco = fields.Many2one(
        comodel_name="eso.11.endereco",
        string="Endereço do trabalhador",
        xsd_required=True,
        help=(
            "Endereço do trabalhador\nDESCRICAO_COMPLETA:Grupo de informações "
            "do endereço do trabalhador."
        ),
    )

    eso11_trabImig = fields.Many2one(
        comodel_name="eso.11.trabimig",
        string="Informações do trabalhador imigrante",
        help=(
            "Informações do trabalhador imigrante.\nCONDICAO_GRUPO: OC (se "
            "{paisNac}(2205_alteracao_dadosTrabalhador_paisNac) for diferente "
            "de [105]); N (nos demais casos)"
        ),
    )

    eso11_infoDeficiencia = fields.Many2one(
        comodel_name="eso.11.infodeficiencia",
        string="Pessoa com deficiência",
        help="Pessoa com deficiência.\nCONDICAO_GRUPO: OC",
    )

    eso11_dependente = fields.One2many(
        "eso.11.dependente",
        "eso11_dependente_dadosTrabalhador_id",
        string="Informações dos dependentes",
        help=(
            "Informações dos dependentes.\nCHAVE_GRUPO: {tpDep}, {nmDep}, "
            "{dtNascto}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_contato = fields.Many2one(
        comodel_name="eso.11.tcontato",
        string="Informações de contato",
        xsd_type="T_contato",
        help="Informações de contato.\nCONDICAO_GRUPO: OC",
    )


class Endereco(models.AbstractModel):
    """Endereço do trabalhador
    DESCRICAO_COMPLETA:Grupo de informações do endereço do trabalhador."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.endereco"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.Alteracao.DadosTrabalhador.Endereco"

    eso11_brasil = fields.Many2one(
        comodel_name="eso.11.tenderecobrasil",
        string="brasil",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_brasil",
    )

    eso11_exterior = fields.Many2one(
        comodel_name="eso.11.tenderecoexterior",
        string="exterior",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_exterior",
    )


class TrabImig(models.AbstractModel):
    """Informações do trabalhador imigrante.
    CONDICAO_GRUPO: OC (se {paisNac}(2205_alteracao_dadosTrabalhador_paisNac) for
    diferente de [105]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabimig"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.Alteracao.DadosTrabalhador.TrabImig"

    eso11_tmpResid = fields.Selection(
        TS_TMPRESID,
        string="Tempo de residência",
        xsd_type="TS_tmpResid",
        help=(
            "Tempo de residência do trabalhador imigrante.\nValidação: "
            "Preenchimento obrigatório quando houver trabalhador com "
            "({dtAdm}(2200_vinculo_infoRegimeTrab_infoCeletista_dtAdm) ou {dtE"
            "xercicio}(2200_vinculo_infoRegimeTrab_infoEstatutario_dtExercicio"
            ") ou {dtInicio}(2300_infoTSVInicio_dtInicio)) no Registro de "
            "Eventos Trabalhistas - RET &gt;= [2021-07-19]."
        ),
    )

    eso11_condIng = fields.Selection(
        TS_CONDING, string="condIng", xsd_required=True, xsd_type="TS_condIng"
    )


class InfoDeficiencia(models.AbstractModel):
    """Pessoa com deficiência.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodeficiencia"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.Alteracao.DadosTrabalhador.InfoDeficiencia"

    eso11_defFisica = fields.Selection(
        TS_SIM_NAO, string="defFisica", xsd_required=True, xsd_type="TS_defFisica"
    )

    eso11_defVisual = fields.Selection(
        TS_SIM_NAO, string="defVisual", xsd_required=True, xsd_type="TS_defVisual"
    )

    eso11_defAuditiva = fields.Selection(
        TS_SIM_NAO, string="defAuditiva", xsd_required=True, xsd_type="TS_defAuditiva"
    )

    eso11_defMental = fields.Selection(
        TS_SIM_NAO, string="defMental", xsd_required=True, xsd_type="TS_defMental"
    )

    eso11_defIntelectual = fields.Selection(
        TS_SIM_NAO,
        string="defIntelectual",
        xsd_required=True,
        xsd_type="TS_defIntelectual",
    )

    eso11_reabReadap = fields.Selection(
        TS_SIM_NAO, string="reabReadap", xsd_required=True, xsd_type="TS_reabReadap"
    )

    eso11_infoCota = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o trabalhador deve",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o trabalhador deve ser contabilizado no preenchimento"
            " de cota de pessoas com deficiência habilitadas ou de "
            "beneficiários reabilitados.\nValidação: Preenchimento obrigatório"
            " e exclusivo quando houver trabalhador cadastrado no evento "
            "S-2200 com {tpRegTrab}(2200_vinculo_tpRegTrab) = [1] e ativo em "
            "{dtAlteracao}(2205_alteracao_dtAlteracao). Somente pode ser "
            "informado [S] se pelo menos um dos campos a seguir estiver "
            "preenchido com [S]: {defFisica}(./defFisica), "
            "{defVisual}(./defVisual), {defAuditiva}(./defAuditiva), "
            "{defMental}(./defMental), {defIntelectual}(./defIntelectual) e "
            "{reabReadap}(./reabReadap).\nEsta validação não deve ser "
            "realizada quando se tratar de evento enviado em versão do leiaute"
            " anterior a S-1.0."
        ),
    )

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")


class Dependente(models.AbstractModel):
    """Informações dos dependentes.
    CHAVE_GRUPO: {tpDep}, {nmDep}, {dtNascto}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dependente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltCadastral.Alteracao.DadosTrabalhador.Dependente"

    eso11_tpDep = fields.Char(string="tpDep", xsd_required=True, xsd_type="TS_tpDep")

    eso11_nmDep = fields.Char(string="nmDep", xsd_required=True, xsd_type="TS_nmDep")

    eso11_dtNascto = fields.Date(
        string="dtNascto", xsd_required=True, xsd_type="TS_dtNascto"
    )

    eso11_cpfDep = fields.Char(string="cpfDep", xsd_type="TS_cpfDep")

    eso11_sexoDep = fields.Selection(
        TS_SEXO,
        string="Sexo do dependente",
        xsd_type="TS_sexo",
        help=(
            "Sexo do dependente.\nValidação: Preenchimento obrigatório e "
            "exclusivo quando houver trabalhador cadastrado no evento S-2200, "
            "ativo em {dtAlteracao}(2205_alteracao_dtAlteracao) e com "
            "{tpRegPrev} = [2] no RET.\nEsta validação não deve ser realizada "
            "quando se tratar de recepção de evento extemporâneo."
        ),
    )

    eso11_depIRRF = fields.Selection(
        TS_SIM_NAO, string="depIRRF", xsd_required=True, xsd_type="TS_depIRRF"
    )

    eso11_depSF = fields.Selection(
        TS_SIM_NAO, string="depSF", xsd_required=True, xsd_type="TS_depSF"
    )

    eso11_incTrab = fields.Selection(
        TS_SIM_NAO, string="incTrab", xsd_required=True, xsd_type="TS_incTrab"
    )
