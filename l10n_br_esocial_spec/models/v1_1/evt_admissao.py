# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TS_CONDING,
    TS_ESTCIVIL,
    TS_GRAUINSTR,
    TS_NATATIVIDADE,
    TSRACACOR,
    TSSEXO,
    TSSIMNAO,
    TSTMPRESID,
    TSTPCONTR,
    TSTPINSC12,
    TSTPPLANRP,
    TSTPREGJOR,
    TSTPREGPREV,
    TSTPREGTRAB,
    TAlvaraJudicial,
    TAprend,
    TContato,
    TEnderecoBrasil,
    TEnderecoExterior,
    THorContratual,
    TIdeEmpregador,
    TIdeEventoTrabAdmissao,
    TLocalTrabGeral,
    TNascimento,
    TRemuneracao,
    TTreiCap,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtAdmissao/v_S_01_01_00"

"Indicativo de admissão."
INFOCELETISTA_INDADMISSAO = [
    ("1", "Normal"),
    ("2", "Decorrente de ação fiscal"),
    ("3", "Decorrente de decisão judicial"),
]

"""Tipo de admissão do trabalhador.
    Validação: Se for igual a [5], {codCateg}(2200_vinculo_infoContrato_codCateg)
    deve ser igual a [104] e {procEmi}(2200_ideEvento_procEmi) deve ser igual a
    [2, 22].
    Se for igual a [6], {cadIni}(2200_vinculo_cadIni) deve ser igual a [N]."""
INFOCELETISTA_TPADMISSAO = [
    ("1", "Admissão"),
    (
        "2",
        "Transferência de empresa do mesmo grupo econômico ou transferência entre órgãos do mesmo Ente Federativo",
    ),
    ("3", "Transferência de empresa consorciada ou de consórcio"),
    ("4", "Transferência por motivo de sucessão, incorporação, cisão ou fusão"),
    (
        "5",
        "Transferência do empregado doméstico para outro representante da mesma unidade familiar",
    ),
    ("6", "Mudança de CPF"),
    (
        "7",
        "Transferência quando a empresa sucedida é considerada inapta por inexistência de fato",
    ),
]

"""Preencher com o tipo de provimento.
    Validação: Os valores [3, 5, 6, 7, 8, 9] só são permitidos se a natureza
    jurídica do declarante for Administração Pública (grupo [1]).
    Se {codCateg}(2200_vinculo_infoContrato_codCateg) = [302], deve ser preenchido
    com [2, 5, 8, 10]."""
INFOESTATUTARIO_TPPROV = [
    ("1", "Nomeação em cargo efetivo"),
    ("2", "Nomeação exclusivamente em cargo em comissão"),
    ("3", "Incorporação, matrícula ou nomeação (militar)"),
    ("5", "Redistribuição ou Reforma Administrativa"),
    ("6", "Diplomação"),
    ("7", "Contratação por tempo determinado"),
    ("8", "Remoção (em caso de alteração do órgão declarante)"),
    ("9", "Designação"),
    ("10", "Mudança de CPF"),
    ("11", "Estabilizados - Art. 19 do ADCT"),
    ("99", "Outros não relacionados acima"),
]

"""Preencher com o código correspondente ao tipo de inscrição, conforme
    Tabela 05.
    Validação: Somente é possível informar [5] se {dtTransf}(./dtTransf) for igual
    ou anterior a [1999-06-30].
    Somente é possível informar [6] se {dtTransf}(./dtTransf) for igual ou anterior
    a [2011-12-31]."""
SUCESSAOVINC_TPINSC = [
    ("1", "CNPJ"),
    ("2", "CPF"),
    ("5", "CGC"),
    ("6", "CEI"),
]

"Hipótese legal para contratação de trabalhador temporário."
TRABTEMPORARIO_HIPLEG = [
    ("1", "Necessidade de substituição transitória de pessoal permanente"),
    ("2", "Demanda complementar de serviços"),
]

"""Indicar se o evento se refere a cadastramento inicial de vínculo (o
    ingresso do trabalhador no empregador declarante, por admissão ou
    transferência, é anterior à data de início da obrigatoriedade de envio
    de seus eventos não periódicos) ou se refere a admissão (o ingresso do
    trabalhador no empregador declarante é igual ou posterior à data de
    início de obrigatoriedade de envio de seus eventos não periódicos)."""
VINCULO_CADINI = [
    ("S", "Sim (Cadastramento Inicial)"),
    ("N", "Não (Admissão)"),
]


class ESocial(models.AbstractModel):
    """S-2200 - Cadastramento Inicial do Vínculo e Admissão/Ingresso de
    Trabalhador"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtAdmissao = fields.Many2one(
        comodel_name="eso.11.evtadmissao",
        string="Evento Cadastramento Inicial do Vínculo",
        xsd_required=True,
        help=(
            "Evento Cadastramento Inicial do Vínculo e Admissão/Ingresso de "
            "Trabalhador.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ADMISSAO_POSTERIOR_I"
            "NICIO_ATIVIDADES\nREGRA:REGRA_ADMISSAO_VALIDA_DT_ADM\nREGRA:REGRA"
            "_ADMISSAO_VALIDA_DURACAO_CONTRATO\nREGRA:REGRA_BLOQUEIA_USO_CPF_E"
            "MPREGADOR\nREGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB\nREGRA"
            ":REGRA_COMPATIB_CATEG_EVENTO\nREGRA:REGRA_EMPREGADO_DOMESTICO\nRE"
            "GRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGR"
            "A:REGRA_EVETRAB_VALIDA_OPCAO_FGTS\nREGRA:REGRA_EXCLUSAO_ADMISSAO_"
            "TSVE_INICIO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_EXTE"
            "MP_DOMESTICO\nREGRA:REGRA_EXTEMP_REINTEGRACAO\nREGRA:REGRA_GERAL_"
            "VALIDA_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_M"
            "UDANCA_CPF\nREGRA:REGRA_REGISTRO_PRELIMINAR\nREGRA:REGRA_RETIFICA"
            "_MESMO_VINCULO\nREGRA:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_VALIDA"
            "_MATRICULA\nREGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"
        ),
    )


class EvtAdmissao(models.AbstractModel):
    """Evento Cadastramento Inicial do Vínculo e Admissão/Ingresso de
    Trabalhador.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ADMISSAO_POSTERIOR_INICIO_ATIVIDADES
    REGRA:REGRA_ADMISSAO_VALIDA_DT_ADM
    REGRA:REGRA_ADMISSAO_VALIDA_DURACAO_CONTRATO
    REGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR
    REGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB
    REGRA:REGRA_COMPATIB_CATEG_EVENTO
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVETRAB_VALIDA_OPCAO_FGTS
    REGRA:REGRA_EXCLUSAO_ADMISSAO_TSVE_INICIO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_DOMESTICO
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_MUDANCA_CPF
    REGRA:REGRA_REGISTRO_PRELIMINAR
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_MATRICULA
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtadmissao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabadmissao",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_admissao",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_trabalhador = fields.Many2one(
        comodel_name="eso.11.trabalhador",
        string="Informações pessoais do trabalhador",
        xsd_required=True,
        help=("Informações pessoais do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}"),
    )

    eso11_vinculo = fields.Many2one(
        comodel_name="eso.11.vinculo",
        string="Informações do vínculo",
        xsd_required=True,
        help=(
            "Informações do vínculo.\nDESCRICAO_COMPLETA:Grupo de informações "
            "do vínculo.\nCHAVE_GRUPO: {matricula*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class Trabalhador(models.AbstractModel):
    """Informações pessoais do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Trabalhador"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_nmTrab = fields.Char(string="nmTrab", xsd_required=True, xsd_type="TS_nmTrab")

    eso11_sexo = fields.Selection(
        TS_SEXO, string="sexo", xsd_required=True, xsd_type="TS_sexoTrab"
    )

    eso11_racaCor = fields.Selection(
        TS_RACACOR, string="racaCor", xsd_required=True, xsd_type="TS_racaCorTrab"
    )

    eso11_estCiv = fields.Selection(
        TS_ESTCIVIL, string="estCiv", xsd_type="TS_estCivilTrab"
    )

    eso11_grauInstr = fields.Selection(
        TS_GRAUINSTR, string="grauInstr", xsd_required=True, xsd_type="TS_grauInstr"
    )

    eso11_nmSoc = fields.Char(string="nmSoc", xsd_type="TS_nmSoc")

    eso11_nascimento = fields.Many2one(
        comodel_name="eso.11.tnascimento",
        string="nascimento",
        xsd_required=True,
        xsd_type="T_nascimento",
    )

    eso11_endereco = fields.Many2one(
        comodel_name="eso.11.endereco",
        string="Endereço do trabalhador",
        help=(
            "Endereço do trabalhador\nDESCRICAO_COMPLETA:Grupo de informações "
            "do endereço do trabalhador.\nCONDICAO_GRUPO: O (se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_trabImig = fields.Many2one(
        comodel_name="eso.11.trabimig",
        string="Informações do trabalhador imigrante",
        help=(
            "Informações do trabalhador imigrante.\nCONDICAO_GRUPO: N (se "
            "{paisNac}(2200_trabalhador_nascimento_paisNac) = [105]); OC (se "
            "{paisNac}(2200_trabalhador_nascimento_paisNac) for diferente de "
            "[105]) e se grupo {desligamento}(2200_vinculo_desligamento) não "
            "estiver preenchido); F (nos demais casos)"
        ),
    )

    eso11_infoDeficiencia = fields.Many2one(
        comodel_name="eso.11.infodeficiencia",
        string="Pessoa com deficiência",
        help=(
            "Pessoa com deficiência.\nCONDICAO_GRUPO: OC (se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_dependente = fields.One2many(
        "eso.11.dependente",
        "eso11_dependente_trabalhador_id",
        string="Informações dos dependentes",
        help=(
            "Informações dos dependentes.\nCHAVE_GRUPO: {tpDep}, {nmDep}, "
            "{dtNascto}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_contato = fields.Many2one(
        comodel_name="eso.11.tcontato",
        string="Informações de contato",
        xsd_type="T_contato",
        help=(
            "Informações de contato.\nCONDICAO_GRUPO: OC (se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )


class Endereco(models.AbstractModel):
    """Endereço do trabalhador
    DESCRICAO_COMPLETA:Grupo de informações do endereço do trabalhador.
    CONDICAO_GRUPO: O (se grupo {desligamento}(2200_vinculo_desligamento) não
    estiver preenchido); F (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.endereco"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Trabalhador.Endereco"

    eso11_brasil = fields.Many2one(
        comodel_name="eso.11.tenderecobrasil",
        string="Endereço no Brasil",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_brasil",
        help=(
            "Endereço no Brasil.\nCONDICAO_GRUPO: O (se não informados os "
            "grupos {exterior}(2200_trabalhador_endereco_exterior) e "
            "{desligamento}(2200_vinculo_desligamento)); N (se grupo "
            "{exterior}(2200_trabalhador_endereco_exterior) estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_exterior = fields.Many2one(
        comodel_name="eso.11.tenderecoexterior",
        string="Endereço no exterior",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_exterior",
        help=(
            "Endereço no exterior.\nCONDICAO_GRUPO: O (se não informados os "
            "grupos {brasil}(2200_trabalhador_endereco_brasil) e "
            "{desligamento}(2200_vinculo_desligamento)); N (se grupo "
            "{brasil}(2200_trabalhador_endereco_brasil) estiver preenchido); F"
            " (nos demais casos)"
        ),
    )


class TrabImig(models.AbstractModel):
    """Informações do trabalhador imigrante.
    CONDICAO_GRUPO: N (se {paisNac}(2200_trabalhador_nascimento_paisNac) = [105]);
    OC (se {paisNac}(2200_trabalhador_nascimento_paisNac) for diferente de
    [105]) e se grupo {desligamento}(2200_vinculo_desligamento) não estiver
    preenchido); F (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabimig"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Trabalhador.TrabImig"

    eso11_tmpResid = fields.Selection(
        TS_TMPRESID,
        string="Tempo de residência",
        xsd_type="TS_tmpResid",
        help=(
            "Tempo de residência do trabalhador imigrante.\nValidação: "
            "Preenchimento obrigatório se "
            "({dtAdm}(2200_vinculo_infoRegimeTrab_infoCeletista_dtAdm) ou {dtE"
            "xercicio}(2200_vinculo_infoRegimeTrab_infoEstatutario_dtExercicio"
            ")) &gt;= [2021-07-19]."
        ),
    )

    eso11_condIng = fields.Selection(
        TS_CONDING, string="condIng", xsd_required=True, xsd_type="TS_condIng"
    )


class InfoDeficiencia(models.AbstractModel):
    """Pessoa com deficiência.
    CONDICAO_GRUPO: OC (se grupo {desligamento}(2200_vinculo_desligamento) não
    estiver preenchido); F (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodeficiencia"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Trabalhador.InfoDeficiencia"

    eso11_defFisica = fields.Selection(
        TS_SIM_NAO, string="defFisica", xsd_required=True, xsd_type="TS_defFisica"
    )

    eso11_defVisual = fields.Selection(
        TS_SIM_NAO, string="defVisual", xsd_required=True, xsd_type="TS_defVisual"
    )

    eso11_defAuditiva = fields.Selection(
        TS_SIM_NAO, string="defAuditiva", xsd_required=True, xsd_type="TS_defAuditiva"
    )

    eso11_defMental = fields.Selection(
        TS_SIM_NAO, string="defMental", xsd_required=True, xsd_type="TS_defMental"
    )

    eso11_defIntelectual = fields.Selection(
        TS_SIM_NAO,
        string="defIntelectual",
        xsd_required=True,
        xsd_type="TS_defIntelectual",
    )

    eso11_reabReadap = fields.Selection(
        TS_SIM_NAO, string="reabReadap", xsd_required=True, xsd_type="TS_reabReadap"
    )

    eso11_infoCota = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o trabalhador deve",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o trabalhador deve ser contabilizado no preenchimento"
            " de cota de pessoas com deficiência habilitadas ou de "
            "beneficiários reabilitados.\nValidação: Preenchimento obrigatório"
            " e exclusivo se {tpRegTrab}(2200_vinculo_tpRegTrab) = [1]. "
            "Somente pode ser informado [S] se pelo menos um dos campos a "
            "seguir estiver preenchido com [S]: {defFisica}(./defFisica), "
            "{defVisual}(./defVisual), {defAuditiva}(./defAuditiva), "
            "{defMental}(./defMental), {defIntelectual}(./defIntelectual) e "
            "{reabReadap}(./reabReadap).\nEsta validação não deve ser "
            "realizada quando se tratar de evento enviado em versão do leiaute"
            " anterior a S-1.0."
        ),
    )

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")


class Dependente(models.AbstractModel):
    """Informações dos dependentes.
    CHAVE_GRUPO: {tpDep}, {nmDep}, {dtNascto}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dependente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Trabalhador.Dependente"

    eso11_tpDep = fields.Char(string="tpDep", xsd_required=True, xsd_type="TS_tpDep")

    eso11_nmDep = fields.Char(string="nmDep", xsd_required=True, xsd_type="TS_nmDep")

    eso11_dtNascto = fields.Date(
        string="dtNascto", xsd_required=True, xsd_type="TS_dtNascto"
    )

    eso11_cpfDep = fields.Char(string="cpfDep", xsd_type="TS_cpfDep")

    eso11_sexoDep = fields.Selection(
        TS_SEXO,
        string="Sexo do dependente",
        xsd_type="TS_sexo",
        help=(
            "Sexo do dependente.\nValidação: Preenchimento obrigatório se "
            "{tpRegPrev}(2200_vinculo_tpRegPrev) = [2] e "
            "{cadIni}(2200_vinculo_cadIni) = [N]. Não informar se "
            "{tpRegPrev}(2200_vinculo_tpRegPrev) for diferente de [2]."
        ),
    )

    eso11_depIRRF = fields.Selection(
        TS_SIM_NAO, string="depIRRF", xsd_required=True, xsd_type="TS_depIRRF"
    )

    eso11_depSF = fields.Selection(
        TS_SIM_NAO, string="depSF", xsd_required=True, xsd_type="TS_depSF"
    )

    eso11_incTrab = fields.Selection(
        TS_SIM_NAO, string="incTrab", xsd_required=True, xsd_type="TS_incTrab"
    )


class Vinculo(models.AbstractModel):
    """Informações do vínculo.
    DESCRICAO_COMPLETA:Grupo de informações do vínculo.
    CHAVE_GRUPO: {matricula*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.vinculo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo"

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: O valor "
            "informado não pode conter a expressão 'eSocial' nas 7 (sete) "
            "primeiras posições.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_tpRegTrab = fields.Selection(
        TS_TPREGTRAB,
        string="Tipo de regime trabalhista",
        xsd_required=True,
        xsd_type="TS_tpRegTrab",
        help=(
            "Tipo de regime trabalhista.\nValidação: Se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) = [104], deve ser "
            "preenchido com [1]."
        ),
    )

    eso11_tpRegPrev = fields.Selection(
        TS_TPREGPREV, string="tpRegPrev", xsd_required=True, xsd_type="TS_tpRegPrev"
    )

    eso11_cadIni = fields.Selection(VINCULO_CADINI, string="cadIni", xsd_required=True)

    eso11_infoRegimeTrab = fields.Many2one(
        comodel_name="eso.11.inforegimetrab",
        string="Informações do regime trabalhista",
        xsd_required=True,
    )

    eso11_infoContrato = fields.Many2one(
        comodel_name="eso.11.infocontrato",
        string="Informações do contrato de trabalho",
        xsd_required=True,
    )

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.sucessaovinc",
        string="Grupo de informações da sucessão",
        help=(
            "Grupo de informações da sucessão de vínculo "
            "trabalhista/estatutário.\nCONDICAO_GRUPO: O (se {tpAdmissao}(2200"
            "_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) = [2, 3, 4, 7] "
            "ou {tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) ="
            " [5, 8]); N (nos demais casos)"
        ),
    )

    eso11_transfDom = fields.Many2one(
        comodel_name="eso.11.transfdom",
        string="Informações",
        help=(
            "Informações do empregado doméstico transferido de outro "
            "representante da mesma unidade familiar.\nCONDICAO_GRUPO: O (se {"
            "tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao)"
            " for igual [5]); N (nos demais casos)"
        ),
    )

    eso11_mudancaCPF = fields.Many2one(
        comodel_name="eso.11.mudancacpf",
        string="Informações de mudança de CPF",
        help=(
            "Informações de mudança de CPF do trabalhador.\nCONDICAO_GRUPO: O "
            "(se {tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmi"
            "ssao) = [6] ou "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = "
            "[10]); N (nos demais casos)"
        ),
    )

    eso11_afastamento = fields.Many2one(
        comodel_name="eso.11.afastamento",
        string="Informações de afastamento",
        help=(
            "Informações de afastamento do "
            "trabalhador\nDESCRICAO_COMPLETA:Informações de afastamento do "
            "trabalhador.\nPreenchimento exclusivo em caso de trabalhador que "
            "permaneça afastado na data de início da obrigatoriedade dos "
            "eventos não periódicos para o empregador no eSocial ou na data de"
            " transferência ou alteração de CPF do empregado.\nCONDICAO_GRUPO:"
            " N (se grupo {desligamento}(2200_vinculo_desligamento) estiver "
            "preenchido); OC (nos demais casos)"
        ),
    )

    eso11_desligamento = fields.Many2one(
        comodel_name="eso.11.desligamento",
        string="Informação do desligamento",
        help=(
            "Informação do desligamento do "
            "trabalhador\nDESCRICAO_COMPLETA:Informação do desligamento do "
            "trabalhador.\nGrupo preenchido exclusivamente caso seja "
            "necessário enviar cadastramento inicial referente a trabalhador "
            "que já tenha sido desligado da empresa antes do início dos "
            "eventos não periódicos para o empregador no eSocial (por exemplo,"
            " envio para pagamento de diferenças salariais - "
            "acordo/dissídio/convenção coletiva - em meses posteriores ao "
            "desligamento e sob vigência dos eventos periódicos para o "
            "empregador no eSocial) ou no caso de desligamento em data "
            "anterior à transferência do empregado.\nCONDICAO_GRUPO: N (se "
            "(grupo {afastamento}(2200_vinculo_afastamento) ou "
            "{cessao}(2200_vinculo_cessao) estiver preenchido) ou (se {tpAdmis"
            "sao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) = [6] "
            "ou {tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) ="
            " [10])); OC (nos demais casos)"
        ),
    )

    eso11_cessao = fields.Many2one(
        comodel_name="eso.11.cessao",
        string="Informação de cessão/exercício",
        help=(
            "Informação de cessão/exercício em outro órgão do "
            "trabalhador\nDESCRICAO_COMPLETA:Informação de cessão/exercício em"
            " outro órgão do trabalhador.\nPreenchimento exclusivo em caso de "
            "trabalhador que permaneça cedido/em exercício em outro órgão na "
            "data de início da obrigatoriedade dos eventos não periódicos para"
            " o empregador/ente público no eSocial ou na data de transferência"
            " ou alteração de CPF do empregado.\nCONDICAO_GRUPO: N (se grupo "
            "{desligamento}(2200_vinculo_desligamento) estiver preenchido); OC"
            " (nos demais casos)"
        ),
    )


class InfoRegimeTrab(models.AbstractModel):
    "Informações do regime trabalhista."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inforegimetrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab"

    eso11_infoCeletista = fields.Many2one(
        comodel_name="eso.11.infoceletista",
        string="Informações de trabalhador celetista",
        choice="inforegimetrab",
        xsd_choice_required=True,
        help=(
            "Informações de trabalhador celetista.\nCONDICAO_GRUPO: O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [1]); N (nos demais casos)"
        ),
    )

    eso11_infoEstatutario = fields.Many2one(
        comodel_name="eso.11.infoestatutario",
        string="Informações de trabalhador estatutário",
        choice="inforegimetrab",
        xsd_choice_required=True,
        help=(
            "Informações de trabalhador estatutário.\nCONDICAO_GRUPO: O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [2]); N (nos demais casos)"
        ),
    )


class InfoCeletista(models.AbstractModel):
    """Informações de trabalhador celetista.
    CONDICAO_GRUPO: O (se {tpRegTrab}(2200_vinculo_tpRegTrab) = [1]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoceletista"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab.InfoCeletista"

    eso11_dtAdm = fields.Date(
        string="a data de admissão do trabalhador",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de admissão do trabalhador.\nNo caso de transferência do "
            "empregado ou de mudança de CPF, preencher com a data inicial do "
            "vínculo no primeiro empregador (data de início do "
            "vínculo).\nValidação: Devem ser observadas as seguintes "
            "regras:\na) Deve ser posterior à data de nascimento do "
            "trabalhador;\nb) Se {cadIni}(2200_vinculo_cadIni) = [S], deve ser"
            " anterior à data de início da obrigatoriedade dos eventos não "
            "periódicos para o empregador no eSocial;\nc) Se "
            "{cadIni}(2200_vinculo_cadIni) = [N] e {tpAdmissao}(2200_vinculo_i"
            "nfoRegimeTrab_infoCeletista_tpAdmissao) = [1], deve ser igual ou "
            "posterior à data de início da obrigatoriedade dos eventos não "
            "periódicos para o empregador no eSocial."
        ),
    )

    eso11_tpAdmissao = fields.Selection(
        INFOCELETISTA_TPADMISSAO, string="tpAdmissao", xsd_required=True
    )

    eso11_indAdmissao = fields.Selection(
        INFOCELETISTA_INDADMISSAO, string="indAdmissao", xsd_required=True
    )

    eso11_nrProcTrab = fields.Char(
        string="Número que identifica",
        xsd_type="TS_nrProcJud",
        help=(
            "Número que identifica o processo trabalhista, quando a admissão "
            "se der por decisão judicial.\nValidação: Informação obrigatória e"
            " exclusiva se {indAdmissao}(./indAdmissao) = [3]. Se preenchido, "
            "deve ser um processo judicial válido, com 20 (vinte) algarismos."
        ),
    )

    eso11_tpRegJor = fields.Selection(
        TS_TPREGJOR, string="tpRegJor", xsd_required=True, xsd_type="TS_tpRegJor"
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="natAtividade",
        xsd_required=True,
        xsd_type="TS_natAtividade",
    )

    eso11_dtBase = fields.Char(string="dtBase", xsd_type="TS_dtBase")

    eso11_cnpjSindCategProf = fields.Char(
        string="cnpjSindCategProf", xsd_required=True, xsd_type="TS_cnpjSindCategProf"
    )

    eso11_FGTS = fields.Many2one(
        comodel_name="eso.11.fgts",
        string="Informações do FGTS",
        help=(
            "Informações do FGTS\nDESCRICAO_COMPLETA:Informações do Fundo de "
            "Garantia do Tempo de Serviço - FGTS.\nCONDICAO_GRUPO: N (se "
            "{tpAdmissao}(../tpAdmissao) = [6] OU (se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) for diferente de "
            "[104] e {dtAdm}(../dtAdm) &gt;= [1988-10-05]) OU (se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) = [104] e "
            "{dtAdm}(../dtAdm) &gt;= [2015-10-01])); O (nos demais casos)"
        ),
    )

    eso11_trabTemporario = fields.Many2one(
        comodel_name="eso.11.trabtemporario",
        string="Dados sobre trabalho temporário",
        help=(
            "Dados sobre trabalho temporário\nDESCRICAO_COMPLETA:Dados sobre "
            "trabalho temporário. Preenchimento obrigatório no caso de "
            "contratação de trabalhador temporário.\nCONDICAO_GRUPO: N (se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) for diferente de "
            "[106]); O (se {codCateg}(2200_vinculo_infoContrato_codCateg) = "
            "[106] e se grupo {desligamento}(2200_vinculo_desligamento) não "
            "estiver preenchido); F (nos demais casos)"
        ),
    )

    eso11_aprend = fields.Many2one(
        comodel_name="eso.11.taprend",
        string="Informações relacionadas ao aprendiz",
        xsd_type="T_aprend",
        help=(
            "Informações relacionadas ao "
            "aprendiz\nDESCRICAO_COMPLETA:Informações para identificação do "
            "empregador contratante de aprendiz.\nPreenchimento obrigatório no"
            " caso de contratação de aprendiz por entidade educativa sem fins "
            "lucrativos que tenha por objetivo a assistência ao adolescente e "
            "à educação profissional (art. 430, inciso II, CLT) ou por "
            "entidade de prática desportiva filiada ao Sistema Nacional do "
            "Desporto ou a Sistema de Desporto de Estado, do Distrito Federal "
            "ou de Município (art. 430, inciso III, CLT).\nCONDICAO_GRUPO: N "
            "(se {codCateg}(2200_vinculo_infoContrato_codCateg) for diferente "
            "de [103]); OC (se {codCateg}(2200_vinculo_infoContrato_codCateg) "
            "= [103] e se grupo {desligamento}(2200_vinculo_desligamento) não "
            "estiver preenchido); F (nos demais casos)"
        ),
    )


class Fgts(models.AbstractModel):
    """Informações do FGTS
    DESCRICAO_COMPLETA:Informações do Fundo de Garantia do Tempo de Serviço - FGTS.
    CONDICAO_GRUPO: N (se {tpAdmissao}(../tpAdmissao) = [6] OU (se
    {codCateg}(2200_vinculo_infoContrato_codCateg) for diferente de [104] e
    {dtAdm}(../dtAdm) >= [1988-10-05]) OU (se
    {codCateg}(2200_vinculo_infoContrato_codCateg) = [104] e {dtAdm}(../dtAdm)
    >= [2015-10-01])); O (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.fgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab.InfoCeletista.Fgts"

    eso11_dtOpcFGTS = fields.Date(
        string="dtOpcFGTS", xsd_required=True, xsd_type="TS_dtOpcFGTS"
    )


class TrabTemporario(models.AbstractModel):
    """Dados sobre trabalho temporário
    DESCRICAO_COMPLETA:Dados sobre trabalho temporário. Preenchimento obrigatório
    no caso de contratação de trabalhador temporário.
    CONDICAO_GRUPO: N (se {codCateg}(2200_vinculo_infoContrato_codCateg) for
    diferente de [106]); O (se {codCateg}(2200_vinculo_infoContrato_codCateg) =
    [106] e se grupo {desligamento}(2200_vinculo_desligamento) não estiver
    preenchido); F (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabtemporario"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab.InfoCeletista.TrabTemporario"
    )

    eso11_hipLeg = fields.Selection(
        TRABTEMPORARIO_HIPLEG, string="hipLeg", xsd_required=True
    )

    eso11_justContr = fields.Char(
        string="Descrição do fato determinado",
        xsd_required=True,
        xsd_type="TS_texto_999",
        help=(
            "Descrição do fato determinado que, no caso concreto, justifica a "
            "hipótese legal para a contratação de trabalho temporário. O prazo"
            " de contratação do trabalho temporário deve ser compatível com o "
            "motivo justificador alegado."
        ),
    )

    eso11_ideEstabVinc = fields.Many2one(
        comodel_name="eso.11.ideestabvinc",
        string="Identificação do estabelecimento",
        xsd_required=True,
        help=(
            "Identificação do estabelecimento do tomador ao qual o trabalhador"
            " temporário está vinculado"
        ),
    )

    eso11_ideTrabSubstituido = fields.One2many(
        "eso.11.idetrabsubstituido",
        "eso11_ideTrabSubstituido_trabTemporario_id",
        string="ideTrabSubstituido",
        help=(
            "Identificação do(s) trabalhador(es) substituído(s).\nCHAVE_GRUPO:"
            " {cpfTrabSubst}\nCONDICAO_GRUPO: O (se {hipLeg}(2200_vinculo_info"
            "RegimeTrab_infoCeletista_trabTemporario_hipLeg) = [1]); N (nos "
            "demais casos)"
        ),
    )


class IdeEstabVinc(models.AbstractModel):
    """Identificação do estabelecimento do tomador ao qual o trabalhador
    temporário está vinculado"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestabvinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab.InfoCeletista.TrabTemporario.IdeEstabVinc"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contratante",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do contratante de serviços, de acordo com o "
            "tipo de inscrição informado em "
            "{ideEstabVinc/tpInsc}(./tpInsc).\nValidação: Se "
            "{ideEstabVinc/tpInsc}(./tpInsc) for igual a [1], deve ser um CNPJ"
            " válido, com 14 (catorze) algarismos. Se "
            "{ideEstabVinc/tpInsc}(./tpInsc) for igual a [2], deve ser um CPF "
            "válido."
        ),
    )


class IdeTrabSubstituido(models.AbstractModel):
    """Identificação do(s) trabalhador(es) substituído(s).
    CHAVE_GRUPO: {cpfTrabSubst}
    CONDICAO_GRUPO: O (se
    {hipLeg}(2200_vinculo_infoRegimeTrab_infoCeletista_trabTemporario_hipLeg) =
    [1]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabsubstituido"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab.InfoCeletista.TrabTemporario.IdeTrabSubstituido"

    eso11_cpfTrabSubst = fields.Char(
        string="CPF do trabalhador substituído",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=("CPF do trabalhador substituído.\nValidação: Deve ser um CPF " "válido."),
    )


class InfoEstatutario(models.AbstractModel):
    """Informações de trabalhador estatutário.
    CONDICAO_GRUPO: O (se {tpRegTrab}(2200_vinculo_tpRegTrab) = [2]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoestatutario"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoRegimeTrab.InfoEstatutario"

    eso11_tpProv = fields.Selection(
        INFOESTATUTARIO_TPPROV, string="tpProv", xsd_required=True
    )

    eso11_dtExercicio = fields.Date(
        string="Data da entrada em exercício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data da entrada em exercício pelo servidor.\nValidação: Devem ser"
            " observadas as seguintes regras:\na) Deve ser posterior à data de"
            " nascimento do trabalhador;\nb) Se {cadIni}(2200_vinculo_cadIni) "
            "= [S], deve ser anterior à data de início da obrigatoriedade dos "
            "eventos não periódicos para o empregador/ente público no "
            "eSocial;\nc) Se {cadIni}(2200_vinculo_cadIni) = [N] e "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) for "
            "diferente de [5, 8, 10], deve ser igual ou posterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o "
            "empregador/ente público no eSocial."
        ),
    )

    eso11_tpPlanRP = fields.Selection(
        TS_TPPLANRP,
        string="Tipo de plano de segregação da massa",
        xsd_type="TS_tpPlanRP",
        help=(
            "Tipo de plano de segregação da massa.\nValidação: Preenchimento "
            "obrigatório e exclusivo se {tpRegPrev}(2200_vinculo_tpRegPrev) = "
            "[2]."
        ),
    )

    eso11_indTetoRGPS = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o servidor está sujeito",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o servidor está sujeito ao teto do RGPS pela "
            "instituição do regime de previdência complementar.\nValidação: "
            "Preenchimento obrigatório e exclusivo se "
            "{tpRegPrev}(2200_vinculo_tpRegPrev) = [2]."
        ),
    )

    eso11_indAbonoPerm = fields.Selection(
        TS_SIM_NAO,
        string="Indicar",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se o servidor recebe abono permanência.\nValidação: "
            "Preenchimento obrigatório e exclusivo se "
            "{tpRegPrev}(2200_vinculo_tpRegPrev) = [2]."
        ),
    )

    eso11_dtIniAbono = fields.Date(
        string="data de inicio do abono permanência",
        xsd_type="xs:date",
        help=(
            "data de inicio do abono permanência.\nValidação: Preenchimento "
            "obrigatório se {indAbonoPerm}(./indAbonoPerm) = [S] e "
            "{cadIni}(2200_vinculo_cadIni) = [N]. Não informar se "
            "{indAbonoPerm}(./indAbonoPerm) = [N]. Se preenchida, devem ser "
            "observadas as seguintes regras:\na) Deve ser igual ou posterior à"
            " data de exercício do servidor;\nb) Se "
            "{cadIni}(2200_vinculo_cadIni) = [S], deve ser anterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o ente "
            "público;\nc) Se {cadIni}(2200_vinculo_cadIni) = [N], deve ser "
            "igual ou anterior à data da transferência ou alteração do CPF do "
            "servidor "
            "({sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf) ou "
            "{dtAltCPF}(2200_vinculo_mudancaCPF_dtAltCPF)). Não informar se "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) for "
            "diferente de [5, 8, 10]."
        ),
    )


class InfoContrato(models.AbstractModel):
    "Informações do contrato de trabalho."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocontrato"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoContrato"

    eso11_nmCargo = fields.Char(
        string="nome do cargo",
        xsd_type="TS_texto_100",
        help=(
            "nome do cargo.\nValidação: O preenchimento é obrigatório, exceto "
            "se for relativo a servidor nomeado em cargo em comissão "
            "({tpRegTrab}(2200_vinculo_tpRegTrab) = [2] e "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = "
            "[2])."
        ),
    )

    eso11_CBOCargo = fields.Char(string="CBOCargo", xsd_type="TS_CBOCargo")

    eso11_dtIngrCargo = fields.Date(
        string="Data de ingresso do servidor no cargo",
        xsd_type="xs:date",
        help=(
            "Data de ingresso do servidor no cargo.\nValidação: Não preencher "
            "se {tpRegTrab}(2200_vinculo_tpRegTrab) = [1] ou se "
            "{CBOCargo}(./CBOCargo) não for informado. Se preenchida, devem "
            "ser observadas as seguintes regras:\na) Deve ser igual ou "
            "posterior à data de exercício do servidor;\nb) Se "
            "{cadIni}(2200_vinculo_cadIni) = [S], deve ser anterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o ente "
            "público;\nc) Se {cadIni}(2200_vinculo_cadIni) = [N], deve ser "
            "igual ou anterior à data da transferência ou alteração do CPF do "
            "servidor "
            "({sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf) ou "
            "{dtAltCPF}(2200_vinculo_mudancaCPF_dtAltCPF)). Não informar se "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) for "
            "diferente de [5, 8, 10]."
        ),
    )

    eso11_nmFuncao = fields.Char(
        string="nome da função de confiança/cargo",
        xsd_type="TS_texto_100",
        help=(
            "nome da função de confiança/cargo em comissão.\nValidação: "
            "Preenchimento obrigatório se for relativo a servidor nomeado em "
            "cargo em comissão ({tpRegTrab}(2200_vinculo_tpRegTrab) = [2] e "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = "
            "[2])."
        ),
    )

    eso11_CBOFuncao = fields.Char(string="CBOFuncao", xsd_type="TS_CBOFuncao")

    eso11_acumCargo = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o cargo",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o cargo, emprego ou função pública é "
            "acumulável.\nValidação: Preenchimento obrigatório se "
            "{cadIni}(2200_vinculo_cadIni) = [N] e se a natureza jurídica do "
            "declarante for igual a 1XX-X, 201-1 ou 203-8."
        ),
    )

    eso11_codCateg = fields.Char(
        string="codCateg", xsd_required=True, xsd_type="TS_codCateg"
    )

    eso11_remuneracao = fields.Many2one(
        comodel_name="eso.11.tremuneracao",
        string="Informações da remuneração",
        xsd_type="T_remuneracao",
        help=(
            "Informações da remuneração e periodicidade de "
            "pagamento.\nCONDICAO_GRUPO: N (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [2]); O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [1] e se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_duracao = fields.Many2one(
        comodel_name="eso.11.duracao",
        string="Duração do contrato de trabalho",
        help=(
            "Duração do contrato de trabalho.\nCONDICAO_GRUPO: N (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [2]); O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [1] e se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_localTrabalho = fields.Many2one(
        comodel_name="eso.11.localtrabalho",
        string="Informações do local de trabalho",
        help=(
            "Informações do local de trabalho.\nCONDICAO_GRUPO: O (se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_horContratual = fields.Many2one(
        comodel_name="eso.11.thorcontratual",
        string="Informações do horário contratual",
        xsd_type="T_horContratual",
        help=(
            "Informações do horário contratual do "
            "trabalhador.\nCONDICAO_GRUPO: O (se "
            "{tpRegJor}(2200_vinculo_infoRegimeTrab_infoCeletista_tpRegJor) = "
            "[1] e se grupo {desligamento}(2200_vinculo_desligamento) não "
            "estiver preenchido); OC (se "
            "{tpRegJor}(2200_vinculo_infoRegimeTrab_infoCeletista_tpRegJor) "
            "for diferente de [1] e se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_alvaraJudicial = fields.Many2one(
        comodel_name="eso.11.talvarajudicial",
        string="Dados do alvará judicial",
        xsd_type="T_alvaraJudicial",
        help=(
            "Dados do alvará judicial\nDESCRICAO_COMPLETA:Informações do "
            "alvará judicial em caso de contratação de menores de 14 anos, em "
            "qualquer categoria, e de maiores de 14 e menores de 16, em "
            "categoria diferente de 'Aprendiz'.\nCONDICAO_GRUPO: OC (se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_observacoes = fields.One2many(
        "eso.11.observacoes",
        "eso11_observacoes_infoContrato_id",
        string="Observações do contrato de trabalho",
        help=(
            "Observações do contrato de trabalho.\nCONDICAO_GRUPO: OC (se "
            "grupo {desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )

    eso11_treiCap = fields.One2many(
        "eso.11.ttreicap",
        "eso11_treiCap_infoContrato_id",
        string="Treinamentos, capacitações",
        xsd_type="T_treiCap",
        help=(
            "Treinamentos, capacitações, exercícios simulados e outras "
            "anotações\nDESCRICAO_COMPLETA:Treinamentos, capacitações, "
            "exercícios simulados, autorizações ou outras anotações que devam "
            "ser anotadas no registro de empregados e/ou na CTPS, por "
            "determinação de Norma Regulamentadora - NR.\nCHAVE_GRUPO: "
            "{codTreiCap}\nCONDICAO_GRUPO: OC (se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )


class Duracao(models.AbstractModel):
    """Duração do contrato de trabalho.
    CONDICAO_GRUPO: N (se {tpRegTrab}(2200_vinculo_tpRegTrab) = [2]); O (se
    {tpRegTrab}(2200_vinculo_tpRegTrab) = [1] e se grupo
    {desligamento}(2200_vinculo_desligamento) não estiver preenchido); F (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.duracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoContrato.Duracao"

    eso11_tpContr = fields.Selection(
        TS_TPCONTR, string="tpContr", xsd_required=True, xsd_type="TS_tpContr"
    )

    eso11_dtTerm = fields.Date(string="dtTerm", xsd_type="TS_dtTerm")

    eso11_clauAssec = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se o contrato",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se o contrato por prazo determinado contém cláusula "
            "assecuratória do direito recíproco de rescisão antes da data de "
            "seu término.\nValidação: O preenchimento é obrigatório se "
            "{tpContr}(./tpContr) = [2, 3]. Não preencher se "
            "{tpContr}(./tpContr) = [1]."
        ),
    )

    eso11_objDet = fields.Char(string="objDet", xsd_type="TS_objDet")


class LocalTrabalho(models.AbstractModel):
    """Informações do local de trabalho.
    CONDICAO_GRUPO: O (se grupo {desligamento}(2200_vinculo_desligamento) não
    estiver preenchido); F (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.localtrabalho"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoContrato.LocalTrabalho"

    eso11_localTrabGeral = fields.Many2one(
        comodel_name="eso.11.tlocaltrabgeral",
        string="Estabelecimento onde",
        xsd_type="T_localTrabGeral",
        help=(
            "Estabelecimento onde o trabalhador exercerá suas "
            "atividades\nDESCRICAO_COMPLETA:Estabelecimento (CNPJ, CNO, CAEPF)"
            " onde o trabalhador (exceto doméstico) exercerá suas atividades. "
            "Caso o trabalhador exerça suas atividades em instalações de "
            "terceiros, este campo deve ser preenchido com o estabelecimento "
            "do próprio empregador ao qual o trabalhador esteja "
            "vinculado.\nCONDICAO_GRUPO: N (se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) = [104]); O (se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) for diferente de "
            "[104] e se grupo {desligamento}(2200_vinculo_desligamento) não "
            "estiver preenchido); F (nos demais casos)"
        ),
    )

    eso11_localTempDom = fields.Many2one(
        comodel_name="eso.11.tenderecobrasil",
        string="Endereço de trabalho",
        xsd_type="T_endereco_brasil",
        help=(
            "Endereço de trabalho do trabalhador doméstico e trabalhador "
            "temporário\nDESCRICAO_COMPLETA:Grupo preenchido exclusivamente em"
            " caso de trabalhador doméstico e trabalhador temporário, "
            "indicando o endereço onde o trabalhador exerce suas "
            "atividades.\nCONDICAO_GRUPO: N (se "
            "{codCateg}(2200_vinculo_infoContrato_codCateg) for diferente de "
            "[104, 106]); O (se {codCateg}(2200_vinculo_infoContrato_codCateg)"
            " = [104, 106] e se grupo "
            "{desligamento}(2200_vinculo_desligamento) não estiver "
            "preenchido); F (nos demais casos)"
        ),
    )


class Observacoes(models.AbstractModel):
    """Observações do contrato de trabalho.
    CONDICAO_GRUPO: OC (se grupo {desligamento}(2200_vinculo_desligamento) não
    estiver preenchido); F (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.observacoes"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.InfoContrato.Observacoes"

    eso11_observacao = fields.Char(
        string="Observação relacionada ao contrato",
        xsd_required=True,
        xsd_type="TS_observacao",
        help="Observação relacionada ao contrato de trabalho.",
    )


class SucessaoVinc(models.AbstractModel):
    """Grupo de informações da sucessão de vínculo trabalhista/estatutário.
    CONDICAO_GRUPO: O (se
    {tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) = [2, 3,
    4, 7] ou {tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = [5,
    8]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.sucessaovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.SucessaoVinc"

    eso11_tpInsc = fields.Selection(
        SUCESSAOVINC_TPINSC, string="tpInsc", xsd_required=True
    )

    eso11_nrInsc = fields.Char(string="nrInsc", xsd_required=True)

    eso11_matricAnt = fields.Char(
        string="Matrícula do trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula do trabalhador no empregador anterior.\nValidação: O "
            "preenchimento é obrigatório se {cadIni}(2200_vinculo_cadIni) = "
            "[N]."
        ),
    )

    eso11_dtTransf = fields.Date(
        string="a data da transferência",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data da transferência do empregado para o empregador "
            "declarante.\nValidação: Devem ser observadas as seguintes "
            "regras:\na) Deve ser posterior à data de admissão do "
            "trabalhador;\nb) Se {cadIni}(2200_vinculo_cadIni) = [S], deve ser"
            " anterior à data de início da obrigatoriedade dos eventos não "
            "periódicos para o empregador;\nc) Se "
            "{cadIni}(2200_vinculo_cadIni) = [N], deve ser igual ou posterior "
            "à data de início da obrigatoriedade dos eventos não periódicos "
            "para o empregador."
        ),
    )

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")


class TransfDom(models.AbstractModel):
    """Informações do empregado doméstico transferido de outro representante da
    mesma unidade familiar.
    CONDICAO_GRUPO: O (se
    {tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) for
    igual [5]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.transfdom"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.TransfDom"

    eso11_cpfSubstituido = fields.Char(
        string="o número do CPF",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "o número do CPF do representante anterior da unidade "
            "familiar.\nValidação: Deve ser um CPF válido e diferente do CPF "
            "do declarante e do empregado."
        ),
    )

    eso11_matricAnt = fields.Char(
        string="Matrícula do trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula do trabalhador no representante anterior da unidade " "familiar."
        ),
    )

    eso11_dtTransf = fields.Date(
        string="Data da transferência do vínculo",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data da transferência do vínculo ao novo representante da unidade"
            " familiar."
        ),
    )


class MudancaCpf(models.AbstractModel):
    """Informações de mudança de CPF do trabalhador.
    CONDICAO_GRUPO: O (se
    {tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) = [6] ou
    {tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = [10]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.mudancacpf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.MudancaCpf"

    eso11_cpfAnt = fields.Char(
        string="o número do CPF antigo do trabalhador",
        xsd_required=True,
        xsd_type="TS_cpf",
    )

    eso11_matricAnt = fields.Char(
        string="a matrícula anterior do trabalhador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
    )

    eso11_dtAltCPF = fields.Date(
        string="Data de alteração do CPF", xsd_required=True, xsd_type="xs:date"
    )

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")


class Afastamento(models.AbstractModel):
    """Informações de afastamento do trabalhador
    DESCRICAO_COMPLETA:Informações de afastamento do trabalhador.
    Preenchimento exclusivo em caso de trabalhador que permaneça afastado na data
    de início da obrigatoriedade dos eventos não periódicos para o empregador
    no eSocial ou na data de transferência ou alteração de CPF do empregado.
    CONDICAO_GRUPO: N (se grupo {desligamento}(2200_vinculo_desligamento) estiver
    preenchido); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.afastamento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.Afastamento"

    eso11_dtIniAfast = fields.Date(
        string="Data de início do afastamento",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início do afastamento.\nValidação: Devem ser observadas "
            "as seguintes regras:\na) Deve ser igual ou posterior à data de "
            "admissão/exercício do trabalhador;\nb) Se "
            "{cadIni}(2200_vinculo_cadIni) = [S], deve ser anterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o "
            "empregador;\nc) Se {cadIni}(2200_vinculo_cadIni) = [N], deve ser "
            "anterior à data da transferência ou alteração do CPF do empregado"
            " ({sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf), "
            "{transfDom/dtTransf}(2200_vinculo_transfDom_dtTransf) ou "
            "{dtAltCPF}(2200_vinculo_mudancaCPF_dtAltCPF)). Não informar se {t"
            "pAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) "
            "= [1] ou se "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) for "
            "diferente de [5, 8, 10]."
        ),
    )

    eso11_codMotAfast = fields.Char(
        string="codMotAfast", xsd_required=True, xsd_type="TS_codMotAfast"
    )


class Desligamento(models.AbstractModel):
    """Informação do desligamento do trabalhador
    DESCRICAO_COMPLETA:Informação do desligamento do trabalhador.
    Grupo preenchido exclusivamente caso seja necessário enviar cadastramento
    inicial referente a trabalhador que já tenha sido desligado da empresa
    antes do início dos eventos não periódicos para o empregador no eSocial
    (por exemplo, envio para pagamento de diferenças salariais -
    acordo/dissídio/convenção coletiva - em meses posteriores ao desligamento e
    sob vigência dos eventos periódicos para o empregador no eSocial) ou no
    caso de desligamento em data anterior à transferência do empregado.
    CONDICAO_GRUPO: N (se (grupo {afastamento}(2200_vinculo_afastamento) ou
    {cessao}(2200_vinculo_cessao) estiver preenchido) ou (se
    {tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletista_tpAdmissao) = [6] ou
    {tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = [10])); OC
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.desligamento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.Desligamento"

    eso11_dtDeslig = fields.Date(
        string="a data de desligamento do vínculo",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de desligamento do vínculo (último dia "
            "trabalhado).\nValidação: Devem ser observadas as seguintes "
            "regras:\na) Deve ser igual ou posterior à data de "
            "admissão/exercício do trabalhador;\nb) Se "
            "{cadIni}(2200_vinculo_cadIni) = [S], deve ser anterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o "
            "empregador;\nc) Se {cadIni}(2200_vinculo_cadIni) = [N], deve ser "
            "anterior à data da transferência do empregado "
            "({sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf) ou "
            "{transfDom/dtTransf}(2200_vinculo_transfDom_dtTransf)). Não "
            "informar se {tpAdmissao}(2200_vinculo_infoRegimeTrab_infoCeletist"
            "a_tpAdmissao) = [1] ou se "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) for "
            "diferente de [5, 8]."
        ),
    )


class Cessao(models.AbstractModel):
    """Informação de cessão/exercício em outro órgão do trabalhador
    DESCRICAO_COMPLETA:Informação de cessão/exercício em outro órgão do
    trabalhador.
    Preenchimento exclusivo em caso de trabalhador que permaneça cedido/em
    exercício em outro órgão na data de início da obrigatoriedade dos eventos
    não periódicos para o empregador/ente público no eSocial ou na data de
    transferência ou alteração de CPF do empregado.
    CONDICAO_GRUPO: N (se grupo {desligamento}(2200_vinculo_desligamento) estiver
    preenchido); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.cessao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAdmissao.Vinculo.Cessao"

    eso11_dtIniCessao = fields.Date(
        string="Data de início da cessão/exercício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início da cessão/exercício em outro órgão.\nValidação: "
            "Devem ser observadas as seguintes regras:\na) Deve ser igual ou "
            "posterior à data de admissão/exercício do trabalhador;\nb) Se "
            "{cadIni}(2200_vinculo_cadIni) = [S], deve ser anterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o ente "
            "público e a natureza jurídica do declarante deve ser "
            "Administração Pública (grupo [1]);\nc) Se "
            "{cadIni}(2200_vinculo_cadIni) = [N], deve ser anterior à data da "
            "transferência ou alteração do CPF do empregado "
            "({sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf) ou "
            "{dtAltCPF}(2200_vinculo_mudancaCPF_dtAltCPF)) e igual ou "
            "posterior a [2021-07-19]. Não informar se {tpAdmissao}(2200_vincu"
            "lo_infoRegimeTrab_infoCeletista_tpAdmissao) = [1] ou se "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) for "
            "diferente de [5, 8, 10]."
        ),
    )
