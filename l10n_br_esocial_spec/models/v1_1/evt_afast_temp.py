# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSSIMNAO,
    TIdeEmpregador,
    TIdeEventoTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtAfastTemp/v_S_01_01_00"

"Ônus da cessão/requisição."
INFOCESSAO_INFONUS = [
    ("1", "Ônus do cedente"),
    ("2", "Ônus do cessionário"),
    ("3", "Ônus do cedente e cessionário"),
]

"Ônus da remuneração."
INFOMANDSIND_INFONUSREMUN = [
    ("1", "Apenas do empregador"),
    ("2", "Apenas do sindicato"),
    (
        "3",
        "Parte do empregador, sendo a diferença e/ou complementação salarial paga pelo sindicato",
    ),
]

"Origem da retificação."
INFORETIF_ORIGRETIF = [
    ("1", "Por iniciativa do empregador"),
    ("2", "Revisão administrativa"),
    ("3", "Determinação judicial"),
]

"""Preencher com o código correspondente ao tipo de processo.
    Validação: O preenchimento é obrigatório se {origRetif}(./origRetif) = [2,
    3]."""
INFORETIF_TPPROC = [
    ("1", "Administrativo"),
    ("2", "Judicial"),
    ("3", "Número de Benefício - NB do INSS"),
]

"""Tipo de acidente de trânsito.
    Validação: Somente pode ser preenchido se {codMotAfast}(./codMotAfast) = [01,
    03]."""
INIAFASTAMENTO_TPACIDTRANSITO = [
    ("1", "Atropelamento"),
    ("2", "Colisão"),
    ("3", "Outros"),
]


class ESocial(models.AbstractModel):
    "S-2230 - Afastamento Temporário"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtAfastTemp = fields.Many2one(
        comodel_name="eso.11.evtafasttemp",
        string="Evento Afastamento Temporário",
        xsd_required=True,
        help=(
            "Evento Afastamento Temporário.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_AF"
            "ASTAMENTO\nREGRA:REGRA_EMPREGADO_DOMESTICO\nREGRA:REGRA_ENVIO_PRO"
            "C_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO_EXT_"
            "SEM_IMPACTO_FOPAG\nREGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO\nREGRA:"
            "REGRA_EXCLUI_EVENTO_AFASTAMENTO\nREGRA:REGRA_EXISTE_INFO_EMPREGAD"
            "OR\nREGRA:REGRA_EXTEMP_DOMESTICO\nREGRA:REGRA_EXTEMP_REINTEGRACAO"
            "\nREGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PR"
            "OCEMI\nREGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_TSV_ATIVO_"
            "NA_DTEVENTO\nREGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"
        ),
    )


class EvtAfastTemp(models.AbstractModel):
    """Evento Afastamento Temporário.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_AFASTAMENTO
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXCLUI_EVENTO_AFASTAMENTO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_DOMESTICO
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_TSV_ATIVO_NA_DTEVENTO
    REGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtafasttemp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideVinculo = fields.Many2one(
        comodel_name="eso.11.idevinculo",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do trabalhador e do "
            "vínculo.\nCHAVE_GRUPO: {cpfTrab*}, {matricula*}, {codCateg*}"
        ),
    )

    eso11_infoAfastamento = fields.Many2one(
        comodel_name="eso.11.infoafastamento",
        string="Informações do afastamento temporário",
        xsd_required=True,
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeVinculo(models.AbstractModel):
    """Informações de identificação do trabalhador e do vínculo.
    CHAVE_GRUPO: {cpfTrab*}, {matricula*}, {codCateg*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idevinculo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.IdeVinculo"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2200 ou S-2300 do respectivo contrato. Não preencher no caso de"
            " Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE sem "
            "informação de matrícula no evento S-2300."
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador.\nInformar somente no caso "
            "de TSVE sem informação de matrícula no evento S-2300.\nValidação:"
            " Informação obrigatória e exclusiva se não houver preenchimento "
            "de {matricula}(./matricula). Se informado, deve ser um código "
            "válido e existente na Tabela 01."
        ),
    )


class InfoAfastamento(models.AbstractModel):
    "Informações do afastamento temporário."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoafastamento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento"

    eso11_iniAfastamento = fields.Many2one(
        comodel_name="eso.11.iniafastamento",
        string="Informações de início do afastamento",
        help=(
            "Informações de início do afastamento.\nCHAVE_GRUPO: "
            "{dtIniAfast*}\nCONDICAO_GRUPO: O (se não for preenchido o grupo "
            "{fimAfastamento}(../fimAfastamento)); OC (nos demais casos)"
        ),
    )

    eso11_infoRetif = fields.Many2one(
        comodel_name="eso.11.inforetif",
        string="Informações de retificação",
        help=(
            "Informações de retificação do "
            "afastamento\nDESCRICAO_COMPLETA:Informações de retificação do "
            "afastamento temporário.\nPreenchimento obrigatório caso "
            "{codMotAfast}(../iniAfastamento_codMotAfast) seja retificado de "
            "[01] para [03] ou de [03] para [01].\nCONDICAO_GRUPO: OC ((se "
            "{indRetif}(2230_ideEvento_indRetif) = [2]) E (o grupo "
            "{iniAfastamento}(../iniAfastamento) estiver preenchido); N (nos "
            "demais casos)"
        ),
    )

    eso11_fimAfastamento = fields.Many2one(
        comodel_name="eso.11.fimafastamento",
        string="Informação do término do afastamento",
        help=(
            "Informação do término do afastamento.\nCHAVE_GRUPO: "
            "{dtTermAfast*}\nCONDICAO_GRUPO: O (se não for preenchido o grupo "
            "{iniAfastamento}(../iniAfastamento)); OC (nos demais "
            "casos)\nREGRA:REGRA_EXISTE_EVENTO_AFASTAMENTO"
        ),
    )


class IniAfastamento(models.AbstractModel):
    """Informações de início do afastamento.
    CHAVE_GRUPO: {dtIniAfast*}
    CONDICAO_GRUPO: O (se não for preenchido o grupo
    {fimAfastamento}(../fimAfastamento)); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.iniafastamento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.IniAfastamento"

    eso11_dtIniAfast = fields.Date(
        string="Data de início do afastamento",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início do afastamento.\nValidação: Deve-se obedecer às "
            "seguintes regras:\na) Não pode ser posterior à data atual, exceto"
            " se:\na1) {codMotAfast}(./codMotAfast) = [15] (férias), situação "
            "em que pode ser até 60 dias posterior à data atual;\na2) "
            "{codMotAfast}(./codMotAfast) = [18], situação em que pode ser até"
            " 120 dias posterior à data atual;\nb) É necessário que o "
            "trabalhador esteja, antes da data de início do afastamento, em "
            "atividade, ou seja, não pode existir evento de afastamento "
            "anterior a {dtIniAfast}(./dtIniAfast) sem que este tenha sido "
            "encerrado."
        ),
    )

    eso11_codMotAfast = fields.Char(
        string="codMotAfast", xsd_required=True, xsd_type="TS_codMotAfast"
    )

    eso11_infoMesmoMtv = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o afastamento decorre",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o afastamento decorre da mesma doença que gerou o "
            "afastamento anterior ({codMotAfast}(./codMotAfast) = [01, 03]), "
            "dentro de 60 dias."
        ),
    )

    eso11_tpAcidTransito = fields.Selection(
        INIAFASTAMENTO_TPACIDTRANSITO, string="tpAcidTransito"
    )

    eso11_observacao = fields.Char(
        string="Detalhar as informações sobre",
        xsd_type="TS_observacao",
        help=(
            "Detalhar as informações sobre o afastamento do trabalhador, de "
            "maneira a explicitar os motivos do mesmo.\nValidação: O "
            "preenchimento é obrigatório se {codMotAfast}(./codMotAfast) = "
            "[21]."
        ),
    )

    eso11_perAquis = fields.Many2one(
        comodel_name="eso.11.peraquis",
        string="Período aquisitivo de férias",
        help=(
            "Período aquisitivo de férias\nDESCRICAO_COMPLETA:Informações "
            "referentes ao período aquisitivo de férias.\nCONDICAO_GRUPO: O "
            "(se {codMotAfast}(../codMotAfast) = [15] E (o código de categoria"
            " no RET for igual a [1XX, 301, 302, 303, 304, 306, 307, 309, 310,"
            " 312, 410] com {tpRegTrab} em S-2200/S-2300 = [1] OU o código de "
            "categoria no RET for igual a [401] com {tpRegTrab}(2300_infoTSVIn"
            "icio_infoComplementares_infoDirigenteSindical_tpRegTrab) em "
            "S-2300 = [1] ou não informado) E {dtIniAfast}(../dtIniAfast) "
            "&gt;= [2021-07-19]); N (nos demais casos)"
        ),
    )

    eso11_infoCessao = fields.Many2one(
        comodel_name="eso.11.infocessao",
        string="Informações complementares",
        help=(
            "Informações complementares - Cessão/Requisição de "
            "trabalhador.\nCONDICAO_GRUPO: O (se {codMotAfast}(../codMotAfast)"
            " = [14]); N (nos demais casos)"
        ),
    )

    eso11_infoMandSind = fields.Many2one(
        comodel_name="eso.11.infomandsind",
        string="infoMandSind",
        help=(
            "Informações complementares - Afastamento para exercício de "
            "mandato sindical.\nCONDICAO_GRUPO: O (se "
            "{codMotAfast}(../codMotAfast) = [24]); N (nos demais casos)"
        ),
    )

    eso11_infoMandElet = fields.Many2one(
        comodel_name="eso.11.infomandelet",
        string="infoMandElet",
        help=(
            "Informações complementares - Afastamento para exercício de "
            "mandato eletivo.\nCONDICAO_GRUPO: O (se "
            "{codMotAfast}(../codMotAfast) = [22] e se a natureza jurídica do "
            "declarante for igual a 1XX-X, 201-1 ou 203-8); N (nos demais "
            "casos)"
        ),
    )


class PerAquis(models.AbstractModel):
    """Período aquisitivo de férias
    DESCRICAO_COMPLETA:Informações referentes ao período aquisitivo de férias.
    CONDICAO_GRUPO: O (se {codMotAfast}(../codMotAfast) = [15] E (o código de
    categoria no RET for igual a [1XX, 301, 302, 303, 304, 306, 307, 309, 310,
    312, 410] com {tpRegTrab} em S-2200/S-2300 = [1] OU o código de categoria
    no RET for igual a [401] com {tpRegTrab}(2300_infoTSVInicio_infoComplementa
    res_infoDirigenteSindical_tpRegTrab) em S-2300 = [1] ou não informado) E
    {dtIniAfast}(../dtIniAfast) >= [2021-07-19]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.peraquis"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.IniAfastamento.PerAquis"

    eso11_dtInicio = fields.Date(
        string="Data de início do período aquisitivo",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início do período aquisitivo de férias.\nValidação: Deve "
            "observar o que segue:\na) Se o código de categoria no Registro de"
            " Eventos Trabalhistas - RET for diferente de [304, 410], deve ser"
            " igual ou posterior a "
            "{dtAdm}(2200_vinculo_infoRegimeTrab_infoCeletista_dtAdm);\nb) Se "
            "o código de categoria no RET for igual a [304], deve ser igual ou"
            " posterior a {dtExercOrig}(2300_infoTSVInicio_infoComplementares_"
            "infoMandElet_dtExercOrig);\nc) Se o código de categoria no RET "
            "for igual a [410], deve ser igual ou posterior a {dtAdmCed}(2300_"
            "infoTSVInicio_infoComplementares_infoTrabCedido_dtAdmCed)."
        ),
    )

    eso11_dtFim = fields.Date(
        string="Data de término do período aquisitivo",
        xsd_type="xs:date",
        help=(
            "Data de término do período aquisitivo de férias.\nÉ necessário "
            "informar o campo somente se o período aquisitivo for diferente de"
            " 1 ano.\nValidação: Se informada, deve ser uma data posterior a "
            "{dtInicio}(./dtInicio)."
        ),
    )


class InfoCessao(models.AbstractModel):
    """Informações complementares - Cessão/Requisição de trabalhador.
    CONDICAO_GRUPO: O (se {codMotAfast}(../codMotAfast) = [14]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocessao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.IniAfastamento.InfoCessao"

    eso11_cnpjCess = fields.Char(
        string="o CNPJ do órgão/entidade",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ do órgão/entidade para o qual o trabalhador foi "
            "cedido/requisitado.\nValidação: Deve ser um CNPJ diferente do "
            "CNPJ do empregador e diferente dos estabelecimentos informados "
            "através do evento S-1005.\nREGRA:REGRA_VALIDA_CNPJ"
        ),
    )

    eso11_infOnus = fields.Selection(
        INFOCESSAO_INFONUS, string="infOnus", xsd_required=True
    )


class InfoMandSind(models.AbstractModel):
    """Informações complementares - Afastamento para exercício de mandato
    sindical.
    CONDICAO_GRUPO: O (se {codMotAfast}(../codMotAfast) = [24]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infomandsind"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.IniAfastamento.InfoMandSind"

    eso11_cnpjSind = fields.Char(
        string="CNPJ do sindicato",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do sindicato no qual o trabalhador exercerá o "
            "mandato.\nValidação: Deve ser um CNPJ diferente do CNPJ base do "
            "empregador e diferente dos informados na Tabela de "
            "Estabelecimentos (S-1005).\nREGRA:REGRA_VALIDA_CNPJ"
        ),
    )

    eso11_infOnusRemun = fields.Selection(
        INFOMANDSIND_INFONUSREMUN, string="infOnusRemun", xsd_required=True
    )


class InfoMandElet(models.AbstractModel):
    """Informações complementares - Afastamento para exercício de mandato
    eletivo.
    CONDICAO_GRUPO: O (se {codMotAfast}(../codMotAfast) = [22] e se a natureza
    jurídica do declarante for igual a 1XX-X, 201-1 ou 203-8); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infomandelet"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.IniAfastamento.InfoMandElet"

    eso11_cnpjMandElet = fields.Char(
        string="CNPJ do órgão",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do órgão no qual o trabalhador exercerá o mandato "
            "eletivo.\nREGRA:REGRA_VALIDA_CNPJ"
        ),
    )

    eso11_indRemunCargo = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se o servidor optou",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se o servidor optou pela remuneração do cargo "
            "efetivo.\nValidação: Informação obrigatória e exclusiva se o "
            "código de categoria no Registro de Eventos Trabalhistas - RET for"
            " igual a [301]."
        ),
    )


class InfoRetif(models.AbstractModel):
    """Informações de retificação do afastamento
    DESCRICAO_COMPLETA:Informações de retificação do afastamento temporário.
    Preenchimento obrigatório caso {codMotAfast}(../iniAfastamento_codMotAfast)
    seja retificado de [01] para [03] ou de [03] para [01].
    CONDICAO_GRUPO: OC ((se {indRetif}(2230_ideEvento_indRetif) = [2]) E (o grupo
    {iniAfastamento}(../iniAfastamento) estiver preenchido); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inforetif"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.InfoRetif"

    eso11_origRetif = fields.Selection(
        INFORETIF_ORIGRETIF, string="origRetif", xsd_required=True
    )

    eso11_tpProc = fields.Selection(INFORETIF_TPPROC, string="tpProc")

    eso11_nrProc = fields.Char(string="nrProc")


class FimAfastamento(models.AbstractModel):
    """Informação do término do afastamento.
    CHAVE_GRUPO: {dtTermAfast*}
    CONDICAO_GRUPO: O (se não for preenchido o grupo
    {iniAfastamento}(../iniAfastamento)); OC (nos demais casos)
    REGRA:REGRA_EXISTE_EVENTO_AFASTAMENTO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.fimafastamento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAfastTemp.InfoAfastamento.FimAfastamento"

    eso11_dtTermAfast = fields.Date(
        string="a data do término do afastamento",
        xsd_required=True,
        help=(
            "a data do término do afastamento do trabalhador.\nValidação: Deve"
            " ser igual ou posterior à data de início do afastamento do "
            "trabalhador e anterior a [9999-12-31]."
        ),
    )
