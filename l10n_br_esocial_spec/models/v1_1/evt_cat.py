# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSSIMNAO,
    TSTPINSC134,
    TSUF,
    TIdeEmpregador,
    TIdeEventoTrab,
    TIdeVinculoSst,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtCAT/v_S_01_01_00"

"Iniciativa da CAT."
CAT_INICIATCAT = [
    ("1", "Empregador"),
    ("2", "Ordem judicial"),
    ("3", "Determinação de órgão fiscalizador"),
]

"Tipo de acidente de trabalho."
CAT_TPACID = [
    ("1", "Típico"),
    ("2", "Doença"),
    ("3", "Trajeto"),
]

"Tipo de CAT."
CAT_TPCAT = [
    ("1", "Inicial"),
    ("2", "Reabertura"),
    ("3", "Comunicação de óbito"),
]

"Órgão de classe."
EMITENTE_IDEOC = [
    ("1", "Conselho Regional de Medicina - CRM"),
    ("2", "Conselho Regional de Odontologia - CRO"),
    ("3", "Registro do Ministério da Saúde - RMS"),
]

"Tipo de local do acidente."
LOCALACIDENTE_TPLOCAL = [
    ("1", "Estabelecimento do empregador no Brasil"),
    ("2", "Estabelecimento do empregador no exterior"),
    ("3", "Estabelecimento de terceiros onde o empregador presta serviços"),
    ("4", "Via pública"),
    ("5", "Área rural"),
    ("6", "Embarcação"),
    ("9", "Outros"),
]

"""Lateralidade da(s) parte(s) atingida(s).
    Nos casos de órgãos bilaterais, ou seja, que se situam dos lados do corpo,
    assinalar o lado (direito ou esquerdo). Ex.: Caso o órgão atingido seja
    perna, apontar qual foi a atingida (perna direita, perna esquerda ou
    ambas). Se o órgão atingido é único (como, por exemplo, a cabeça),
    assinalar este campo como não aplicável."""
PARTEATINGIDA_LATERALIDADE = [
    ("0", "Não aplicável"),
    ("1", "Esquerda"),
    ("2", "Direita"),
    ("3", "Ambas"),
]


class ESocial(models.AbstractModel):
    "S-2210 - Comunicação de Acidente de Trabalho"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtCAT = fields.Many2one(
        comodel_name="eso.11.evtcat",
        string="Evento Comunicação de Acidente",
        xsd_required=True,
        help=(
            "Evento Comunicação de Acidente de Trabalho.\nCHAVE_GRUPO: {Id}\nR"
            "EGRA:REGRA_EMPREGADO_DOMESTICO\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO"
            "\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_"
            "FOPAG\nREGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO\nREGRA:REGRA_EXCLUI"
            "_EVENTO_CAT\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_EXTE"
            "MP_REINTEGRACAO\nREGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA"
            ":REGRA_MESMO_PROCEMI\nREGRA:REGRA_RETIFICA_DT_ACIDENTE\nREGRA:REG"
            "RA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_TSV_ATIVO_NA_DTEVENTO\nREG"
            "RA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"
        ),
    )


class EvtCat(models.AbstractModel):
    """Evento Comunicação de Acidente de Trabalho.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXCLUI_EVENTO_CAT
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_DT_ACIDENTE
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_TSV_ATIVO_NA_DTEVENTO
    REGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcat"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideVinculo = fields.Many2one(
        comodel_name="eso.11.tidevinculosst",
        string="ideVinculo",
        xsd_required=True,
        xsd_type="T_ideVinculo_sst",
    )

    eso11_cat = fields.Many2one(
        comodel_name="eso.11.cat",
        string="CAT",
        xsd_required=True,
        help=(
            "CAT\nDESCRICAO_COMPLETA:Comunicação de Acidente de Trabalho - "
            "CAT.\nCHAVE_GRUPO: {dtAcid*}, {hrAcid*}, {tpCat*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class Cat(models.AbstractModel):
    """CAT
    DESCRICAO_COMPLETA:Comunicação de Acidente de Trabalho - CAT.
    CHAVE_GRUPO: {dtAcid*}, {hrAcid*}, {tpCat*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.cat"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat"

    eso11_dtAcid = fields.Date(
        string="Data do acidente",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data do acidente.\nValidação: Deve ser uma data válida, igual ou "
            "anterior à data atual e igual ou posterior à data de admissão do "
            "trabalhador e à data de início da obrigatoriedade deste evento "
            "para o empregador no eSocial.\nSe {tpCat}(./tpCat) = [2, 3], deve"
            " ser informado valor igual ao preenchido no evento de CAT "
            "anterior, quando informado em "
            "{nrRecCatOrig}(./catOrigem_nrRecCatOrig)."
        ),
    )

    eso11_tpAcid = fields.Selection(CAT_TPACID, string="tpAcid", xsd_required=True)

    eso11_hrAcid = fields.Char(
        string="Hora do acidente, no formato HHMM",
        xsd_type="TS_hora",
        help=(
            "Hora do acidente, no formato HHMM.\nValidação: Preenchimento "
            "obrigatório se {tpAcid}(./tpAcid) = [1] ou se ({tpAcid}(./tpAcid)"
            " = [3] e {dtAcid}(./dtAcid) &gt;= [2022-01-26]). Não informar se "
            "{tpAcid}(./tpAcid) = [2]. Se preenchida, deve estar no intervalo "
            "entre [0000] e [2359], criticando inclusive a segunda parte do "
            "número, que indica os minutos, que deve ser menor ou igual a "
            "59.\nSe {tpCat}(./tpCat) = [2, 3], deve ser informado valor igual"
            " ao preenchido no evento de CAT anterior, quando informado em "
            "{nrRecCatOrig}(./catOrigem_nrRecCatOrig)."
        ),
    )

    eso11_hrsTrabAntesAcid = fields.Char(string="hrsTrabAntesAcid")

    eso11_tpCat = fields.Selection(CAT_TPCAT, string="tpCat", xsd_required=True)

    eso11_indCatObito = fields.Selection(
        TS_SIM_NAO,
        string="Houve óbito?",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Houve óbito?\nValidação: Se o {tpCat}(./tpCat) for igual a [3], o"
            " campo deverá sempre ser preenchido com [S]. Se o "
            "{tpCat}(./tpCat) for igual a [2], o campo deverá sempre ser "
            "preenchido com [N]."
        ),
    )

    eso11_dtObito = fields.Date(
        string="Data do óbito",
        xsd_type="xs:date",
        help=(
            "Data do óbito.\nValidação: Deve ser uma data válida, igual ou "
            "posterior a {dtAcid}(./dtAcid) e igual ou anterior à data "
            "atual.\nPreenchimento obrigatório e exclusivo se "
            "{indCatObito}(./indCatObito) = [S]."
        ),
    )

    eso11_indComunPolicia = fields.Selection(
        TS_SIM_NAO,
        string="Houve comunicação à autoridade policial?",
        xsd_required=True,
        xsd_type="TS_sim_nao",
    )

    eso11_codSitGeradora = fields.Char(string="codSitGeradora", xsd_required=True)

    eso11_iniciatCAT = fields.Selection(
        CAT_INICIATCAT, string="iniciatCAT", xsd_required=True
    )

    eso11_obsCAT = fields.Char(string="Observação", xsd_type="TS_texto_999")

    eso11_ultDiaTrab = fields.Date(
        string="Último dia trabalhado",
        xsd_type="xs:date",
        help=(
            "Último dia trabalhado.\nValidação: Preenchimento obrigatório se "
            "{dtAcid}(./dtAcid) &gt;= [2023-01-16]). Se informada, deve ser "
            "uma data igual ou anterior à data atual e igual ou posterior à "
            "data de admissão do trabalhador.\nSe {tpCat}(./tpCat) = [2], deve"
            " ser informada data posterior à data preenchida no evento de CAT "
            "anterior, quando informada em "
            "{nrRecCatOrig}(./catOrigem_nrRecCatOrig)."
        ),
    )

    eso11_houveAfast = fields.Selection(
        TS_SIM_NAO,
        string="Houve afastamento?",
        xsd_type="TS_sim_nao",
        help=(
            "Houve afastamento?\nValidação: Preenchimento obrigatório se "
            "{dtAcid}(./dtAcid) &gt;= [2023-01-16])."
        ),
    )

    eso11_localAcidente = fields.Many2one(
        comodel_name="eso.11.localacidente",
        string="Local do acidente",
        xsd_required=True,
    )

    eso11_parteAtingida = fields.Many2one(
        comodel_name="eso.11.parteatingida",
        string="Parte do corpo atingida",
        xsd_required=True,
        help=(
            "Parte do corpo atingida.\nDESCRICAO_COMPLETA:Detalhamento da "
            "parte atingida pelo acidente de trabalho."
        ),
    )

    eso11_agenteCausador = fields.Many2one(
        comodel_name="eso.11.agentecausador",
        string="Agente causador",
        xsd_required=True,
        help=(
            "Agente causador.\nDESCRICAO_COMPLETA:Detalhamento do agente "
            "causador do acidente de trabalho."
        ),
    )

    eso11_atestado = fields.Many2one(
        comodel_name="eso.11.atestado", string="Atestado médico", xsd_required=True
    )

    eso11_catOrigem = fields.Many2one(
        comodel_name="eso.11.catorigem",
        string="CAT de origem",
        help=(
            "CAT de origem\nDESCRICAO_COMPLETA:Grupo que indica a CAT "
            "anterior, no caso de CAT de reabertura ou de comunicação de "
            "óbito.\nCHAVE_GRUPO: {nrRecCatOrig*}\nCONDICAO_GRUPO: O (se "
            "{tpCat}(../tpCat) for igual a [2, 3]); N (nos demais casos)"
        ),
    )


class LocalAcidente(models.AbstractModel):
    "Local do acidente."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.localacidente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.LocalAcidente"

    eso11_tpLocal = fields.Selection(
        LOCALACIDENTE_TPLOCAL, string="tpLocal", xsd_required=True
    )

    eso11_dscLocal = fields.Char(
        string="Especificação do local do acidente",
        xsd_type="TS_texto_255",
        help=(
            "Especificação do local do acidente (pátio, rampa de acesso, posto"
            " de trabalho, etc.)."
        ),
    )

    eso11_tpLograd = fields.Char(string="tpLograd", xsd_type="TS_tpLograd")

    eso11_dscLograd = fields.Char(
        string="dscLograd", xsd_required=True, xsd_type="TS_dscLograd"
    )

    eso11_nrLograd = fields.Char(
        string="nrLograd", xsd_required=True, xsd_type="TS_nrLograd"
    )

    eso11_complemento = fields.Char(string="complemento", xsd_type="TS_complemento")

    eso11_bairro = fields.Char(string="bairro", xsd_type="TS_bairro")

    eso11_cep = fields.Char(
        string="Código de Endereçamento Postal",
        xsd_type="TS_cep",
        help=(
            "Código de Endereçamento Postal - CEP.\nValidação: Preenchimento "
            "obrigatório se {tpLocal}(./tpLocal) = [1, 3, 5]. Não preencher se"
            " {tpLocal}(./tpLocal) = [2].\nSe preenchido, deve ser informado "
            "apenas com números, com 8 (oito) posições."
        ),
    )

    eso11_codMunic = fields.Char(
        string="o código do município",
        xsd_type="TS_codMunic",
        help=(
            "o código do município, conforme tabela do IBGE.\nValidação: "
            "Preenchimento obrigatório se {tpLocal}(./tpLocal) = [1, 3, 4, 5]."
            " Não preencher se {tpLocal}(./tpLocal) = [2].\nSe informado, deve"
            " ser um código válido e existente na tabela do IBGE."
        ),
    )

    eso11_uf = fields.Selection(
        TS_UF,
        string="a sigla da Unidade da Federação",
        xsd_type="TS_uf",
        help=(
            "a sigla da Unidade da Federação - UF.\nValidação: Preenchimento "
            "obrigatório se {tpLocal}(./tpLocal) = [1, 3, 4, 5]. Não preencher"
            " se {tpLocal}(./tpLocal) = [2]."
        ),
    )

    eso11_pais = fields.Char(string="pais")

    eso11_codPostal = fields.Char(
        string="codPostal",
        xsd_type="TS_codPostal",
        help=(
            "Código de Endereçamento Postal.\nValidação: Preenchimento "
            "obrigatório se {tpLocal}(./tpLocal) = [2]. Não preencher nos "
            "demais casos."
        ),
    )

    eso11_ideLocalAcid = fields.Many2one(
        comodel_name="eso.11.idelocalacid",
        string="Identificação do local onde ocorreu",
        help=(
            "Identificação do local onde ocorreu o acidente ou do "
            "estabelecimento ao qual o trabalhador avulso está "
            "vinculado.\nCONDICAO_GRUPO: O ((se "
            "{ideEmpregador/tpInsc}(2210_ideEmpregador_tpInsc) = [1] e "
            "{tpLocal}(../tpLocal) = [1, 3]) ou (se o código de categoria no "
            "RET for igual a [2XX] e {dtAcid}(../../dtAcid) &gt;= "
            "[2023-01-16])); OC (nos demais casos)"
        ),
    )


class IdeLocalAcid(models.AbstractModel):
    """Identificação do local onde ocorreu o acidente ou do estabelecimento ao
    qual o trabalhador avulso está vinculado.
    CONDICAO_GRUPO: O ((se {ideEmpregador/tpInsc}(2210_ideEmpregador_tpInsc) = [1]
    e {tpLocal}(../tpLocal) = [1, 3]) ou (se o código de categoria no RET for
    igual a [2XX] e {dtAcid}(../../dtAcid) >= [2023-01-16])); OC (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idelocalacid"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.LocalAcidente.IdeLocalAcid"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_3_4"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do estabelecimento",
        xsd_required=True,
        xsd_type="TS_nrInsc_12_14",
        help=(
            "número de inscrição do estabelecimento, de acordo com o tipo de "
            "inscrição indicado no campo {ideLocalAcid/tpInsc}(./tpInsc). Se o"
            " acidente ou a doença ocupacional ocorreu em local onde o "
            "trabalhador presta serviços, deve ser um número de inscrição "
            "pertencente à contratante dos serviços.\nNo caso de acidente de "
            "avulso com {tpLocal}(../tpLocal) diferente de [1, 3], informar o "
            "estabelecimento ao qual o trabalhador está vinculado.\nValidação:"
            " Deve ser compatível com o conteúdo do campo "
            "{ideLocalAcid/tpInsc}(./tpInsc). Deve ser um identificador "
            "válido, constante das bases da RFB, e:\na) Se "
            "{tpLocal}(../tpLocal) = [1] ou (se o código de categoria no RET "
            "for igual a [2XX] e {tpLocal}(../tpLocal) for diferente de [1, "
            "3]), deve ser válido e existente na Tabela de Estabelecimentos "
            "(S-1005);\nb) Se {tpLocal}(../tpLocal) = [3], deve ser diferente "
            "dos estabelecimentos informados na Tabela S-1005 e, se "
            "{ideLocalAcid/tpInsc}(./tpInsc) = [1], diferente do CNPJ base "
            "indicado em S-1000."
        ),
    )


class ParteAtingida(models.AbstractModel):
    """Parte do corpo atingida.
    DESCRICAO_COMPLETA:Detalhamento da parte atingida pelo acidente de trabalho."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.parteatingida"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.ParteAtingida"

    eso11_codParteAting = fields.Char(string="codParteAting", xsd_required=True)

    eso11_lateralidade = fields.Selection(
        PARTEATINGIDA_LATERALIDADE, string="lateralidade", xsd_required=True
    )


class AgenteCausador(models.AbstractModel):
    """Agente causador.
    DESCRICAO_COMPLETA:Detalhamento do agente causador do acidente de trabalho."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.agentecausador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.AgenteCausador"

    eso11_codAgntCausador = fields.Char(string="codAgntCausador", xsd_required=True)


class Atestado(models.AbstractModel):
    "Atestado médico."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.atestado"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.Atestado"

    eso11_dtAtendimento = fields.Date(
        string="Data do atendimento",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data do atendimento.\nValidação: Deve ser uma data igual ou "
            "posterior a {dtAcid}(../dtAcid) e igual ou anterior à data atual."
        ),
    )

    eso11_hrAtendimento = fields.Char(
        string="Hora do atendimento",
        xsd_required=True,
        xsd_type="TS_hora",
        help=(
            "Hora do atendimento, no formato HHMM.\nValidação: Deve estar no "
            "intervalo entre [0000] e [2359], criticando inclusive a segunda "
            "parte do número, que indica os minutos, que deve ser menor ou "
            "igual a 59."
        ),
    )

    eso11_indInternacao = fields.Selection(
        TS_SIM_NAO,
        string="Indicativo de internação",
        xsd_required=True,
        xsd_type="TS_sim_nao",
    )

    eso11_durTrat = fields.Char(string="durTrat", xsd_required=True)

    eso11_indAfast = fields.Selection(
        TS_SIM_NAO,
        string="Indicativo de afastamento",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo de afastamento do trabalho durante o "
            "tratamento.\nValidação: Se o campo {indCatObito}(../indCatObito) "
            "for igual a [S], o campo deve sempre ser preenchido com [N]."
        ),
    )

    eso11_dscLesao = fields.Char(string="dscLesao", xsd_required=True)

    eso11_dscCompLesao = fields.Char(string="dscCompLesao")

    eso11_diagProvavel = fields.Char(
        string="Diagnóstico provável", xsd_type="TS_texto_100"
    )

    eso11_codCID = fields.Char(string="codCID", xsd_required=True)

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")

    eso11_emitente = fields.Many2one(
        comodel_name="eso.11.emitente",
        string="Médico/Dentista que emitiu o atestado",
        xsd_required=True,
    )


class Emitente(models.AbstractModel):
    "Médico/Dentista que emitiu o atestado."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.emitente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.Atestado.Emitente"

    eso11_nmEmit = fields.Char(
        string="Nome do médico/dentista que emitiu",
        xsd_required=True,
        xsd_type="TS_nome",
        help="Nome do médico/dentista que emitiu o atestado.",
    )

    eso11_ideOC = fields.Selection(EMITENTE_IDEOC, string="ideOC", xsd_required=True)

    eso11_nrOC = fields.Char(string="nrOC", xsd_required=True)

    eso11_ufOC = fields.Selection(
        TS_UF,
        string="Sigla da UF do órgão de classe",
        xsd_type="TS_uf",
        help=(
            "Sigla da UF do órgão de classe.\nValidação: Preenchimento "
            "obrigatório se {ideOC}(./ideOC) = [1, 2]."
        ),
    )


class CatOrigem(models.AbstractModel):
    """CAT de origem
    DESCRICAO_COMPLETA:Grupo que indica a CAT anterior, no caso de CAT de
    reabertura ou de comunicação de óbito.
    CHAVE_GRUPO: {nrRecCatOrig*}
    CONDICAO_GRUPO: O (se {tpCat}(../tpCat) for igual a [2, 3]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.catorigem"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCat.Cat.CatOrigem"

    eso11_nrRecCatOrig = fields.Char(
        string="número do recibo",
        xsd_required=True,
        xsd_type="TS_nrRecibo",
        help=(
            "número do recibo da última CAT referente ao mesmo acidente/doença"
            " relacionada ao trabalho, nos casos:\na) de CAT de "
            "reabertura;\nb) de óbito, quando houver CAT anterior.\nValidação:"
            " Deve corresponder ao número do recibo do arquivo relativo à "
            "última CAT informada anteriormente, pertencente ao mesmo "
            "contrato, desde que {indCatObito}(../indCatObito) da última CAT "
            "informada seja igual a [N]. O sistema não efetuará a conferência "
            "da informação se {dtAcid}(../dtAcid) for anterior a "
            "{sucessaoVinc/dtTransf}(2200_vinculo_sucessaoVinc_dtTransf), "
            "{transfDom/dtTransf}(2200_vinculo_transfDom_dtTransf) ou "
            "{dtAltCPF}(2200_vinculo_mudancaCPF_dtAltCPF) do evento S-2200, ou"
            " se {dtAcid}(../dtAcid) for anterior a "
            "{dtAltCPF}(2300_infoTSVInicio_mudancaCPF) do evento "
            "S-2300.\nOBS.: Quando a data do acidente for anterior à data de "
            "obrigatoriedade do empregador ao envio deste evento, a CAT de "
            "reabertura e/ou de óbito não devem ser informadas ao eSocial, "
            "mantendo-se o procedimento realizado na emissão da CAT original."
        ),
    )
