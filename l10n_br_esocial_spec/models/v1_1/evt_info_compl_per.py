# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDSUBSTPATR,
    TSPERCTRANSF,
    TIdeEmpregador,
    TIdeEventoFolha,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtInfoComplPer/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-1280 - Informações Complementares aos Eventos Periódicos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtInfoComplPer = fields.Many2one(
        comodel_name="eso.11.evtinfocomplper",
        string="Evento Informações Complementares",
        xsd_required=True,
        help=(
            "Evento Informações Complementares\nDESCRICAO_COMPLETA:Evento "
            "Informações Complementares aos Eventos Periódicos.\nCHAVE_GRUPO: "
            "{Id}\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTE"
            "MP\nREGRA:REGRA_EVE_FOPAG_IND_RETIFICACAO\nREGRA:REGRA_EVE_FOPAG_"
            "INFO_COMPAT_CLASSTRIB\nREGRA:REGRA_EVE_FOPAG_PERMITE_EXCLUSAO\nRE"
            "GRA:REGRA_EVE_FOPAG_SIMPLIFICADO\nREGRA:REGRA_EXISTE_INFO_EMPREGA"
            "DOR\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_REMUN_ANUAL_DEZEMBRO\"
            "nREGRA:REGRA_VALIDA_EMPREGADOR"
        )
    )
    

class EvtInfoComplPer(models.AbstractModel):
    """Evento Informações Complementares
    DESCRICAO_COMPLETA:Evento Informações Complementares aos Eventos Periódicos.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVE_FOPAG_IND_RETIFICACAO
    REGRA:REGRA_EVE_FOPAG_INFO_COMPAT_CLASSTRIB
    REGRA:REGRA_EVE_FOPAG_PERMITE_EXCLUSAO
    REGRA:REGRA_EVE_FOPAG_SIMPLIFICADO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_REMUN_ANUAL_DEZEMBRO
    REGRA:REGRA_VALIDA_EMPREGADOR"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtinfocomplper"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoComplPer"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventofolha",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_folha"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador"
    )
    
    eso11_infoSubstPatr = fields.Many2one(
        comodel_name="eso.11.infosubstpatr",
        string="Inf",
        help=(
            "Inf. complementares - Empresas enquadradas nos arts. 7º a 9º da "
            "Lei 12.546/2011\nDESCRICAO_COMPLETA:Grupo preenchido "
            "exclusivamente por empresa enquadrada nos arts. 7º a 9º da Lei "
            "12.546/2011, conforme classificação tributária indicada no evento"
            " S-1000.\nCONDICAO_GRUPO: O (se {indDesFolha}(1000_infoEmpregador"
            "_inclusao_infoCadastro_indDesFolha) em S-1000 = [1]); N (nos "
            "demais casos)"
        )
    )
    
    eso11_infoSubstPatrOpPort = fields.One2many("eso.11.infosubstpatropport", "eso11_infoSubstPatrOpPort_evtInfoComplPer_id",
        string="Informação de substituição prevista",
        help=(
            "Informação de substituição prevista na Lei "
            "12.546/2011\nDESCRICAO_COMPLETA:Grupo preenchido exclusivamente "
            "pelo Órgão Gestor de Mão de Obra - OGMO "
            "({classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib)"
            " em S-1000 = [09]), listando apenas seus códigos de lotação com "
            "operadores portuários enquadrados nos arts. 7º a 9º da Lei "
            "12.546/2011.\nCHAVE_GRUPO: {codLotacao}\nCONDICAO_GRUPO: OC (se "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [09]; N (nos demais casos)"
        )
    )
    
    eso11_infoAtivConcom = fields.Many2one(
        comodel_name="eso.11.infoativconcom",
        string="Empresas enquadradas no Simples Nacional",
        help=(
            "Empresas enquadradas no Simples Nacional - Atividades "
            "concomitantes\nDESCRICAO_COMPLETA:Grupo preenchido por empresa "
            "enquadrada no regime de tributação Simples Nacional com "
            "tributação previdenciária substituída e não "
            "substituída.\nCONDICAO_GRUPO: O (se "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [03]); N (nos demais casos)"
        )
    )
    
    eso11_infoPercTransf11096 = fields.Many2one(
        comodel_name="eso.11.infoperctransf11096",
        string="Transformação de entidade beneficente",
        help=(
            "Transformação de entidade beneficente em empresa de fins "
            "lucrativos\nDESCRICAO_COMPLETA:Grupo preenchido por entidade que "
            "tenha se transformado em sociedade de fins lucrativos nos termos "
            "e no prazo da Lei 11.096/2005.\nCONDICAO_GRUPO: O (se {dtTrans110"
            "96}(1000_infoEmpregador_inclusao_infoCadastro_dtTrans11096) em "
            "S-1000 for informado); N (nos demais casos)"
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id"
    )
    

class InfoSubstPatr(models.AbstractModel):
    """Inf. complementares - Empresas enquadradas nos arts. 7º a 9º da Lei
    12.546/2011
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente por empresa enquadrada nos
    arts. 7º a 9º da Lei 12.546/2011, conforme classificação tributária
    indicada no evento S-1000.
    CONDICAO_GRUPO: O (se
    {indDesFolha}(1000_infoEmpregador_inclusao_infoCadastro_indDesFolha) em
    S-1000 = [1]); N (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infosubstpatr"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoComplPer.InfoSubstPatr"


    
    eso11_indSubstPatr = fields.Selection(TS_INDSUBSTPATR,
        string="Indicativo de substituição",
        xsd_required=True,
        xsd_type="TS_indSubstPatr",
        help=(
            "Indicativo de substituição da contribuição previdenciária "
            "patronal."
        )
    )
    
    eso11_percRedContrib = fields.Float(
        string="Percentual não substituído",
        xsd_required=True,
        xsd_type="TS_percentual",
        help=(
            "Percentual não substituído pela contribuição prevista na Lei "
            "12.546/2011.\nInformar 0 (zero) se {indSubstPatr}(./indSubstPatr)"
            " = [1]. Caso contrário, preencher com o percentual correspondente"
            " à razão entre a receita de atividades não relacionadas nos arts."
            " 7º e 8º da Lei 12.546/2011 e a receita bruta total.\nValidação: "
            "Se {indSubstPatr}(./indSubstPatr) = [1], informar 0 (zero)."
        )
    )
    

class InfoSubstPatrOpPort(models.AbstractModel):
    """Informação de substituição prevista na Lei 12.546/2011
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente pelo Órgão Gestor de Mão de
    Obra - OGMO
    ({classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000
    = [09]), listando apenas seus códigos de lotação com operadores portuários
    enquadrados nos arts. 7º a 9º da Lei 12.546/2011.
    CHAVE_GRUPO: {codLotacao}
    CONDICAO_GRUPO: OC (se
    {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000
    = [09]; N (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infosubstpatropport"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoComplPer.InfoSubstPatrOpPort"


    
    eso11_codLotacao = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador para a lotação "
            "tributária.\nValidação: Deve ser um código válido e existente na "
            "Tabela de Lotações Tributárias (S-1020), com "
            "{tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) = "
            "[08]."
        )
    )
    

class InfoAtivConcom(models.AbstractModel):
    """Empresas enquadradas no Simples Nacional - Atividades concomitantes
    DESCRICAO_COMPLETA:Grupo preenchido por empresa enquadrada no regime de
    tributação Simples Nacional com tributação previdenciária substituída e não
    substituída.
    CONDICAO_GRUPO: O (se
    {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000
    = [03]); N (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoativconcom"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoComplPer.InfoAtivConcom"


    
    eso11_fatorMes = fields.Float(
        string="Informe o fator a ser utilizado",
        xsd_required=True,
        xsd_type="TS_percentual",
        help=(
            "Informe o fator a ser utilizado para cálculo da contribuição "
            "patronal do mês dos trabalhadores envolvidos na execução das "
            "atividades enquadradas no Anexo IV em conjunto com as dos Anexos "
            "I a III e V da Lei Complementar 123/2006."
        )
    )
    
    eso11_fator13 = fields.Float(
        string="fator13",
        xsd_required=True,
        xsd_type="TS_percentual",
        help=(
            "Informe o fator a ser utilizado para cálculo da contribuição "
            "patronal do décimo terceiro dos trabalhadores envolvidos na "
            "execução das atividades enquadradas no Anexo IV em conjunto com "
            "as dos Anexos I a III e V da Lei Complementar 123/2006."
        )
    )
    

class InfoPercTransf11096(models.AbstractModel):
    """Transformação de entidade beneficente em empresa de fins lucrativos
    DESCRICAO_COMPLETA:Grupo preenchido por entidade que tenha se transformado em
    sociedade de fins lucrativos nos termos e no prazo da Lei 11.096/2005.
    CONDICAO_GRUPO: O (se
    {dtTrans11096}(1000_infoEmpregador_inclusao_infoCadastro_dtTrans11096) em
    S-1000 for informado); N (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperctransf11096"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtInfoComplPer.InfoPercTransf11096"


    
    eso11_percTransf = fields.Selection(TS_PERCTRANSF,
        string="Informe o percentual",
        xsd_required=True,
        xsd_type="TS_percTransf",
        help=(
            "Informe o percentual de contribuição social devida em caso de "
            "transformação em sociedade de fins lucrativos - Lei 11.096/2005."
        )
    )