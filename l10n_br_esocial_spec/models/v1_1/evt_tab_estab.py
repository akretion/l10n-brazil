# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSALIQRAT,
    TSINDSUBSTPATROBRA,
    TSTPINSC134,
    TSTPPROC12,
    TSTPPROC124,
    TIdeEmpregador,
    TIdeEventoEvtTabInicial,
    TNovaValidade,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTabEstab/v_S_01_01_00"

"""Tipo de CAEPF.
    Validação: Deve ser compatível com o cadastro da RFB."""
INFOCAEPF_TPCAEPF = [
    ("1", "Contribuinte individual"),
    ("2", "Produtor rural"),
    ("3", "Segurado especial"),
]


class TDadosEstab(models.AbstractModel):
    """Detalhamento das informações do estabelecimento
    DESCRICAO_COMPLETA:Detalhamento das informações do estabelecimento, obra de
    construção civil ou unidade de órgão público."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tdadosestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab"

    eso11_cnaePrep = fields.Char(
        string="cnaePrep", xsd_required=True, xsd_type="TS_cnae"
    )

    eso11_cnpjResp = fields.Char(
        string="o CNPJ responsável pela inscrição",
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ responsável pela inscrição no cadastro de obras da "
            "RFB.\nValidação: Preenchimento obrigatório e exclusivo por Pessoa"
            " Jurídica e se "
            "{ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = [4]."
            " Informação obrigatória se "
            "{iniValid}(1005_infoEstab_inclusao_ideEstab_iniValid) &gt;= "
            "[2022-04].\nDeve ser um identificador válido, constante das bases"
            " da RFB, vinculado ao empregador."
        ),
    )

    eso11_aliqGilrat = fields.Many2one(
        comodel_name="eso.11.aliqgilrat",
        string="Informações de apuração",
        help=(
            "Informações de apuração da alíquota GILRAT do "
            "estabelecimento.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoCaepf = fields.Many2one(
        comodel_name="eso.11.infocaepf",
        string="Informações relativas ao CAEPF",
        help=(
            "Informações relativas ao CAEPF\nDESCRICAO_COMPLETA:Informações "
            "relativas ao Cadastro de Atividade Econômica da Pessoa Física - "
            "CAEPF.\nCONDICAO_GRUPO: O (se "
            "{ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = "
            "[3]); N (nos demais casos)"
        ),
    )

    eso11_infoObra = fields.Many2one(
        comodel_name="eso.11.infoobra",
        string="Indicativo de substituição",
        help=(
            "Indicativo de substituição da contribuição patronal - Obra de "
            "construção civil\nDESCRICAO_COMPLETA:Grupo preenchido obrigatória"
            " e exclusivamente por empresa construtora, relacionando os "
            "estabelecimentos inscritos no Cadastro Nacional de Obras - CNO, "
            "para indicar a substituição ou não da contribuição patronal "
            "incidente sobre a remuneração dos trabalhadores de obra de "
            "construção civil.\nCONDICAO_GRUPO: O (se "
            "{indConstr}(1000_infoEmpregador_inclusao_infoCadastro_indConstr) "
            "em S-1000 = [1] e "
            "{ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = "
            "[4]); N (nos demais casos)"
        ),
    )

    eso11_infoTrab = fields.Many2one(
        comodel_name="eso.11.infotrab",
        string="Informações trabalhistas",
        help=(
            "Informações trabalhistas\nDESCRICAO_COMPLETA:Informações "
            "trabalhistas relativas ao estabelecimento.\nCONDICAO_GRUPO: OC"
        ),
    )


class AliqGilrat(models.AbstractModel):
    """Informações de apuração da alíquota GILRAT do estabelecimento.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.aliqgilrat"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.AliqGilrat"

    eso11_aliqRat = fields.Selection(
        TS_ALIQRAT,
        string="alíquota RAT",
        xsd_type="TS_aliqRat",
        help=(
            "alíquota RAT, quando divergente da legislação vigente para a "
            "atividade (CNAE) preponderante. A divergência só é permitida se "
            "existir o grupo com informações sobre o processo "
            "administrativo/judicial que permite a aplicação de alíquota "
            "diferente.\nValidação: Preenchimento obrigatório e exclusivo se a"
            " alíquota informada for diferente da definida na legislação "
            "vigente para o código CNAE informado (neste caso, deverá haver "
            "informações de processo em {procAdmJudRat}(1005_infoEstab_inclusa"
            "o_dadosEstab_aliqGilrat_procAdmJudRat)).\nSe informada, deve ser "
            "diferente da alíquota definida na legislação vigente para a "
            "atividade (CNAE) preponderante."
        ),
    )

    eso11_fap = fields.Float(
        string="Fator Acidentário de Prevenção",
        xsd_type="TS_fap",
        help=(
            "Fator Acidentário de Prevenção - FAP.\nValidação: Preenchimento "
            "obrigatório e exclusivo por Pessoa Jurídica e:\na) "
            "{ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = [4] "
            "e o campo {cnpjResp}(../cnpjResp) não estiver informado; ou\nb) "
            "{ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = [1, "
            "4] e o fator informado for diferente do definido pelo órgão "
            "governamental competente para o estabelecimento ou para o CNPJ "
            "responsável pela inscrição no CNO (neste caso, deverá haver "
            "informações de processo em {procAdmJudFap}(1005_infoEstab_inclusa"
            "o_dadosEstab_aliqGilrat_procAdmJudFap)); ou\nc) "
            "{ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = [1, "
            "4] e o estabelecimento ou o CNPJ responsável pela inscrição no "
            "CNO não for encontrado na tabela FAP.\nSe informado, deve ser um "
            "número maior ou igual a 0,5000 e menor ou igual a 2,0000 e, no "
            "caso da alínea 'b', deve ser diferente do valor definido pelo "
            "órgão governamental competente."
        ),
    )

    eso11_procAdmJudRat = fields.Many2one(
        comodel_name="eso.11.procadmjudrat",
        string="procAdmJudRat",
        help=(
            "Processo administrativo/judicial relativo à alíquota "
            "RAT.\nDESCRICAO_COMPLETA:Grupo que identifica, em caso de "
            "existência, o processo administrativo ou judicial em que houve "
            "decisão/sentença favorável ao contribuinte modificando a alíquota"
            " RAT da empresa.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_procAdmJudFap = fields.Many2one(
        comodel_name="eso.11.procadmjudfap",
        string="procAdmJudFap",
        help=(
            "Processo administrativo/judicial relativo ao "
            "FAP.\nDESCRICAO_COMPLETA:Grupo que identifica, em caso de "
            "existência, o processo administrativo/judicial em que houve "
            "decisão ou sentença favorável ao contribuinte suspendendo ou "
            "alterando a alíquota FAP aplicável ao "
            "contribuinte.\nCONDICAO_GRUPO: OC"
        ),
    )


class ProcAdmJudRat(models.AbstractModel):
    """Processo administrativo/judicial relativo à alíquota RAT.
    DESCRICAO_COMPLETA:Grupo que identifica, em caso de existência, o processo
    administrativo ou judicial em que houve decisão/sentença favorável ao
    contribuinte modificando a alíquota RAT da empresa.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.procadmjudrat"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.AliqGilrat.ProcAdmJudRat"

    eso11_tpProc = fields.Selection(
        TS_TPPROC_1_2, string="tpProc", xsd_required=True, xsd_type="TS_tpProc_1_2"
    )

    eso11_nrProc = fields.Char(
        string="Informar um número",
        xsd_required=True,
        xsd_type="TS_nrProc_17_20_21",
        help=(
            "Informar um número de processo cadastrado através do evento "
            "S-1070, cujo "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) "
            "seja igual a [1].\nValidação: Deve ser um número de processo "
            "administrativo ou judicial válido e existente na Tabela de "
            "Processos (S-1070), com "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) = "
            "[1]."
        ),
    )

    eso11_codSusp = fields.Char(
        string="codSusp", xsd_required=True, xsd_type="TS_codSusp"
    )


class ProcAdmJudFap(models.AbstractModel):
    """Processo administrativo/judicial relativo ao FAP.
    DESCRICAO_COMPLETA:Grupo que identifica, em caso de existência, o processo
    administrativo/judicial em que houve decisão ou sentença favorável ao
    contribuinte suspendendo ou alterando a alíquota FAP aplicável ao
    contribuinte.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.procadmjudfap"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.AliqGilrat.ProcAdmJudFap"

    eso11_tpProc = fields.Selection(
        TS_TPPROC_1_2_4, string="tpProc", xsd_required=True, xsd_type="TS_tpProc_1_2_4"
    )

    eso11_nrProc = fields.Char(
        string="Informar um número",
        xsd_required=True,
        xsd_type="TS_nrProc_16_17_20_21",
        help=(
            "Informar um número de processo cadastrado através do evento "
            "S-1070, cujo "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) "
            "seja igual a [1].\nValidação: Deve ser um número de processo "
            "administrativo ou judicial válido e existente na Tabela de "
            "Processos (S-1070), com "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) = "
            "[1]."
        ),
    )

    eso11_codSusp = fields.Char(
        string="codSusp", xsd_required=True, xsd_type="TS_codSusp"
    )


class InfoCaepf(models.AbstractModel):
    """Informações relativas ao CAEPF
    DESCRICAO_COMPLETA:Informações relativas ao Cadastro de Atividade Econômica da
    Pessoa Física - CAEPF.
    CONDICAO_GRUPO: O (se
    {ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = [3]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocaepf"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.InfoCaepf"

    eso11_tpCaepf = fields.Selection(
        INFOCAEPF_TPCAEPF, string="tpCaepf", xsd_required=True
    )


class InfoObra(models.AbstractModel):
    """Indicativo de substituição da contribuição patronal - Obra de construção
    civil
    DESCRICAO_COMPLETA:Grupo preenchido obrigatória e exclusivamente por empresa
    construtora, relacionando os estabelecimentos inscritos no Cadastro
    Nacional de Obras - CNO, para indicar a substituição ou não da contribuição
    patronal incidente sobre a remuneração dos trabalhadores de obra de
    construção civil.
    CONDICAO_GRUPO: O (se
    {indConstr}(1000_infoEmpregador_inclusao_infoCadastro_indConstr) em S-1000
    = [1] e {ideEstab/tpInsc}(1005_infoEstab_inclusao_ideEstab_tpInsc) = [4]);
    N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoobra"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.InfoObra"

    eso11_indSubstPatrObra = fields.Selection(
        TS_INDSUBSTPATROBRA,
        string="Indicativo de substituição",
        xsd_required=True,
        xsd_type="TS_indSubstPatrObra",
        help=(
            "Indicativo de substituição da contribuição patronal de obra de "
            "construção civil."
        ),
    )


class InfoTrab(models.AbstractModel):
    """Informações trabalhistas
    DESCRICAO_COMPLETA:Informações trabalhistas relativas ao estabelecimento.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.InfoTrab"

    eso11_infoApr = fields.Many2one(
        comodel_name="eso.11.infoapr",
        string="Informações relacionadas à contratação",
        help=(
            "Informações relacionadas à contratação de "
            "aprendiz\nDESCRICAO_COMPLETA:Informações relacionadas à "
            "contratação de aprendiz.\nPreenchimento obrigatório somente no "
            "caso de dispensa, ainda que parcial, de contratação de aprendiz "
            "em virtude de processo judicial ou quando houver contratação de "
            "aprendiz por meio de entidade educativa ou de prática "
            "desportiva.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoPCD = fields.Many2one(
        comodel_name="eso.11.infopcd",
        string="Informações sobre a contratação de PCD",
        help=(
            "Informações sobre a contratação de "
            "PCD.\nDESCRICAO_COMPLETA:Informações sobre a contratação de "
            "pessoa com deficiência (PCD).\nEssa informação deve ser prestada "
            "apenas no estabelecimento matriz.\nPreenchimento obrigatório "
            "somente no caso de dispensa, ainda que parcial, de contratação de"
            " PCD em virtude de processo judicial.\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoApr(models.AbstractModel):
    """Informações relacionadas à contratação de aprendiz
    DESCRICAO_COMPLETA:Informações relacionadas à contratação de aprendiz.
    Preenchimento obrigatório somente no caso de dispensa, ainda que parcial, de
    contratação de aprendiz em virtude de processo judicial ou quando houver
    contratação de aprendiz por meio de entidade educativa ou de prática
    desportiva.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoapr"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.InfoTrab.InfoApr"

    eso11_nrProcJud = fields.Char(
        string="o número do processo judicial",
        xsd_type="TS_nrProcJud",
        help=(
            "o número do processo judicial.\nValidação: Se informado, deve ser"
            " um número de processo judicial válido."
        ),
    )

    eso11_infoEntEduc = fields.One2many(
        "eso.11.infoenteduc",
        "eso11_infoEntEduc_infoApr_id",
        string="infoEntEduc",
        help=(
            "Identificação da(s) entidade(s) educativa(s) ou de prática "
            "desportiva.\nCHAVE_GRUPO: {nrInsc}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoEntEduc(models.AbstractModel):
    """Identificação da(s) entidade(s) educativa(s) ou de prática desportiva.
    CHAVE_GRUPO: {nrInsc}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoenteduc"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.InfoTrab.InfoApr.InfoEntEduc"

    eso11_nrInsc = fields.Char(
        string="número de inscrição",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "número de inscrição da entidade educativa ou de prática "
            "desportiva.\nValidação: Deve ser um número de CNPJ válido, com 14"
            " (catorze) algarismos. Se o empregador for pessoa jurídica, a "
            "raiz do CNPJ informado deve ser diferente de "
            "{ideEmpregador/nrInsc}(1005_ideEmpregador_nrInsc)."
        ),
    )


class InfoPcd(models.AbstractModel):
    """Informações sobre a contratação de PCD.
    DESCRICAO_COMPLETA:Informações sobre a contratação de pessoa com deficiência
    (PCD).
    Essa informação deve ser prestada apenas no estabelecimento matriz.
    Preenchimento obrigatório somente no caso de dispensa, ainda que parcial, de
    contratação de PCD em virtude de processo judicial.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infopcd"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosEstab.InfoTrab.InfoPcd"

    eso11_nrProcJud = fields.Char(
        string="o número do processo judicial",
        xsd_required=True,
        xsd_type="TS_nrProcJud",
        help=(
            "o número do processo judicial.\nValidação: Deve ser um número de "
            "processo judicial válido."
        ),
    )


class TIdeEstab(models.AbstractModel):
    """Identificação do estabelecimento e validade das informações
    DESCRICAO_COMPLETA:Identificação do estabelecimento, obra de construção civil
    ou unidade de órgão público e período de validade das informações.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}, {iniValid*}, {fimValid*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_3_4",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nValidação: Se "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [04], deve ser igual a [1]."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do estabelecimento",
        xsd_required=True,
        xsd_type="TS_nrInsc_12_14",
        help=(
            "número de inscrição do estabelecimento (inclusive Sociedade em "
            "Conta de Participação - SCP), obra de construção civil ou órgão "
            "público de acordo com o tipo de inscrição indicado no campo "
            "{ideEstab/tpInsc}(./tpInsc).\nValidação: Deve ser compatível com "
            "o conteúdo do campo {ideEstab/tpInsc}(./tpInsc). Deve ser um "
            "identificador válido, constante das bases da RFB, vinculado ao "
            "empregador."
        ),
    )

    eso11_iniValid = fields.Char(
        string="iniValid", xsd_required=True, xsd_type="TS_iniValid"
    )

    eso11_fimValid = fields.Char(string="fimValid", xsd_type="TS_fimValid")


class ESocial(models.AbstractModel):
    """S-1005 - Tabela de Estabelecimentos, Obras ou Unidades de Órgãos
    Públicos"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtTabEstab = fields.Many2one(
        comodel_name="eso.11.evttabestab",
        string="Evento Tabela de Estabelecimentos",
        xsd_required=True,
        help=(
            "Evento Tabela de Estabelecimentos\nDESCRICAO_COMPLETA:Evento "
            "Tabela de Estabelecimentos, Obras ou Unidades de Órgãos "
            "Públicos.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\n"
            "REGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_TABESTAB_VALIDA_E"
            "STABELECIMENTO\nREGRA:REGRA_TABESTAB_VALIDA_INFO_CNO\nREGRA:REGRA"
            "_TABGERAL_ALTERACAO_PERIODO_CONFLITANTE\nREGRA:REGRA_TABGERAL_EXI"
            "STE_REGISTRO_ALTERADO\nREGRA:REGRA_TABGERAL_EXISTE_REGISTRO_EXCLU"
            "IDO\nREGRA:REGRA_TABGERAL_INCLUSAO_PERIODO_CONFLITANTE\nREGRA:REG"
            "RA_TAB_PERMITE_EXCLUSAO\nREGRA:REGRA_VALIDA_DT_FUTURA"
        ),
    )


class EvtTabEstab(models.AbstractModel):
    """Evento Tabela de Estabelecimentos
    DESCRICAO_COMPLETA:Evento Tabela de Estabelecimentos, Obras ou Unidades de
    Órgãos Públicos.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_TABESTAB_VALIDA_ESTABELECIMENTO
    REGRA:REGRA_TABESTAB_VALIDA_INFO_CNO
    REGRA:REGRA_TABGERAL_ALTERACAO_PERIODO_CONFLITANTE
    REGRA:REGRA_TABGERAL_EXISTE_REGISTRO_ALTERADO
    REGRA:REGRA_TABGERAL_EXISTE_REGISTRO_EXCLUIDO
    REGRA:REGRA_TABGERAL_INCLUSAO_PERIODO_CONFLITANTE
    REGRA:REGRA_TAB_PERMITE_EXCLUSAO
    REGRA:REGRA_VALIDA_DT_FUTURA"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttabestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabEstab"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoevttabinicial",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_evtTab_inicial",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_infoEstab = fields.Many2one(
        comodel_name="eso.11.infoestab",
        string="Informações do estabelecimento",
        xsd_required=True,
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoEstab(models.AbstractModel):
    "Informações do estabelecimento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabEstab.InfoEstab"

    eso11_inclusao = fields.Many2one(
        comodel_name="eso.11.inclusao",
        string="Inclusão de novas informações",
        choice="infoestab",
        xsd_choice_required=True,
        help="Inclusão de novas informações.\nCONDICAO_GRUPO: OC",
    )

    eso11_alteracao = fields.Many2one(
        comodel_name="eso.11.alteracao",
        string="Alteração das informações",
        choice="infoestab",
        xsd_choice_required=True,
        help="Alteração das informações.\nCONDICAO_GRUPO: OC",
    )

    eso11_exclusao = fields.Many2one(
        comodel_name="eso.11.exclusao",
        string="Exclusão das informações",
        choice="infoestab",
        xsd_choice_required=True,
        help="Exclusão das informações.\nCONDICAO_GRUPO: OC",
    )


class Inclusao(models.AbstractModel):
    """Inclusão de novas informações.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabEstab.InfoEstab.Inclusao"

    eso11_ideEstab = fields.Many2one(
        comodel_name="eso.11.tideestab",
        string="ideEstab",
        xsd_required=True,
        xsd_type="T_ideEstab",
    )

    eso11_dadosEstab = fields.Many2one(
        comodel_name="eso.11.tdadosestab",
        string="dadosEstab",
        xsd_required=True,
        xsd_type="T_dadosEstab",
    )


class Alteracao(models.AbstractModel):
    """Alteração das informações.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.alteracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabEstab.InfoEstab.Alteracao"

    eso11_ideEstab = fields.Many2one(
        comodel_name="eso.11.tideestab",
        string="ideEstab",
        xsd_required=True,
        xsd_type="T_ideEstab",
    )

    eso11_dadosEstab = fields.Many2one(
        comodel_name="eso.11.tdadosestab",
        string="dadosEstab",
        xsd_required=True,
        xsd_type="T_dadosEstab",
    )

    eso11_novaValidade = fields.Many2one(
        comodel_name="eso.11.tnovavalidade",
        string="novaValidade",
        xsd_type="T_novaValidade",
    )


class Exclusao(models.AbstractModel):
    """Exclusão das informações.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.exclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabEstab.InfoEstab.Exclusao"

    eso11_ideEstab = fields.Many2one(
        comodel_name="eso.11.tideestab",
        string="ideEstab",
        xsd_required=True,
        xsd_type="T_ideEstab",
    )
