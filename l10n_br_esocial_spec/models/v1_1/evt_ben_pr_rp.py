# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDRRA,
    TSTPINSC1,
    TIdeEmpregadorCnpj,
    TIdeEventoFolhaOpp,
    TInfoRra,
    TItensRemunRpps,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtBenPrRP/v_S_01_01_00"


class TIdeEstab(models.AbstractModel):
    """Identificação da unidade do órgão público
    DESCRICAO_COMPLETA:Identificação da unidade do órgão público na qual o
    beneficiário possui provento ou pensão.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEstab"

    eso11_ideEstab_infoPerApur_id = fields.Many2one(
        comodel_name="eso.11.infoperapur", xsd_implicit=True, ondelete="cascade"
    )
    eso11_ideEstab_idePeriodo_id = fields.Many2one(
        comodel_name="eso.11.ideperiodo", xsd_implicit=True, ondelete="cascade"
    )
    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição da unidade",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help="número de inscrição da unidade do órgão público.",
    )

    eso11_itensRemun = fields.One2many(
        "eso.11.titensremunrpps",
        "eso11_itensRemun_T_ideEstab_id",
        string="Itens que compõem o provento ou pensão",
        xsd_type="T_itensRemun_rpps",
        help=(
            "Itens que compõem o provento ou pensão do "
            "beneficiário\nDESCRICAO_COMPLETA:Rubricas que compõem o provento "
            "ou pensão do beneficiário."
        ),
    )


class ESocial(models.AbstractModel):
    "S-1207 - Benefícios - Entes Públicos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtBenPrRP = fields.Many2one(
        comodel_name="eso.11.evtbenprrp",
        string="Evento Benefícios - Entes Públicos",
        xsd_required=True,
        help=(
            "Evento Benefícios - Entes Públicos.\nCHAVE_GRUPO: {Id}\nREGRA:REG"
            "RA_CONTROLE_DUPLICIDADE\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA"
            ":REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:"
            "REGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA:REGRA_REMUN_ANUAL_DEZE"
            "MBRO\nREGRA:REGRA_REMUN_BENEFICIO_EXISTENTE_RET\nREGRA:REGRA_REMU"
            "N_IND_RETIFICACAO\nREGRA:REGRA_REMUN_PERMITE_EXCLUSAO\nREGRA:REGR"
            "A_RUBRICA_COMPATIVEL_DECTERCEIRO\nREGRA:REGRA_VALIDA_EMPREGADOR\n"
            "REGRA:REGRA_VALIDA_PERIODO_APURACAO"
        ),
    )


class EvtBenPrRp(models.AbstractModel):
    """Evento Benefícios - Entes Públicos.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_CONTROLE_DUPLICIDADE
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_REMUN_ANUAL_DEZEMBRO
    REGRA:REGRA_REMUN_BENEFICIO_EXISTENTE_RET
    REGRA:REGRA_REMUN_IND_RETIFICACAO
    REGRA:REGRA_REMUN_PERMITE_EXCLUSAO
    REGRA:REGRA_RUBRICA_COMPATIVEL_DECTERCEIRO
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_PERIODO_APURACAO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtbenprrp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBenPrRp"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventofolhaopp",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_folha_opp",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregadorcnpj",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador_cnpj",
    )

    eso11_ideBenef = fields.Many2one(
        comodel_name="eso.11.idebenef",
        string="Identificação do beneficiário",
        xsd_required=True,
        help="Identificação do beneficiário.\nCHAVE_GRUPO: {cpfBenef*}",
    )

    eso11_dmDev = fields.One2many(
        "eso.11.dmdev",
        "eso11_dmDev_evtBenPrRP_id",
        string="Demonstrativo de valores devidos",
        help=(
            "Demonstrativo de valores devidos ao "
            "beneficiário\nDESCRICAO_COMPLETA:Identificação de cada um dos "
            "demonstrativos de valores devidos ao beneficiário.\nCHAVE_GRUPO: "
            "{ideDmDev}\nREGRA:REGRA_DEMONSTRATIVO"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeBenef(models.AbstractModel):
    """Identificação do beneficiário.
    CHAVE_GRUPO: {cpfBenef*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idebenef"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBenPrRp.IdeBenef"

    eso11_cpfBenef = fields.Char(
        string="CPF do beneficiário",
        xsd_required=True,
        xsd_type="TS_cpf",
        help="CPF do beneficiário.\nValidação: Deve ser um CPF válido.",
    )


class DmDev(models.AbstractModel):
    """Demonstrativo de valores devidos ao beneficiário
    DESCRICAO_COMPLETA:Identificação de cada um dos demonstrativos de valores
    devidos ao beneficiário.
    CHAVE_GRUPO: {ideDmDev}
    REGRA:REGRA_DEMONSTRATIVO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dmdev"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBenPrRp.DmDev"

    eso11_ideDmDev = fields.Char(
        string="Identificador atribuído",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Identificador atribuído pelo órgão público para o demonstrativo "
            "de valores devidos ao beneficiário. O ente público pode preencher"
            " este campo utilizando-se de um identificador padrão para todos "
            "os beneficiários; no entanto, havendo mais de um demonstrativo "
            "relativo a uma mesma competência, devem ser utilizados "
            "identificadores diferentes para cada um dos "
            "demonstrativos.\nValidação: Deve ser um identificador único "
            "dentro do mesmo {perApur}(1207_ideEvento_perApur) para cada um "
            "dos demonstrativos do "
            "beneficiário.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_nrBeneficio = fields.Char(
        string="o número do benefício", xsd_required=True, xsd_type="TS_nrBeneficio"
    )

    eso11_indRRA = fields.Selection(TS_INDRRA, string="indRRA", xsd_type="TS_indRRA")

    eso11_infoRRA = fields.Many2one(
        comodel_name="eso.11.tinforra", string="infoRRA", xsd_type="T_infoRRA"
    )

    eso11_infoPerApur = fields.Many2one(
        comodel_name="eso.11.infoperapur",
        string="Informações relativas ao período",
        help=(
            "Informações relativas ao período de apuração.\nCONDICAO_GRUPO: O "
            "(se não existir o grupo {infoPerAnt}(1207_dmDev_infoPerAnt)); OC "
            "(nos demais casos)"
        ),
    )

    eso11_infoPerAnt = fields.Many2one(
        comodel_name="eso.11.infoperant",
        string="Informações relativas",
        help=(
            "Informações relativas a períodos "
            "anteriores\nDESCRICAO_COMPLETA:Grupo destinado às informações "
            "relativas a períodos anteriores. Somente preencher esse grupo se "
            "houver proventos ou pensões retroativos.\nCONDICAO_GRUPO: O (se "
            "não existir o grupo {infoPerApur}(1207_dmDev_infoPerApur) e "
            "{indApuracao}(1207_ideEvento_indApuracao) = [1]); N (se "
            "{indApuracao}(1207_ideEvento_indApuracao) = [2]); OC (nos demais "
            "casos)"
        ),
    )


class InfoPerApur(models.AbstractModel):
    """Informações relativas ao período de apuração.
    CONDICAO_GRUPO: O (se não existir o grupo {infoPerAnt}(1207_dmDev_infoPerAnt));
    OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBenPrRp.DmDev.InfoPerApur"

    eso11_ideEstab = fields.One2many(
        "eso.11.tideestab",
        "eso11_ideEstab_infoPerApur_id",
        string="ideEstab",
        xsd_type="T_ideEstab",
    )


class InfoPerAnt(models.AbstractModel):
    """Informações relativas a períodos anteriores
    DESCRICAO_COMPLETA:Grupo destinado às informações relativas a períodos
    anteriores. Somente preencher esse grupo se houver proventos ou pensões
    retroativos.
    CONDICAO_GRUPO: O (se não existir o grupo {infoPerApur}(1207_dmDev_infoPerApur)
    e {indApuracao}(1207_ideEvento_indApuracao) = [1]); N (se
    {indApuracao}(1207_ideEvento_indApuracao) = [2]); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperant"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBenPrRp.DmDev.InfoPerAnt"

    eso11_idePeriodo = fields.One2many(
        "eso.11.ideperiodo",
        "eso11_idePeriodo_infoPerAnt_id",
        string="Identificação do período de referência",
        help=(
            "Identificação do período de referência do provento ou "
            "pensão\nDESCRICAO_COMPLETA:Identificação do período ao qual se "
            "referem as diferenças de provento ou pensão.\nCHAVE_GRUPO: "
            "{perRef}"
        ),
    )


class IdePeriodo(models.AbstractModel):
    """Identificação do período de referência do provento ou pensão
    DESCRICAO_COMPLETA:Identificação do período ao qual se referem as diferenças de
    provento ou pensão.
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBenPrRp.DmDev.InfoPerAnt.IdePeriodo"

    eso11_perRef = fields.Char(
        string="período ao qual se refere o complemento",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "período ao qual se refere o complemento de provento ou pensão, no"
            " formato AAAA-MM.\nValidação: Deve ser igual ou anterior ao "
            "período de apuração informado em "
            "{perApur}(1207_ideEvento_perApur).\nDeve ser informado no formato"
            " AAAA-MM."
        ),
    )

    eso11_ideEstab = fields.One2many(
        "eso.11.tideestab",
        "eso11_ideEstab_idePeriodo_id",
        string="ideEstab",
        xsd_type="T_ideEstab",
    )
