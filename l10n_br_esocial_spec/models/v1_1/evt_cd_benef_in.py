# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSESTCIVIL,
    TSRACACOR,
    TSSEXO,
    TSSIMNAO,
    TSTPINSC1,
    TEnderecoBrasil,
    TEnderecoExterior,
    TIdeEventoTrabPj,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtCdBenefIn/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-2400 - Cadastro de Beneficiário - Entes Públicos - Início"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtCdBenefIn = fields.Many2one(
        comodel_name="eso.11.evtcdbenefin",
        string="Evento Cadastro de Beneficiário",
        xsd_required=True,
        help=(
            "Evento Cadastro de Beneficiário - "
            "Início\nDESCRICAO_COMPLETA:Evento Cadastro de Beneficiário - "
            "Entes Públicos - Início.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_PR"
            "OC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO_EXT"
            "_SEM_IMPACTO_FOPAG\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REG"
            "RA_VALIDA_CNPJ\nREGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"
        ),
    )


class EvtCdBenefIn(models.AbstractModel):
    """Evento Cadastro de Beneficiário - Início
    DESCRICAO_COMPLETA:Evento Cadastro de Beneficiário - Entes Públicos - Início.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_VALIDA_CNPJ
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcdbenefin"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenefIn"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabpj",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_PJ",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.ideempregador",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do empregador.\nCHAVE_GRUPO: "
            "{tpInsc*}, {nrInsc*}"
        ),
    )

    eso11_beneficiario = fields.Many2one(
        comodel_name="eso.11.beneficiario",
        string="Grupo de informações do beneficiário",
        xsd_required=True,
        help=("Grupo de informações do beneficiário.\nCHAVE_GRUPO: {cpfBenef*}"),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenefIn.IdeEmpregador"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1"
    )

    eso11_nrInsc = fields.Char(string="nrInsc", xsd_required=True)


class Beneficiario(models.AbstractModel):
    """Grupo de informações do beneficiário.
    CHAVE_GRUPO: {cpfBenef*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.beneficiario"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenefIn.Beneficiario"

    eso11_cpfBenef = fields.Char(
        string="CPF do beneficiário",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "CPF do beneficiário.\nValidação: Não é possível existir dois "
            "eventos originais do mesmo órgão público declarante para o mesmo "
            "CPF do beneficiário."
        ),
    )

    eso11_nmBenefic = fields.Char(
        string="nmBenefic", xsd_required=True, xsd_type="TS_nmBenefic"
    )

    eso11_dtNascto = fields.Date(
        string="a data de nascimento", xsd_required=True, xsd_type="xs:date"
    )

    eso11_dtInicio = fields.Date(
        string="a data de início do cadastro",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de início do cadastro do beneficiário. Informar a data de "
            "início da obrigatoriedade dos eventos não periódicos para o ente "
            "público no eSocial caso o beneficiário possua cadastro anterior a"
            " essa data.\nValidação: Deve ser igual ou posterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o ente "
            "público no eSocial e igual ou anterior à data atual."
        ),
    )

    eso11_sexo = fields.Selection(
        TS_SEXO,
        string="Sexo do beneficiário",
        xsd_type="TS_sexo",
        help=(
            "Sexo do beneficiário.\nValidação: Informação obrigatória se "
            "{dtInicio}(./dtInicio) for posterior ao início da obrigatoriedade"
            " dos eventos não periódicos para o ente público no eSocial."
        ),
    )

    eso11_racaCor = fields.Selection(
        TS_RACACOR, string="racaCor", xsd_required=True, xsd_type="TS_racaCorBenef"
    )

    eso11_estCiv = fields.Selection(
        TS_ESTCIVIL, string="estCiv", xsd_type="TS_estCivilBenef"
    )

    eso11_incFisMen = fields.Selection(
        TS_SIM_NAO, string="incFisMen", xsd_required=True, xsd_type="TS_incFisMen"
    )

    eso11_dtIncFisMen = fields.Date(
        string="a data do reconhecimento da incapacidade",
        xsd_type="xs:date",
        help=(
            "a data do reconhecimento da incapacidade.\nValidação: Informação "
            "obrigatória e exclusiva se {incFisMen}(./incFisMen) = [S]."
        ),
    )

    eso11_endereco = fields.Many2one(
        comodel_name="eso.11.endereco",
        string="Endereço do beneficiário",
        xsd_required=True,
        help=(
            "Endereço do beneficiário.\nDESCRICAO_COMPLETA:Grupo de "
            "informações do endereço do beneficiário."
        ),
    )

    eso11_dependente = fields.One2many(
        "eso.11.dependente",
        "eso11_dependente_beneficiario_id",
        string="Informações dos dependentes",
        help=(
            "Informações dos dependentes.\nCHAVE_GRUPO: {tpDep}, {nmDep}, "
            "{dtNascto}\nCONDICAO_GRUPO: OC"
        ),
    )


class Endereco(models.AbstractModel):
    """Endereço do beneficiário.
    DESCRICAO_COMPLETA:Grupo de informações do endereço do beneficiário."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.endereco"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenefIn.Beneficiario.Endereco"

    eso11_brasil = fields.Many2one(
        comodel_name="eso.11.tenderecobrasil",
        string="brasil",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_brasil",
    )

    eso11_exterior = fields.Many2one(
        comodel_name="eso.11.tenderecoexterior",
        string="exterior",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_exterior",
    )


class Dependente(models.AbstractModel):
    """Informações dos dependentes.
    CHAVE_GRUPO: {tpDep}, {nmDep}, {dtNascto}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dependente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenefIn.Beneficiario.Dependente"

    eso11_tpDep = fields.Char(string="tpDep", xsd_required=True, xsd_type="TS_tpDep")

    eso11_nmDep = fields.Char(string="nmDep", xsd_required=True, xsd_type="TS_nmDep")

    eso11_dtNascto = fields.Date(
        string="dtNascto", xsd_required=True, xsd_type="TS_dtNascto"
    )

    eso11_cpfDep = fields.Char(string="cpfDep", xsd_type="TS_cpfDepBenef")

    eso11_sexoDep = fields.Selection(
        TS_SEXO,
        string="Sexo do dependente",
        xsd_type="TS_sexo",
        help=(
            "Sexo do dependente.\nValidação: Informação obrigatória se "
            "{dtInicio}(../dtInicio) for posterior ao início da "
            "obrigatoriedade dos eventos não periódicos para o ente público no"
            " eSocial."
        ),
    )

    eso11_depIRRF = fields.Selection(
        TS_SIM_NAO, string="depIRRF", xsd_required=True, xsd_type="TS_depIRRF_Benef"
    )

    eso11_incFisMen = fields.Selection(
        TS_SIM_NAO, string="incFisMen", xsd_required=True, xsd_type="TS_incFisMenDep"
    )
