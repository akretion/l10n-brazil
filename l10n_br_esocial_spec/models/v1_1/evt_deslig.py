# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSGRAUEXP,
    TSINDAPURIR,
    TSINDRRA,
    TSPENSALIM,
    TSSIMNAO,
    TSTPINSC12,
    TSTPINSC134,
    TIdeEmpregador,
    TIdeEventoTrabIndGuia,
    TIdeVinculo,
    TInfoInterm,
    TInfoMv,
    TInfoRra,
    TInfoSimples,
    TProcJudTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtDeslig/v_S_01_01_00"

"""Tipo do instrumento ou situação ensejadora da remuneração relativa a
    períodos de apuração anteriores.
    Validação: Se {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib)
    em S-1000 = [04, 22], não pode ser informado [E, H]."""
IDEADC_TPACCONV = [
    ("A", "Acordo Coletivo de Trabalho"),
    ("B", "Legislação federal, estadual, municipal ou distrital"),
    ("C", "Convenção Coletiva de Trabalho"),
    ("D", "Sentença normativa - Dissídio"),
    ("E", "Conversão de licença saúde em acidente de trabalho"),
    ("G", "Antecipação de diferenças de acordo, convenção ou dissídio coletivo"),
    (
        "H",
        "Recolhimento mensal de FGTS anterior ao início de obrigatoriedade dos eventos periódicos",
    ),
    ("I", "Sentença judicial (exceto reclamatória trabalhista)"),
]

"""Indicativo de situação de remuneração após o desligamento.
    Validação: Informação obrigatória se {dtDeslig}(2299_infoDeslig_dtDeslig) &gt;=
    [2023-01-16]."""
REMUNAPOSDESLIG_INDREMUN = [
    ("1", "Quarentena"),
    (
        "2",
        "Desligamento reconhecido judicialmente com data anterior a competências com remunerações já informadas no eSocial",
    ),
    (
        "3",
        "Aposentadoria de servidor com data anterior a competências com remunerações já informadas no eSocial",
    ),
]


class TIdeEstabLot(models.AbstractModel):
    _description = "T_ideEstabLot"
    _name = "eso.11.tideestablot"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEstabLot"

    eso11_ideEstabLot_infoPerApur_id = fields.Many2one(
        comodel_name="eso.11.infoperapur", xsd_implicit=True, ondelete="cascade"
    )
    eso11_ideEstabLot_idePeriodo_id = fields.Many2one(
        comodel_name="eso.11.ideperiodo", xsd_implicit=True, ondelete="cascade"
    )
    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_EstabLot",
    )

    eso11_nrInsc = fields.Char(
        string="nrInsc", xsd_required=True, xsd_type="TS_nrInsc_EstabLot"
    )

    eso11_codLotacao = fields.Char(
        string="codLotacao", xsd_required=True, xsd_type="TS_codLotacao"
    )

    eso11_detVerbas = fields.One2many(
        "eso.11.detverbas",
        "eso11_detVerbas_T_ideEstabLot_id",
        string="Detalhamento das verbas rescisórias",
        help=(
            "Detalhamento das verbas "
            "rescisórias\nDESCRICAO_COMPLETA:Detalhamento das verbas "
            "rescisórias devidas ao trabalhador. Deve haver pelo menos uma "
            "rubrica de folha, mesmo que o valor líquido a ser pago ao "
            "trabalhador seja 0 (zero) em função de descontos."
        ),
    )

    eso11_infoAgNocivo = fields.Many2one(
        comodel_name="eso.11.infoagnocivo",
        string="Grau de exposição a agentes nocivos",
        help=(
            "Grau de exposição a agentes nocivos\nDESCRICAO_COMPLETA:Grupo "
            "referente ao detalhamento do grau de exposição do trabalhador aos"
            " agentes nocivos que ensejam a cobrança da contribuição adicional"
            " para financiamento dos benefícios de aposentadoria "
            "especial.\nCONDICAO_GRUPO: O (se o trabalhador estiver amparado "
            "pelo RGPS); N (nos demais casos)"
        ),
    )

    eso11_infoSimples = fields.Many2one(
        comodel_name="eso.11.tinfosimples",
        string="infoSimples",
        xsd_type="T_infoSimples",
    )


class DetVerbas(models.AbstractModel):
    """Detalhamento das verbas rescisórias
    DESCRICAO_COMPLETA:Detalhamento das verbas rescisórias devidas ao trabalhador.
    Deve haver pelo menos uma rubrica de folha, mesmo que o valor líquido a ser
    pago ao trabalhador seja 0 (zero) em função de descontos."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.detverbas"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEstabLot.DetVerbas"

    eso11_codRubr = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador que identifica a rubrica em sua "
            "folha de pagamento ou o código da rubrica constante da Tabela de "
            "Rubricas Padrão.\nValidação: Não pode ser utilizada rubrica cuja "
            "{natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em "
            "S-1010 seja igual a [1801, 9220], desde que mês/ano de "
            "{dtDeslig}(2299_infoDeslig_dtDeslig) &gt;= [2021-07]."
        ),
    )

    eso11_ideTabRubr = fields.Char(
        string="ideTabRubr", xsd_required=True, xsd_type="TS_ideTabRubr"
    )

    eso11_qtdRubr = fields.Float(string="qtdRubr", xsd_type="TS_qtdRubr")

    eso11_fatorRubr = fields.Float(string="fatorRubr", xsd_type="TS_fator")

    eso11_vrRubr = fields.Float(
        string="vrRubr", xsd_required=True, xsd_type="TS_vrRubr"
    )

    eso11_indApurIR = fields.Selection(
        TS_INDAPURIR,
        string="Indicativo de tipo de apuração de IR",
        xsd_type="TS_indApurIR",
        help=(
            "Indicativo de tipo de apuração de IR.\nValidação: Informação "
            "obrigatória e exclusiva se mês/ano de "
            "{dtDeslig}(2299_infoDeslig_dtDeslig) &gt;= [2021-07]."
        ),
    )


class InfoAgNocivo(models.AbstractModel):
    """Grau de exposição a agentes nocivos
    DESCRICAO_COMPLETA:Grupo referente ao detalhamento do grau de exposição do
    trabalhador aos agentes nocivos que ensejam a cobrança da contribuição
    adicional para financiamento dos benefícios de aposentadoria especial.
    CONDICAO_GRUPO: O (se o trabalhador estiver amparado pelo RGPS); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoagnocivo"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEstabLot.InfoAgNocivo"

    eso11_grauExp = fields.Selection(
        TS_GRAUEXP, string="grauExp", xsd_required=True, xsd_type="TS_grauExp"
    )


class ESocial(models.AbstractModel):
    "S-2299 - Desligamento"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtDeslig = fields.Many2one(
        comodel_name="eso.11.evtdeslig",
        string="Evento Desligamento",
        xsd_required=True,
        help=(
            "Evento Desligamento.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_DESLIG_EXCLU"
            "I_DESLIGAMENTO_REINTEG\nREGRA:REGRA_DESLIG_EXCLUSAO_EVENTO\nREGRA"
            ":REGRA_DESLIG_EXISTE_EVENTO_POSTERIOR\nREGRA:REGRA_DESLIG_JA_EXIS"
            "TE_BAIXA\nREGRA:REGRA_DESLIG_TRABALHADOR_AFASTADO\nREGRA:REGRA_EM"
            "PREGADO_DOMESTICO\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA"
            "_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO\nREGRA:RE"
            "GRA_EVE_FOPAG_SIMPLIFICADO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nR"
            "EGRA:REGRA_EXTEMP_DOMESTICO\nREGRA:REGRA_EXTEMP_REINTEGRACAO\nREG"
            "RA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PROCEMI"
            "\nREGRA:REGRA_MUDANCA_CPF\nREGRA:REGRA_REMUN_FGTS_ANTERIOR_ESOCIA"
            "L\nREGRA:REGRA_REMUN_IND_RETIFICACAO\nREGRA:REGRA_REMUN_PERMITE_E"
            "XCLUSAO\nREGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_RUBRICA_"
            "COMPATIVEL_CATEGORIA\nREGRA:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_"
            "VALIDA_PERIODO_APURACAO\nREGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"
        ),
    )


class EvtDeslig(models.AbstractModel):
    """Evento Desligamento.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_DESLIG_EXCLUI_DESLIGAMENTO_REINTEG
    REGRA:REGRA_DESLIG_EXCLUSAO_EVENTO
    REGRA:REGRA_DESLIG_EXISTE_EVENTO_POSTERIOR
    REGRA:REGRA_DESLIG_JA_EXISTE_BAIXA
    REGRA:REGRA_DESLIG_TRABALHADOR_AFASTADO
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EVE_FOPAG_SIMPLIFICADO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_DOMESTICO
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_MUDANCA_CPF
    REGRA:REGRA_REMUN_FGTS_ANTERIOR_ESOCIAL
    REGRA:REGRA_REMUN_IND_RETIFICACAO
    REGRA:REGRA_REMUN_PERMITE_EXCLUSAO
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_RUBRICA_COMPATIVEL_CATEGORIA
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_PERIODO_APURACAO
    REGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtdeslig"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabindguia",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_indGuia",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideVinculo = fields.Many2one(
        comodel_name="eso.11.tidevinculo",
        string="ideVinculo",
        xsd_required=True,
        xsd_type="T_ideVinculo",
    )

    eso11_infoDeslig = fields.Many2one(
        comodel_name="eso.11.infodeslig",
        string="Informações relativas ao desligamento",
        xsd_required=True,
        help=(
            "Informações relativas ao desligamento do vínculo.\nCHAVE_GRUPO: "
            "{dtDeslig*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoDeslig(models.AbstractModel):
    """Informações relativas ao desligamento do vínculo.
    CHAVE_GRUPO: {dtDeslig*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodeslig"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig"

    eso11_mtvDeslig = fields.Char(string="mtvDeslig", xsd_required=True)

    eso11_dtDeslig = fields.Date(
        string="a data de desligamento do vínculo",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de desligamento do vínculo (último dia "
            "trabalhado).\nValidação: Deve ser uma data igual ou anterior à "
            "data atual acrescida de 10 (dez) dias. No caso de empregado "
            "reintegrado e quando não se tratar de retificação do desligamento"
            " anterior à reintegração, também deve ser uma data igual ou "
            "posterior a {dtEfetRetorno}(2298_infoReintegr_dtEfetRetorno) do "
            "evento S-2298."
        ),
    )

    eso11_dtAvPrv = fields.Date(
        string="Data de concessão do aviso prévio",
        xsd_type="xs:date",
        help=(
            "Data de concessão do aviso prévio.\nValidação: Se informada, deve"
            " ser igual ou posterior à data de admissão e igual ou anterior a "
            "{dtDeslig}(./dtDeslig)."
        ),
    )

    eso11_indPagtoAPI = fields.Selection(
        TS_SIM_NAO,
        string="Indicativo de pagamento",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo de pagamento de aviso prévio indenizado pelo "
            "empregador, ao empregado."
        ),
    )

    eso11_dtProjFimAPI = fields.Date(
        string="Data projetada para o término",
        xsd_type="xs:date",
        help=(
            "Data projetada para o término do aviso prévio "
            "indenizado.\nValidação: Obrigatório se "
            "{indPagtoAPI}(./indPagtoAPI) for igual a [S], devendo ser igual "
            "ou posterior a {dtDeslig}(./dtDeslig)."
        ),
    )

    eso11_pensAlim = fields.Selection(
        TS_PENSALIM,
        string="Indicativo de pensão alimentícia",
        xsd_type="TS_pensAlim",
        help=(
            "Indicativo de pensão alimentícia para fins de retenção de "
            "FGTS.\nValidação: Preenchimento obrigatório e exclusivo se o "
            "vínculo for celetista ({tpRegTrab}(2200_vinculo_tpRegTrab) em "
            "S-2200 = [1])."
        ),
    )

    eso11_percAliment = fields.Float(string="percAliment", xsd_type="TS_percAliment")

    eso11_vrAlim = fields.Float(string="vrAlim", xsd_type="TS_vrAlim")

    eso11_nrProcTrab = fields.Char(
        string="Número que identifica",
        xsd_type="TS_nrProcJud",
        help=(
            "Número que identifica o processo trabalhista, quando o "
            "desligamento se der por decisão judicial.\nValidação: Se "
            "preenchido, deve ser um processo judicial válido, com 20 (vinte) "
            "algarismos."
        ),
    )

    eso11_infoInterm = fields.One2many(
        "eso.11.tinfointerm",
        "eso11_infoInterm_infoDeslig_id",
        string="Informações relativas",
        xsd_type="T_infoInterm",
        help=(
            "Informações relativas ao trabalho intermitente.\nCHAVE_GRUPO: "
            "{dia}\nCONDICAO_GRUPO: O (se o código de categoria no RET for "
            "igual a [111] no mês/ano de {dtDeslig}(2299_infoDeslig_dtDeslig);"
            " N (nos demais casos)"
        ),
    )

    eso11_observacoes = fields.One2many(
        "eso.11.observacoes",
        "eso11_observacoes_infoDeslig_id",
        string="Observações sobre o desligamento",
        help="Observações sobre o desligamento.\nCONDICAO_GRUPO: OC",
    )

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.sucessaovinc",
        string="Sucessão",
        help=(
            "Sucessão do vínculo "
            "trabalhista/estatutário\nDESCRICAO_COMPLETA:Grupo preenchido "
            "exclusivamente nos casos de sucessão do vínculo trabalhista, com "
            "a identificação da empresa sucessora.\nCONDICAO_GRUPO: O (se "
            "{mtvDeslig}(2299_infoDeslig_mtvDeslig) = [11, 12, 13, 28, 29, 37,"
            " 43]); N (nos demais casos)"
        ),
    )

    eso11_transfTit = fields.Many2one(
        comodel_name="eso.11.transftit",
        string="Transferência de titularidade",
        help=(
            "Transferência de titularidade do empregado "
            "doméstico\nDESCRICAO_COMPLETA:Transferência de titularidade do "
            "empregado doméstico para outro representante da mesma unidade "
            "familiar.\nCONDICAO_GRUPO: O (se "
            "{mtvDeslig}(2299_infoDeslig_mtvDeslig) = [34]); N (nos demais "
            "casos)"
        ),
    )

    eso11_mudancaCPF = fields.Many2one(
        comodel_name="eso.11.mudancacpf",
        string="Informação do novo CPF do trabalhador",
        help=(
            "Informação do novo CPF do trabalhador.\nCONDICAO_GRUPO: O (se "
            "{mtvDeslig}(2299_infoDeslig_mtvDeslig) = [36]); N (nos demais "
            "casos)"
        ),
    )

    eso11_verbasResc = fields.Many2one(
        comodel_name="eso.11.verbasresc",
        string="Verbas rescisórias",
        help=(
            "Verbas rescisórias\nDESCRICAO_COMPLETA:Grupo onde são prestadas "
            "as informações relativas às verbas devidas ao trabalhador na "
            "rescisão contratual.\nCONDICAO_GRUPO: N (se "
            "{mtvDeslig}(2299_infoDeslig_mtvDeslig) = [11, 12, 13, 25, 28, 29,"
            " 30, 34, 36, 43, 44] OU {dtDeslig}(2299_infoDeslig_dtDeslig) for "
            "anterior ao início de obrigatoriedade dos eventos periódicos para"
            " o empregador OU {tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = "
            "[2]); OC (nos demais casos)"
        ),
    )

    eso11_remunAposDeslig = fields.Many2one(
        comodel_name="eso.11.remunaposdeslig",
        string="Informações sobre",
        help=(
            "Informações sobre a quarentena remunerada ou outra situação de "
            "desligamento com data anterior\nDESCRICAO_COMPLETA:Informações "
            "sobre a 'quarentena' remunerada de trabalhador desligado ou outra"
            " situação de desligamento com data anterior.\nO grupo deve ser "
            "preenchido apenas no caso do trabalhador que recebe remuneração "
            "após o desligamento por estar impossibilitado de exercer "
            "atividade remunerada, no caso de desligamento reconhecido "
            "judicialmente com data anterior a competências com remunerações "
            "já informadas ou em caso de concessão de aposentadoria de "
            "servidor com data anterior a competências com remunerações já "
            "informadas no eSocial.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_consigFGTS = fields.One2many(
        "eso.11.consigfgts",
        "eso11_consigFGTS_infoDeslig_id",
        string="Informações sobre operação",
        help=(
            "Informações sobre operação de crédito consignado com garantia de "
            "FGTS.\nCONDICAO_GRUPO: OC"
        ),
    )


class Observacoes(models.AbstractModel):
    """Observações sobre o desligamento.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.observacoes"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.Observacoes"

    eso11_observacao = fields.Char(
        string="Observação relevante sobre",
        xsd_required=True,
        xsd_type="TS_observacao",
        help=(
            "Observação relevante sobre o desligamento do trabalhador, que não"
            " esteja consignada em outros campos."
        ),
    )


class SucessaoVinc(models.AbstractModel):
    """Sucessão do vínculo trabalhista/estatutário
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente nos casos de sucessão do
    vínculo trabalhista, com a identificação da empresa sucessora.
    CONDICAO_GRUPO: O (se {mtvDeslig}(2299_infoDeslig_mtvDeslig) = [11, 12, 13, 28,
    29, 37, 43]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.sucessaovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.SucessaoVinc"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do empregador sucessor, de acordo com o tipo "
            "de inscrição indicado no campo "
            "{sucessaoVinc/tpInsc}(./tpInsc).\nValidação: Deve ser um número "
            "de inscrição válido e diferente da inscrição do declarante, "
            "considerando as particularidades aplicadas à informação de CNPJ "
            "de órgão público em S-1000.\nSe {sucessaoVinc/tpInsc}(./tpInsc) ="
            " [1], deve possuir 14 (catorze) algarismos e ser diferente do "
            "CNPJ base do empregador (exceto se "
            "{ideEmpregador/nrInsc}(2299_ideEmpregador_nrInsc) tiver 14 "
            "(catorze) algarismos) e dos estabelecimentos informados através "
            "do evento S-1005.\nSe {sucessaoVinc/tpInsc}(./tpInsc) = [2], deve"
            " possuir 11 (onze) algarismos."
        ),
    )


class TransfTit(models.AbstractModel):
    """Transferência de titularidade do empregado doméstico
    DESCRICAO_COMPLETA:Transferência de titularidade do empregado doméstico para
    outro representante da mesma unidade familiar.
    CONDICAO_GRUPO: O (se {mtvDeslig}(2299_infoDeslig_mtvDeslig) = [34]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.transftit"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.TransfTit"

    eso11_cpfSubstituto = fields.Char(
        string="o CPF do novo titular",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "o CPF do novo titular.\nValidação: Deve ser um CPF válido e "
            "diferente do CPF do declarante e do empregado."
        ),
    )

    eso11_dtNascto = fields.Date(
        string="a data de nascimento do novo titular",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de nascimento do novo titular.\nValidação: Deve "
            "corresponder à data de nascimento cadastrada na base de dados do "
            "CPF do {cpfSubstituto}(./cpfSubstituto)."
        ),
    )


class MudancaCpf(models.AbstractModel):
    """Informação do novo CPF do trabalhador.
    CONDICAO_GRUPO: O (se {mtvDeslig}(2299_infoDeslig_mtvDeslig) = [36]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.mudancacpf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.MudancaCpf"

    eso11_novoCPF = fields.Char(
        string="o novo CPF do trabalhador",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "o novo CPF do trabalhador.\nValidação: Deve ser um CPF válido e "
            "diferente do CPF do empregador e do antigo CPF do trabalhador."
        ),
    )


class VerbasResc(models.AbstractModel):
    """Verbas rescisórias
    DESCRICAO_COMPLETA:Grupo onde são prestadas as informações relativas às verbas
    devidas ao trabalhador na rescisão contratual.
    CONDICAO_GRUPO: N (se {mtvDeslig}(2299_infoDeslig_mtvDeslig) = [11, 12, 13, 25,
    28, 29, 30, 34, 36, 43, 44] OU {dtDeslig}(2299_infoDeslig_dtDeslig) for
    anterior ao início de obrigatoriedade dos eventos periódicos para o
    empregador OU {tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [2]); OC (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.verbasresc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.VerbasResc"

    eso11_dmDev = fields.One2many(
        "eso.11.dmdev",
        "eso11_dmDev_verbasResc_id",
        string="Demonstrativo de valores devidos",
        help=(
            "Demonstrativo de valores devidos ao "
            "trabalhador\nDESCRICAO_COMPLETA:Identificação de cada um dos "
            "demonstrativos de valores devidos ao trabalhador.\nCHAVE_GRUPO: "
            "{ideDmDev}\nREGRA:REGRA_DEMONSTRATIVO"
        ),
    )

    eso11_procJudTrab = fields.One2many(
        "eso.11.tprocjudtrab",
        "eso11_procJudTrab_verbasResc_id",
        string="procJudTrab",
        xsd_type="T_procJudTrab",
    )

    eso11_infoMV = fields.Many2one(
        comodel_name="eso.11.tinfomv", string="infoMV", xsd_type="T_infoMV"
    )

    eso11_procCS = fields.Many2one(
        comodel_name="eso.11.proccs",
        string="Informação sobre processo judicial",
        help=(
            "Informação sobre processo judicial que suspende a exigibilidade "
            "da Contribuição Social Rescisória.\nCONDICAO_GRUPO: OC"
        ),
    )


class DmDev(models.AbstractModel):
    """Demonstrativo de valores devidos ao trabalhador
    DESCRICAO_COMPLETA:Identificação de cada um dos demonstrativos de valores
    devidos ao trabalhador.
    CHAVE_GRUPO: {ideDmDev}
    REGRA:REGRA_DEMONSTRATIVO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dmdev"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.VerbasResc.DmDev"

    eso11_ideDmDev = fields.Char(
        string="Identificador atribuído",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Identificador atribuído pela empresa para o demonstrativo de "
            "valores devidos ao trabalhador relativo a verbas "
            "rescisórias.\nValidação: Deve ser um identificador único dentro "
            "da mesma competência (mês/ano da data de desligamento) para cada "
            "um dos demonstrativos do "
            "trabalhador.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_indRRA = fields.Selection(
        TS_INDRRA,
        string="Indicativo",
        xsd_type="TS_indRRA",
        help=(
            "Indicativo de Rendimentos Recebidos Acumuladamente - "
            "RRA.\nSomente preencher este campo se for um demonstrativo de "
            "RRA."
        ),
    )

    eso11_infoRRA = fields.Many2one(
        comodel_name="eso.11.tinforra", string="infoRRA", xsd_type="T_infoRRA"
    )

    eso11_infoPerApur = fields.Many2one(
        comodel_name="eso.11.infoperapur",
        string="Verbas rescisórias relativas ao mês/ano",
        help=(
            "Verbas rescisórias relativas ao mês/ano da data do "
            "desligamento.\nCONDICAO_GRUPO: O (se não existir o grupo "
            "{infoPerAnt}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt)); OC "
            "(nos demais casos)"
        ),
    )

    eso11_infoPerAnt = fields.Many2one(
        comodel_name="eso.11.infoperant",
        string="Informações relativas",
        help=(
            "Informações relativas a períodos "
            "anteriores\nDESCRICAO_COMPLETA:Remuneração relativa a períodos "
            "anteriores, devida em função de acordos coletivos, legislação "
            "específica, convenção coletiva de trabalho, dissídio ou conversão"
            " de licença saúde em acidente de trabalho.\nCONDICAO_GRUPO: O (se"
            " não existir o grupo "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur)); OC "
            "(nos demais casos)"
        ),
    )


class InfoPerApur(models.AbstractModel):
    """Verbas rescisórias relativas ao mês/ano da data do desligamento.
    CONDICAO_GRUPO: O (se não existir o grupo
    {infoPerAnt}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt)); OC (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.VerbasResc.DmDev.InfoPerApur"

    eso11_ideEstabLot = fields.One2many(
        "eso.11.tideestablot",
        "eso11_ideEstabLot_infoPerApur_id",
        string="Identificação do estabelecimento",
        xsd_type="T_ideEstabLot",
        help=(
            "Identificação do estabelecimento e "
            "lotação\nDESCRICAO_COMPLETA:Identificação do estabelecimento e da"
            " lotação nos quais o trabalhador possui remuneração no período de"
            " apuração. O estabelecimento identificado no grupo pode ser: o "
            "número do CNPJ do estabelecimento da própria empresa "
            "(matriz/filial), o número da obra (própria) no CNO, ou o número "
            "do CAEPF (no caso de pessoa física obrigada a inscrição no "
            "Cadastro de Atividade Econômica da Pessoa Física).\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}, {codLotacao}"
        ),
    )


class InfoPerAnt(models.AbstractModel):
    """Informações relativas a períodos anteriores
    DESCRICAO_COMPLETA:Remuneração relativa a períodos anteriores, devida em função
    de acordos coletivos, legislação específica, convenção coletiva de
    trabalho, dissídio ou conversão de licença saúde em acidente de trabalho.
    CONDICAO_GRUPO: O (se não existir o grupo
    {infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur)); OC (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperant"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.VerbasResc.DmDev.InfoPerAnt"

    eso11_ideADC = fields.One2many(
        "eso.11.ideadc",
        "eso11_ideADC_infoPerAnt_id",
        string="Instrumento ou situação ensejadora",
        help=(
            "Instrumento ou situação ensejadora da remuneração em períodos "
            "anteriores\nDESCRICAO_COMPLETA:Identificação do instrumento ou "
            "situação ensejadora da remuneração relativa a períodos de "
            "apuração anteriores.\nCHAVE_GRUPO: {dtAcConv}, {tpAcConv}"
        ),
    )


class IdeAdc(models.AbstractModel):
    """Instrumento ou situação ensejadora da remuneração em períodos anteriores
    DESCRICAO_COMPLETA:Identificação do instrumento ou situação ensejadora da
    remuneração relativa a períodos de apuração anteriores.
    CHAVE_GRUPO: {dtAcConv}, {tpAcConv}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideadc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.VerbasResc.DmDev.InfoPerAnt.IdeAdc"

    eso11_dtAcConv = fields.Date(string="dtAcConv")

    eso11_tpAcConv = fields.Selection(
        IDEADC_TPACCONV, string="tpAcConv", xsd_required=True
    )

    eso11_dsc = fields.Char(string="dsc", xsd_required=True, xsd_type="TS_dsc")

    eso11_idePeriodo = fields.One2many(
        "eso.11.ideperiodo",
        "eso11_idePeriodo_ideADC_id",
        string="Identificação do período de referência",
        help=(
            "Identificação do período de referência da "
            "remuneração\nDESCRICAO_COMPLETA:Identificação do período ao qual "
            "se referem as diferenças de remuneração.\nCHAVE_GRUPO: {perRef}"
        ),
    )


class IdePeriodo(models.AbstractModel):
    """Identificação do período de referência da remuneração
    DESCRICAO_COMPLETA:Identificação do período ao qual se referem as diferenças de
    remuneração.
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtDeslig.InfoDeslig.VerbasResc.DmDev.InfoPerAnt.IdeAdc.IdePeriodo"
    )

    eso11_perRef = fields.Char(
        string="período ao qual se refere o complemento",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "período ao qual se refere o complemento de remuneração, no "
            "formato AAAA-MM.\nValidação: Deve ser igual ou anterior ao "
            "mês/ano da data do desligamento, informada em "
            "{dtDeslig}(2299_infoDeslig_dtDeslig).\nDeve ser informado no "
            "formato AAAA-MM.\nSe {tpAcConv}(../tpAcConv) = [H], deve ser "
            "anterior ao início dos eventos periódicos para o empregador no "
            "eSocial."
        ),
    )

    eso11_ideEstabLot = fields.One2many(
        "eso.11.tideestablot",
        "eso11_ideEstabLot_idePeriodo_id",
        string="Identificação do estabelecimento",
        xsd_type="T_ideEstabLot",
        help=(
            "Identificação do estabelecimento e "
            "lotação\nDESCRICAO_COMPLETA:Identificação do estabelecimento e da"
            " lotação aos quais se referem as diferenças de remuneração do mês"
            " identificado no grupo superior.\nCHAVE_GRUPO: {tpInsc}, "
            "{nrInsc}, {codLotacao}"
        ),
    )


class ProcCs(models.AbstractModel):
    """Informação sobre processo judicial que suspende a exigibilidade da
    Contribuição Social Rescisória.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.proccs"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.VerbasResc.ProcCs"

    eso11_nrProcJud = fields.Char(
        string="nrProcJud", xsd_required=True, xsd_type="TS_nrProcJud_1_7"
    )


class RemunAposDeslig(models.AbstractModel):
    """Informações sobre a quarentena remunerada ou outra situação de
    desligamento com data anterior
    DESCRICAO_COMPLETA:Informações sobre a "quarentena" remunerada de trabalhador
    desligado ou outra situação de desligamento com data anterior.
    O grupo deve ser preenchido apenas no caso do trabalhador que recebe
    remuneração após o desligamento por estar impossibilitado de exercer
    atividade remunerada, no caso de desligamento reconhecido judicialmente com
    data anterior a competências com remunerações já informadas ou em caso de
    concessão de aposentadoria de servidor com data anterior a competências com
    remunerações já informadas no eSocial.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.remunaposdeslig"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.RemunAposDeslig"

    eso11_indRemun = fields.Selection(REMUNAPOSDESLIG_INDREMUN, string="indRemun")

    eso11_dtFimRemun = fields.Date(
        string="a data final da quarentena",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data final da quarentena a que está sujeito o trabalhador. No "
            "caso de desligamento reconhecido judicialmente ou de concessão de"
            " aposentadoria de servidor com data anterior a competências com "
            "remunerações já informadas no eSocial, informar o último dia "
            "trabalhado.\nValidação: Deve ser uma data posterior a "
            "{dtDeslig}(2299_infoDeslig_dtDeslig)."
        ),
    )


class ConsigFgts(models.AbstractModel):
    """Informações sobre operação de crédito consignado com garantia de FGTS.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.consigfgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtDeslig.InfoDeslig.ConsigFgts"

    eso11_insConsig = fields.Char(string="insConsig", xsd_required=True)

    eso11_nrContr = fields.Char(string="nrContr", xsd_required=True)
