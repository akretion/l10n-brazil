# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSIND13,
    TSINDSIMPLES,
    TSNATATIVIDADE,
    TSSIMNAO,
    TSTPACCONV,
    TSTPINSC1234,
    TIdeEmpregador,
    TIdeEventoRetornoTrab,
    TSucessaoVinc,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtBasesTrab/v_S_01_01_00"

"Código de Receita - CR da contribuição descontada do trabalhador."
CALCTERC_TPCR = [
    ("121802", "Contribuição ao SEST, descontada do transportador autônomo"),
    ("122102", "Contribuição ao SENAT, descontada do transportador autônomo"),
]

"Tipo de valor que influi na apuração da contribuição devida."
DETINFOPERREF_TPVRPERREF = [
    ("11", "Base de cálculo da contribuição previdenciária normal"),
    (
        "12",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 15 anos de contribuição",
    ),
    (
        "13",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 20 anos de contribuição",
    ),
    (
        "14",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 25 anos de contribuição",
    ),
    (
        "15",
        "Base de cálculo da contribuição previdenciária adicional normal - Exclusiva do empregador",
    ),
    (
        "16",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 15 anos de contribuição - Exclusiva do empregador",
    ),
    (
        "17",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 20 anos de contribuição - Exclusiva do empregador",
    ),
    (
        "18",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 25 anos de contribuição - Exclusiva do empregador",
    ),
    ("19", "Base de cálculo da contribuição previdenciária exclusiva do empregado"),
    (
        "21",
        "Valor total descontado do trabalhador para recolhimento à Previdência Social",
    ),
    ("22", "Valor descontado do trabalhador para recolhimento ao SEST"),
    ("23", "Valor descontado do trabalhador para recolhimento ao SENAT"),
    ("31", "Valor pago ao trabalhador a título de salário-família"),
    ("32", "Valor pago ao trabalhador a título de salário-maternidade"),
]

"Tipo de valor que influi na apuração da contribuição devida."
INFOBASECS_TPVALOR = [
    ("11", "Base de cálculo da contribuição previdenciária normal"),
    (
        "12",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 15 anos de contribuição",
    ),
    (
        "13",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 20 anos de contribuição",
    ),
    (
        "14",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 25 anos de contribuição",
    ),
    (
        "15",
        "Base de cálculo da contribuição previdenciária adicional normal - Exclusiva do empregador",
    ),
    (
        "16",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 15 anos de contribuição - Exclusiva do empregador",
    ),
    (
        "17",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 20 anos de contribuição - Exclusiva do empregador",
    ),
    (
        "18",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 25 anos de contribuição - Exclusiva do empregador",
    ),
    ("19", "Base de cálculo da contribuição previdenciária exclusiva do empregado"),
    (
        "21",
        "Valor total descontado do trabalhador para recolhimento à Previdência Social",
    ),
    ("22", "Valor descontado do trabalhador para recolhimento ao SEST"),
    ("23", "Valor descontado do trabalhador para recolhimento ao SENAT"),
    ("31", "Valor pago ao trabalhador a título de salário-família"),
    ("32", "Valor pago ao trabalhador a título de salário-maternidade"),
    (
        "41",
        "Base de cálculo da contribuição previdenciária normal - Categorias 107 e 108",
    ),
    (
        "42",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 15 anos de contribuição - Categorias 107 e 108",
    ),
    (
        "43",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 20 anos de contribuição - Categorias 107 e 108",
    ),
    (
        "44",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 25 anos de contribuição - Categorias 107 e 108",
    ),
    (
        "45",
        "Base de cálculo da contribuição previdenciária adicional normal - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "46",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 15 anos de contribuição - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "47",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 20 anos de contribuição - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "48",
        "Base de cálculo da contribuição previdenciária adicional para o financiamento dos benefícios de aposentadoria especial após 25 anos de contribuição - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "49",
        "Base de cálculo da contribuição previdenciária exclusiva do empregado - Categorias 107 e 108",
    ),
    (
        "81",
        "Incidência suspensa em decorrência de decisão judicial - Base de cálculo - BC da Contribuição Previdenciária - CP normal - Categorias 107 e 108",
    ),
    (
        "82",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 15 anos de trabalho - Categorias 107 e 108",
    ),
    (
        "83",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 20 anos de trabalho - Categorias 107 e 108",
    ),
    (
        "84",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 25 anos de trabalho - Categorias 107 e 108",
    ),
    (
        "85",
        "Incidência suspensa em decorrência de decisão judicial - BC CP normal - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "86",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 15 anos de trabalho - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "87",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 20 anos de trabalho - Exclusiva do empregador - Categorias 107 e 108",
    ),
    (
        "88",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 25 anos de trabalho - Exclusiva do empregador - Categorias 107 e 108",
    ),
    ("91", "Incidência suspensa em decorrência de decisão judicial - BC CP normal"),
    (
        "92",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 15 anos de trabalho",
    ),
    (
        "93",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 20 anos de trabalho",
    ),
    (
        "94",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 25 anos de trabalho",
    ),
    (
        "95",
        "Incidência suspensa em decorrência de decisão judicial - BC CP normal - Exclusiva do empregador",
    ),
    (
        "96",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 15 anos de trabalho - Exclusiva do empregador",
    ),
    (
        "97",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 20 anos de trabalho - Exclusiva do empregador",
    ),
    (
        "98",
        "Incidência suspensa em decorrência de decisão judicial - BC CP aposentadoria especial aos 25 anos de trabalho - Exclusiva do empregador",
    ),
]

"""Código de Receita - CR da contribuição descontada do trabalhador.
    Validação: Se {indApuracao}(5001_ideEvento_indApuracao) = [2], deve ser igual a
    [108221, 108222, 108223, 108224, 108225, 109921, 109922]."""
INFOCPCALC_TPCR = [
    (
        "108201",
        "Contribuição Previdenciária - CP descontada do segurado empregado/avulso",
    ),
    (
        "108202",
        "CP descontada do segurado empregado rural curto prazo - Lei 11.718/2008",
    ),
    ("108203", "CP descontada do segurado empregado doméstico"),
    ("108204", "CP descontada do segurado especial curto prazo - Lei 11.718/2008"),
    ("108205", "CP descontada do segurado empregado do segurado especial"),
    ("108207", "CP descontada do segurado empregado do MEI"),
    ("108221", "CP descontada do segurado empregado/avulso 13° salário"),
    (
        "108222",
        "CP descontada do segurado empregado rural curto prazo 13° salário - Lei 11.718/2008",
    ),
    ("108223", "CP descontada do segurado empregado doméstico 13° salário"),
    (
        "108224",
        "CP descontada do segurado especial curto prazo 13° salário - Lei 11.718/2008",
    ),
    ("108225", "CP descontada do segurado empregado do segurado especial 13° salário"),
    ("109901", "CP descontada do contribuinte individual, alíquota de 11%"),
    ("109902", "CP descontada do contribuinte individual, alíquota de 20%"),
    (
        "109921",
        "CP descontada do contribuinte individual, alíquota de 11% - 13º salário",
    ),
    (
        "109922",
        "CP descontada do contribuinte individual, alíquota de 20% - 13º salário",
    ),
]


class ESocial(models.AbstractModel):
    "S-5001 - Informações das Contribuições Sociais por Trabalhador"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtBasesTrab = fields.Many2one(
        comodel_name="eso.11.evtbasestrab",
        string="Evento Informações",
        xsd_required=True,
        help=(
            "Evento Informações das Contribuições Sociais por "
            "Trabalhador.\nCHAVE_GRUPO: {Id}"
        ),
    )


class EvtBasesTrab(models.AbstractModel):
    """Evento Informações das Contribuições Sociais por Trabalhador.
    CHAVE_GRUPO: {Id}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtbasestrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoretornotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_retorno_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideTrabalhador = fields.Many2one(
        comodel_name="eso.11.idetrabalhador",
        string="Identificação do trabalhador",
        xsd_required=True,
        help="Identificação do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}",
    )

    eso11_infoCpCalc = fields.One2many(
        "eso.11.infocpcalc",
        "eso11_infoCpCalc_evtBasesTrab_id",
        string="Cálculo da contribuição previdenciária",
        help=(
            "Cálculo da contribuição previdenciária do "
            "segurado\nDESCRICAO_COMPLETA:Cálculo da contribuição "
            "previdenciária do segurado, incidente sobre a remuneração do "
            "período de apuração e de períodos anteriores informada nos "
            "eventos S-1200, S-2299 e S-2399.\nCHAVE_GRUPO: "
            "{tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoCp = fields.Many2one(
        comodel_name="eso.11.infocp",
        string="Informações sobre bases e valores",
        help=(
            "Informações sobre bases e valores das contribuições "
            "sociais\nDESCRICAO_COMPLETA:Informações sobre bases de cálculo, "
            "descontos e deduções de contribuições sociais devidas à "
            "Previdência Social e a Outras Entidades e Fundos, referentes à "
            "remuneração do período de apuração e de períodos anteriores "
            "informada nos eventos S-1200, S-2299 e S-2399.\nCONDICAO_GRUPO: "
            "OC"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id_retorno")


class IdeTrabalhador(models.AbstractModel):
    """Identificação do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.IdeTrabalhador"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfRetorno"
    )

    eso11_infoCompl = fields.Many2one(
        comodel_name="eso.11.infocompl",
        string="Informações complementares",
        help=(
            "Informações complementares do trabalhador e do "
            "contrato.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_procJudTrab = fields.One2many(
        "eso.11.procjudtrab",
        "eso11_procJudTrab_ideTrabalhador_id",
        string="Processos judiciais do trabalhador",
        help=(
            "Processos judiciais do "
            "trabalhador\nDESCRICAO_COMPLETA:Informações sobre processos "
            "judiciais do trabalhador com decisão favorável quanto à não "
            "incidência ou alterações na incidência de contribuição "
            "previdenciária.\nCHAVE_GRUPO: {nrProcJud}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoCompl(models.AbstractModel):
    """Informações complementares do trabalhador e do contrato.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocompl"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.IdeTrabalhador.InfoCompl"

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.tsucessaovinc",
        string="Grupo de informações da sucessão",
        xsd_type="T_sucessaoVinc",
        help=(
            "Grupo de informações da sucessão de vínculo "
            "trabalhista\nDESCRICAO_COMPLETA:Grupo de informações da sucessão "
            "de vínculo trabalhista.\nEvento de origem: "
            "S-1200.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoInterm = fields.One2many(
        "eso.11.infointerm",
        "eso11_infoInterm_infoCompl_id",
        string="Informações relativas",
        help=(
            "Informações relativas ao trabalho "
            "intermitente\nDESCRICAO_COMPLETA:Informações relativas ao "
            "trabalho intermitente.\nEvento de origem: S-1200 ou "
            "S-2299.\nCHAVE_GRUPO: {dia}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoComplCont = fields.One2many(
        "eso.11.infocomplcont",
        "eso11_infoComplCont_infoCompl_id",
        string="Informações complementares contratuais",
        help=(
            "Informações complementares contratuais do "
            "trabalhador\nDESCRICAO_COMPLETA:Informações complementares "
            "contratuais do trabalhador.\nEvento de origem: "
            "S-1200.\nCHAVE_GRUPO: {codCBO}, {natAtividade}, "
            "{qtdDiasTrab}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoInterm(models.AbstractModel):
    """Informações relativas ao trabalho intermitente
    DESCRICAO_COMPLETA:Informações relativas ao trabalho intermitente.
    Evento de origem: S-1200 ou S-2299.
    CHAVE_GRUPO: {dia}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infointerm"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.IdeTrabalhador.InfoCompl.InfoInterm"

    eso11_dia = fields.Char(
        string="Dia do mês efetivamente trabalhado",
        xsd_required=True,
        xsd_type="TS_dia",
        help=(
            "Dia do mês efetivamente trabalhado pelo empregado com contrato de"
            " trabalho intermitente."
        ),
    )


class InfoComplCont(models.AbstractModel):
    """Informações complementares contratuais do trabalhador
    DESCRICAO_COMPLETA:Informações complementares contratuais do trabalhador.
    Evento de origem: S-1200.
    CHAVE_GRUPO: {codCBO}, {natAtividade}, {qtdDiasTrab}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplcont"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.IdeTrabalhador.InfoCompl.InfoComplCont"

    eso11_codCBO = fields.Char(
        string="Classificação Brasileira de Ocupações",
        xsd_required=True,
        xsd_type="TS_cbo",
        help="Classificação Brasileira de Ocupações - CBO.",
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE, string="Natureza da atividade", xsd_type="TS_natAtividade"
    )

    eso11_qtdDiasTrab = fields.Char(
        string="Informação prestada exclusivamente",
        xsd_type="TS_dia",
        help=(
            "Informação prestada exclusivamente pelo segurado especial em caso"
            " de contratação de contribuinte individual, indicando a "
            "quantidade de dias trabalhados pelo mesmo."
        ),
    )


class ProcJudTrab(models.AbstractModel):
    """Processos judiciais do trabalhador
    DESCRICAO_COMPLETA:Informações sobre processos judiciais do trabalhador com
    decisão favorável quanto à não incidência ou alterações na incidência de
    contribuição previdenciária.
    CHAVE_GRUPO: {nrProcJud}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.procjudtrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.IdeTrabalhador.ProcJudTrab"

    eso11_nrProcJud = fields.Char(
        string="número do processo judicial",
        xsd_required=True,
        xsd_type="TS_nrProcJud",
        help=(
            "número do processo judicial.\nOrigem: campo {nrProcJud} de "
            "S-1200, S-2299 ou S-2399, se {tpTrib} no evento de origem for "
            "igual a [2]."
        ),
    )

    eso11_codSusp = fields.Char(
        string="Código do indicativo da suspensão",
        xsd_required=True,
        xsd_type="TS_codSusp",
        help=(
            "Código do indicativo da suspensão, atribuído pelo empregador em "
            "S-1070.\nOrigem: campo {codSusp} de S-1200, S-2299 ou S-2399, se "
            "{tpTrib} no evento de origem for igual a [2]."
        ),
    )


class InfoCpCalc(models.AbstractModel):
    """Cálculo da contribuição previdenciária do segurado
    DESCRICAO_COMPLETA:Cálculo da contribuição previdenciária do segurado,
    incidente sobre a remuneração do período de apuração e de períodos
    anteriores informada nos eventos S-1200, S-2299 e S-2399.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocpcalc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCpCalc"

    eso11_tpCR = fields.Selection(INFOCPCALC_TPCR, string="tpCR", xsd_required=True)

    eso11_vrCpSeg = fields.Float(
        string="Valor da contribuição do segurado",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição do segurado, devida à Previdência Social, "
            "calculada segundo as regras da legislação em vigor, por "
            "CR.\nValidação: 1. Se {indMV} do S-1200/S-2299/S-2399 = [3], "
            "{vrCpSeg}(./vrCpSeg) = [0]; portanto, não há CR.\n\n2. Se {indMV}"
            " do S-1200/S-2299/S-2399 = [1, 2], efetuar o somatório das "
            "ocorrências do campo {vlrRemunOE} e o somatório de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19], resultando em [TotalRemun]. "
            "Este procedimento visa a identificação da(s) alíquota(s) "
            "aplicável(eis):\n2.1. Se {indMV} do S-1200/S-2299/S-2399 = [1], "
            "aplicar a(s) alíquota(s) conforme a categoria do segurado sobre a"
            " remuneração paga pelo declarante (somatório de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19]), observado o limite máximo do "
            "salário de contribuição.\n2.2. Se {indMV} do S-1200/S-2299/S-2399"
            " = [2]:\na) Se [TotalRemun] ultrapassar o limite máximo do "
            "salário de contribuição, aplicar a(s) alíquota(s) conforme a "
            "categoria do segurado sobre a diferença entre o referido limite "
            "máximo e o somatório das ocorrências do campo {vlrRemunOE}. Para "
            "os períodos de apuração iguais ou posteriores a 03/2020, observar"
            " a(s) faixa(s) de remuneração já tributada(s) em outra(s) "
            "empresa(s) nas categorias empregado/avulso/agente público.\nb) Se"
            " [TotalRemun] for inferior ao limite máximo do salário de "
            "contribuição:\nb1) Para as categorias empregado/avulso/agente "
            "público: somar {vlrRemunOE} destas mesmas categorias com o "
            "somatório de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19] e aplicar a(s) alíquota(s). "
            "Para os períodos de apuração iguais ou posteriores a 03/2020, "
            "observar a(s) faixa(s) de remuneração já tributada(s) em outra(s)"
            " empresa(s) nas categorias empregado/avulso/agente público.\nb2) "
            "Para categoria contribuinte individual: aplicar a alíquota sobre "
            "a remuneração paga pelo declarante (somatório de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19]).\n\n3. Se não for informado o "
            "grupo {infoMV} do S-1200/S-2299/S-2399:\na) Se o trabalhador "
            "presta serviço para a empresa declarante em apenas uma categoria "
            "({codCateg}(5001_infoCp_ideEstabLot_infoCategIncid_codCateg)), "
            "efetuar o somatório de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19] e aplicar a(s) alíquota(s) "
            "conforme a categoria.\nb) Se o trabalhador presta serviço para a "
            "empresa declarante em mais de uma categoria ({codCateg}(5001_info"
            "Cp_ideEstabLot_infoCategIncid_codCateg)):\nI. Efetuar o somatório"
            " de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19] para todas as categorias de "
            "segurado empregado/avulso/agente público e aplicar a(s) "
            "alíquota(s) correta(s) conforme faixa salarial, observado o "
            "limite máximo do salário de contribuição.\nII. Caso o somatório "
            "do item I não tenha atingido o limite máximo do salário de "
            "contribuição, efetuar o somatório de "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "quando {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseC"
            "S_tpValor) = [11, 12, 13, 14, 19] para todas as categorias "
            "diferentes de segurado empregado e aplicar a alíquota correta "
            "conforme a categoria, observado o limite máximo do salário de "
            "contribuição.\n\nOBS.: a) No caso de "
            "{indApuracao}(5001_ideEvento_indApuracao) = [1], o cálculo deve "
            "ser efetuado separadamente para {infoBaseCS/ind13}(5001_infoCp_id"
            "eEstabLot_infoCategIncid_infoBaseCS_ind13) = [0] e {infoBaseCS/in"
            "d13}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_ind13) = "
            "[1]. A soma de ambos os cálculos deve corresponder ao valor de "
            "{vrCpSeg}(./vrCpSeg).\nb) Aplica-se a alíquota de 20% para o "
            "cálculo da contribuição previdenciária a ser descontada de "
            "remuneração de trabalhador pertencente às categorias [731, 734], "
            "quando o empregador for cooperativa de trabalho "
            "({indCoop}(1000_infoEmpregador_inclusao_infoCadastro_indCoop) em "
            "S-1000 = [1]), ou pertencente ao grupo 'Contribuinte Individual',"
            " quando o Empregador tiver {classTrib}(5001_infoCp_classTrib) = "
            "[04, 70, 80]). Caso o trabalhador receba remuneração da empresa "
            "em outra categoria do grupo 'Contribuinte Individual', primeiro "
            "deve ser aplicado o desconto sobre essa categoria (7XX) e depois "
            "sobre a remuneração das categorias [731, 734], observado o limite"
            " máximo do salário de contribuição.\nc) {vrCpSeg}(./vrCpSeg) deve"
            " ser igual a {vrDescSeg}(./vrDescSeg) nas seguintes "
            "situações:\nc1) Se houver informações em {infoPerAnt} na "
            "composição de {valor}(5001_infoCp_ideEstabLot_infoCategIncid_info"
            "BaseCS_valor);\nc2) Se houver informação de {procJudTrab} com "
            "{tpTrib} = [2] nos eventos que contenham informações de "
            "remuneração (S-1200, S-2299 e S-2399);\nc3) Se houver processo do"
            " empregador informado em S-1010, contestando incidência de "
            "contribuição previdenciária em rubricas utilizadas na composição "
            "da remuneração do trabalhador;\nc4) Se, no período de apuração "
            "mensal, houver remuneração referente a 13º salário "
            "({codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [12, 14, 16, 22, 26, 32, 92, 94, 96, 98]). Nesse caso, o"
            " campo {vrCpSeg}(./vrCpSeg) será igual ao valor calculado sobre a"
            " remuneração mensal acrescido do desconto sobre a remuneração "
            "relativa a 13° salário informado pelo empregador;\nc5) Se "
            "{procEmi} do evento S-1200/S-2299/S-2399 for igual a [2, 4, "
            "22];\nc6) Para as categorias do grupo 'Contribuinte Individual' "
            "(7XX), se o campo {dtTrans11096}(1000_infoEmpregador_inclusao_inf"
            "oCadastro_dtTrans11096) em S-1000 for informado.\nd) No caso de "
            "trabalhador categoria = [102], utilizar somente a alíquota de 8%,"
            " observado o limite máximo do salário de contribuição.\ne) No "
            "caso de empregador com {classTrib}(5001_infoCp_classTrib) = [21, "
            "22], exceto se "
            "{ideEstabLot/tpInsc}(5001_infoCp_ideEstabLot_tpInsc) = [4], ou "
            "com {classTrib}(5001_infoCp_classTrib) = [60], não calcular para "
            "a categoria do grupo 'Contribuinte Individual' (7XX). O valor "
            "deve ser zerado.\nf) Não calcular quando a categoria do "
            "trabalhador for [741] (MEI). O valor deve ser zerado.\ng) Não "
            "calcular quando a lotação tributária for [91]. O valor deve ser "
            "zerado."
        ),
    )

    eso11_vrDescSeg = fields.Float(
        string="Valor efetivamente descontado",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor efetivamente descontado do segurado, correspondente a {tpVa"
            "lor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_tpValor) ="
            " [21] do correspondente {infoCpCalc/tpCR}(./tpCR)."
        ),
    )


class InfoCp(models.AbstractModel):
    """Informações sobre bases e valores das contribuições sociais
    DESCRICAO_COMPLETA:Informações sobre bases de cálculo, descontos e deduções de
    contribuições sociais devidas à Previdência Social e a Outras Entidades e
    Fundos, referentes à remuneração do período de apuração e de períodos
    anteriores informada nos eventos S-1200, S-2299 e S-2399.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp"

    eso11_classTrib = fields.Char(string="classTrib", xsd_required=True)

    eso11_ideEstabLot = fields.One2many(
        "eso.11.ideestablot",
        "eso11_ideEstabLot_infoCp_id",
        string="Identificação do estabelecimento",
        help=(
            "Identificação do estabelecimento ou obra e da lotação "
            "tributária\nDESCRICAO_COMPLETA:Identificação do estabelecimento "
            "ou obra de construção civil e da lotação "
            "tributária.\nCHAVE_GRUPO: {tpInsc}, {nrInsc}, {codLotacao}"
        ),
    )


class IdeEstabLot(models.AbstractModel):
    """Identificação do estabelecimento ou obra e da lotação tributária
    DESCRICAO_COMPLETA:Identificação do estabelecimento ou obra de construção civil
    e da lotação tributária.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codLotacao}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestablot"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_3_4,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2_3_4",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nEvento de origem: S-1200, S-2299 ou S-2399."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo "
            "{ideEstabLot/tpInsc}(./tpInsc).\nEvento de origem: S-1200, S-2299"
            " ou S-2399."
        ),
    )

    eso11_codLotacao = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador para a lotação "
            "tributária.\nEvento de origem: S-1200, S-2299 ou S-2399."
        ),
    )

    eso11_infoCategIncid = fields.One2many(
        "eso.11.infocategincid",
        "eso11_infoCategIncid_ideEstabLot_id",
        string="Informações relativas à matrícula",
        help=(
            "Informações relativas à matrícula e categoria do trabalhador e "
            "tipos de incidências.\nCHAVE_GRUPO: {matricula}, {codCateg}, "
            "{indSimples}"
        ),
    )


class InfoCategIncid(models.AbstractModel):
    """Informações relativas à matrícula e categoria do trabalhador e tipos de
    incidências.
    CHAVE_GRUPO: {matricula}, {codCateg}, {indSimples}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocategincid"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot.InfoCategIncid"

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_matricula_retorno",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nEvento de origem: "
            "S-1200, S-2299 ou S-2399."
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador, conforme Tabela "
            "01.\nValidação: Se o evento de origem for S-1200, retornar o "
            "código de categoria informado nesse evento. Se o evento de origem"
            " for S-2299 ou S-2399, retornar o código de categoria existente "
            "no Registro de Eventos Trabalhistas - RET."
        ),
    )

    eso11_indSimples = fields.Selection(
        TS_INDSIMPLES,
        string="Indicador de contribuição substituída",
        xsd_type="TS_indSimples",
        help=(
            "Indicador de contribuição substituída.\nEvento de origem: S-1200,"
            " S-2299 ou S-2399."
        ),
    )

    eso11_infoBaseCS = fields.One2many(
        "eso.11.infobasecs",
        "eso11_infoBaseCS_infoCategIncid_id",
        string="Informações sobre bases de cálculo",
        help=(
            "Informações sobre bases de cálculo, descontos e deduções de "
            "CS\nDESCRICAO_COMPLETA:Informações sobre bases de cálculo, "
            "descontos e deduções de contribuições sociais devidas à "
            "Previdência Social e a Outras Entidades e Fundos.\nEvento de "
            "origem: S-1200, S-2299 ou S-2399.\nCHAVE_GRUPO: {ind13}, "
            "{tpValor}\nCONDICAO_GRUPO: N (se "
            "{classTrib}(5001_infoCp_classTrib) = [10] e "
            "{codCateg}(../codCateg) = [202]); O (nos demais casos)"
        ),
    )

    eso11_calcTerc = fields.One2many(
        "eso.11.calcterc",
        "eso11_calcTerc_infoCategIncid_id",
        string="Cálculo",
        help=(
            "Cálculo das contribuições sociais devidas a Outras Entidades e "
            "Fundos.\nCHAVE_GRUPO: {tpCR}\nCONDICAO_GRUPO: OC (se "
            "{ideEmpregador/tpInsc}(5001_ideEmpregador_tpInsc) = [1]); N (nos "
            "demais casos)"
        ),
    )

    eso11_infoPerRef = fields.One2many(
        "eso.11.infoperref",
        "eso11_infoPerRef_infoCategIncid_id",
        string="Informações de remuneração por período",
        help=(
            "Informações de remuneração por período de "
            "referência.\nCONDICAO_GRUPO: OC\nCHAVE_GRUPO: {perRef}"
        ),
    )


class InfoBaseCs(models.AbstractModel):
    """Informações sobre bases de cálculo, descontos e deduções de CS
    DESCRICAO_COMPLETA:Informações sobre bases de cálculo, descontos e deduções de
    contribuições sociais devidas à Previdência Social e a Outras Entidades e
    Fundos.
    Evento de origem: S-1200, S-2299 ou S-2399.
    CHAVE_GRUPO: {ind13}, {tpValor}
    CONDICAO_GRUPO: N (se {classTrib}(5001_infoCp_classTrib) = [10] e
    {codCateg}(../codCateg) = [202]); O (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobasecs"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot.InfoCategIncid.InfoBaseCs"

    eso11_ind13 = fields.Selection(
        TS_IND13, string="ind13", xsd_required=True, xsd_type="TS_ind13"
    )

    eso11_tpValor = fields.Selection(
        INFOBASECS_TPVALOR, string="tpValor", xsd_required=True
    )

    eso11_valor = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor da base de cálculo, dedução ou desconto da contribuição "
            "social devida à Previdência Social ou a Outras Entidades e "
            "Fundos, conforme definido no campo "
            "{tpValor}(./tpValor).\nValidação: Deve ser maior que 0 "
            "(zero).\nDeve corresponder ao somatório dos valores informados no"
            " campo {vrRubr} em S-1200 e S-2299 (grupos {infoPerApur} e "
            "{infoPerAnt}), e também em S-2399, obedecendo ao que segue:\na) "
            "Somar os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4], observando a tabela de relacionamento "
            "abaixo:\n{tpValor}(./tpValor) = [11]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado);\n{tpValor}(./tpValor) = [12]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = "
            "[2];\n{tpValor}(./tpValor) = [13]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = "
            "[3];\n{tpValor}(./tpValor) = [14]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = "
            "[4];\n{tpValor}(./tpValor) = [15]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado);\n{tpValor}(./tpValor) = [16]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = "
            "[2];\n{tpValor}(./tpValor) = [17]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = "
            "[3];\n{tpValor}(./tpValor) = [18]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = "
            "[4];\n{tpValor}(./tpValor) = [19], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [15, 16, 21, 22];\n{tpValor}(./tpValor) = [31], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [51];\n{tpValor}(./tpValor) = [32], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [21, 22] ou "
            "({natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em "
            "S-1010 = [4050, 4051] com "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [9X]);\n{tpValor}(./tpValor) = [41]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado), observado o limite para {codCateg}(../codCateg) = "
            "[107, 108];\n{tpValor}(./tpValor) = [42]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = [2], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [43]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = [3], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [44]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = [4], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [45]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado), observado o limite para {codCateg}(../codCateg) = "
            "[107, 108];\n{tpValor}(./tpValor) = [46]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = [2], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [47]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = [3], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [48]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = [4], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [49], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [15, 16, 21, 22], observado o limite para "
            "{codCateg}(../codCateg) = [107, 108];\n{tpValor}(./tpValor) = "
            "[81]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado), observado o limite para {codCateg}(../codCateg) = "
            "[107, 108];\n{tpValor}(./tpValor) = [82]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e {grauExp} em S-1200/S-2299 = [2], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [83]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e {grauExp} em S-1200/S-2299 = [3], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [84]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e {grauExp} em S-1200/S-2299 = [4], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [85]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado), observado o limite para {codCateg}(../codCateg) = "
            "[107, 108];\n{tpValor}(./tpValor) = [86]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e {grauExp} em S-1200/S-2299 = [2], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [87]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e {grauExp} em S-1200/S-2299 = [3], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [88]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e {grauExp} em S-1200/S-2299 = [4], observado o"
            " limite para {codCateg}(../codCateg) = [107, "
            "108];\n{tpValor}(./tpValor) = [91]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado);\n{tpValor}(./tpValor) = [92]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e {grauExp} em S-1200/S-2299 = "
            "[2];\n{tpValor}(./tpValor) = [93]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e {grauExp} em S-1200/S-2299 = "
            "[3];\n{tpValor}(./tpValor) = [94]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [91, 92] e {grauExp} em S-1200/S-2299 = "
            "[4];\n{tpValor}(./tpValor) = [95]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado);\n{tpValor}(./tpValor) = [96]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e {grauExp} em S-1200/S-2299 = "
            "[2];\n{tpValor}(./tpValor) = [97]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e {grauExp} em S-1200/S-2299 = "
            "[3];\n{tpValor}(./tpValor) = [98]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [95, 96] e {grauExp} em S-1200/S-2299 = [4].\n\nb) Somar"
            " os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3], observando a tabela de relacionamento "
            "abaixo:\n{tpValor}(./tpValor) = [21], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [31, 32];\n{tpValor}(./tpValor) = [22], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [34];\n{tpValor}(./tpValor) = [23], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [35].\n\n* Caso "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) da "
            "rubrica em S-1010 seja igual a [91, 92, 93, 94] e "
            "{indSusp}(1070_infoProcesso_inclusao_dadosProc_infoSusp_indSusp) "
            "do respectivo processo em S-1070 seja diferente de [90] (decisão "
            "definitiva), o valor também deve ser computado na composição das "
            "bases do {tpValor}(./tpValor) = [11, 12, 13, 14, 41, 42, 43, "
            "44].\nSe {codCateg}(../codCateg) = [107, 108], caso "
            "{tpValor}(./tpValor) = [11] seja maior que o limite do salário-"
            "base para essas categorias, então {tpValor}(./tpValor) = [81] é "
            "igual a {tpValor}=[41] – ({tpValor}=[11] – {tpValor}=[91]). Se "
            "{tpValor}(./tpValor) = [81] resultar negativo, informar 0 (zero)."
            " O mesmo se aplica para {tpValor}(./tpValor) = [82, 83, 84].\n** "
            "Caso {codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) "
            "da rubrica em S-1010 seja igual a [95, 96, 97, 98] e "
            "{indSusp}(1070_infoProcesso_inclusao_dadosProc_infoSusp_indSusp) "
            "do respectivo processo em S-1070 seja diferente de [90] (decisão "
            "definitiva), o valor também deve ser computado na composição das "
            "bases do {tpValor}(./tpValor) = [15, 16, 17, 18, 45, 46, 47, "
            "48].\nSe {codCateg}(../codCateg) = [107, 108], caso "
            "{tpValor}(./tpValor) = [15] seja maior que o limite do salário-"
            "base para essas categorias, então {tpValor}(./tpValor) = [85] é "
            "igual a {tpValor}=[45] – ({tpValor}=[15] – {tpValor}=[95]). Se "
            "{tpValor}(./tpValor) = [85] resultar negativo, informar 0 (zero)."
            " O mesmo se aplica para {tpValor}(./tpValor) = [86, 87, 88].\n***"
            " Caso "
            "{indSusp}(1070_infoProcesso_inclusao_dadosProc_infoSusp_indSusp) "
            "do respectivo processo em S-1070 seja igual a [90] (decisão "
            "definitiva), o valor não deve ser computado."
        ),
    )


class CalcTerc(models.AbstractModel):
    """Cálculo das contribuições sociais devidas a Outras Entidades e Fundos.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC (se {ideEmpregador/tpInsc}(5001_ideEmpregador_tpInsc) =
    [1]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.calcterc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot.InfoCategIncid.CalcTerc"

    eso11_tpCR = fields.Selection(CALCTERC_TPCR, string="tpCR", xsd_required=True)

    eso11_vrCsSegTerc = fields.Float(
        string="Valor da contribuição social devida",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição social devida a Outras Entidades ou Fundos,"
            " calculada segundo a legislação em vigor, por CR.\nValidação: "
            "{calcTerc/tpCR}(./tpCR) = [121802] - Somatório de "
            "{valor}(../infoBaseCS_valor) quando "
            "{tpValor}(../infoBaseCS_tpValor) = [11, 12, 13, 14], multiplicado"
            " pela alíquota de 1,5%, se {codCateg}(../codCateg) = [711, 712, "
            "734] (transportador autônomo) e "
            "{ideEmpregador/tpInsc}(5001_ideEmpregador_tpInsc) = "
            "[1];\n{calcTerc/tpCR}(./tpCR) = [122102] - Somatório de "
            "{valor}(../infoBaseCS_valor) quando "
            "{tpValor}(../infoBaseCS_tpValor) = [11, 12, 13, 14], multiplicado"
            " pela alíquota de 1,0%, se {codCateg}(../codCateg) = [711, 712, "
            "734] (transportador autônomo) e "
            "{ideEmpregador/tpInsc}(5001_ideEmpregador_tpInsc) = [1].\nOBS.: "
            "No período de 04/2020 a 06/2020, as alíquotas devem ser 0,75% "
            "para o SEST e 0,5% para o SENAT."
        ),
    )

    eso11_vrDescTerc = fields.Float(
        string="Valor efetivamente descontado",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor efetivamente descontado do segurado, correspondente a "
            "{tpValor}(../infoBaseCS_tpValor) = [22, 23], do correspondente "
            "{calcTerc/tpCR}(./tpCR)."
        ),
    )


class InfoPerRef(models.AbstractModel):
    """Informações de remuneração por período de referência.
    CONDICAO_GRUPO: OC
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperref"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot.InfoCategIncid.InfoPerRef"

    eso11_perRef = fields.Char(
        string="período ao qual se refere a remuneração",
        xsd_required=True,
        xsd_type="TS_perApur",
        help=(
            "período ao qual se refere a remuneração.\nOrigem: "
            "{perApur}(5001_ideEvento_perApur) ou campo {perRef} de "
            "S-1200/S-2299."
        ),
    )

    eso11_ideADC = fields.One2many(
        "eso.11.ideadc",
        "eso11_ideADC_infoPerRef_id",
        string="Instrumento ou situação ensejadora",
        help=(
            "Instrumento ou situação ensejadora da remuneração em períodos "
            "anteriores\nDESCRICAO_COMPLETA:Identificação do instrumento ou "
            "situação ensejadora da remuneração relativa a períodos de "
            "apuração anteriores.\nEvento de origem: S-1200 ou S-2299 (exceto "
            "{remunSuc}(./remunSuc), cujo evento de origem somente é "
            "S-1200).\nCHAVE_GRUPO: {dtAcConv}, {tpAcConv}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_detInfoPerRef = fields.One2many(
        "eso.11.detinfoperref",
        "eso11_detInfoPerRef_infoPerRef_id",
        string="Detalhamento das informações",
        help=(
            "Detalhamento das informações de remuneração por período de "
            "referência\nDESCRICAO_COMPLETA:Detalhamento das informações de "
            "remuneração por período de referência. Deve ser preenchido com "
            "informações de {infoPerApur} e {infoPerAnt} do S-1200 e S-2299, e"
            " de {dmDev} do S-2399, quando houver.\nCHAVE_GRUPO: {ind13}, "
            "{tpVrPerRef}"
        ),
    )


class IdeAdc(models.AbstractModel):
    """Instrumento ou situação ensejadora da remuneração em períodos anteriores
    DESCRICAO_COMPLETA:Identificação do instrumento ou situação ensejadora da
    remuneração relativa a períodos de apuração anteriores.
    Evento de origem: S-1200 ou S-2299 (exceto {remunSuc}(./remunSuc), cujo evento
    de origem somente é S-1200).
    CHAVE_GRUPO: {dtAcConv}, {tpAcConv}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideadc"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot.InfoCategIncid.InfoPerRef.IdeAdc"
    )

    eso11_dtAcConv = fields.Date(
        string="Data da assinatura do acordo",
        xsd_type="xs:date",
        help=(
            "Data da assinatura do acordo, convenção coletiva, sentença "
            "normativa ou da conversão da licença saúde em acidente de "
            "trabalho."
        ),
    )

    eso11_tpAcConv = fields.Selection(
        TS_TPACCONV, string="tpAcConv", xsd_required=True, xsd_type="TS_tpAcConv"
    )

    eso11_dsc = fields.Char(string="dsc", xsd_required=True, xsd_type="TS_dsc")

    eso11_remunSuc = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se a remuneração é relativa",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se a remuneração é relativa a verbas de natureza salarial"
            " ou não salarial devidas pela empresa sucessora a empregados "
            "desligados ainda na sucedida."
        ),
    )


class DetInfoPerRef(models.AbstractModel):
    """Detalhamento das informações de remuneração por período de referência
    DESCRICAO_COMPLETA:Detalhamento das informações de remuneração por período de
    referência. Deve ser preenchido com informações de {infoPerApur} e
    {infoPerAnt} do S-1200 e S-2299, e de {dmDev} do S-2399, quando houver.
    CHAVE_GRUPO: {ind13}, {tpVrPerRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.detinfoperref"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesTrab.InfoCp.IdeEstabLot.InfoCategIncid.InfoPerRef.DetInfoPerRef"

    eso11_ind13 = fields.Selection(
        TS_IND13, string="ind13", xsd_required=True, xsd_type="TS_ind13"
    )

    eso11_tpVrPerRef = fields.Selection(
        DETINFOPERREF_TPVRPERREF, string="tpVrPerRef", xsd_required=True
    )

    eso11_vrPerRef = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor da base de cálculo, dedução ou desconto da contribuição "
            "social, conforme definido no campo "
            "{tpVrPerRef}(./tpVrPerRef).\nValidação: Deve ser maior que 0 "
            "(zero).\nDeve corresponder ao somatório dos valores informados no"
            " campo {vrRubr} em S-1200 e S-2299 (grupos {infoPerApur} e "
            "{infoPerAnt}), e também em S-2399, obedecendo ao que segue:\na) "
            "Somar os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4], observando a tabela de relacionamento "
            "abaixo:\n{tpVrPerRef}(./tpVrPerRef) = [11]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado);\n{tpVrPerRef}(./tpVrPerRef) = [12]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = "
            "[2];\n{tpVrPerRef}(./tpVrPerRef) = [13]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = "
            "[3];\n{tpVrPerRef}(./tpVrPerRef) = [14]*, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [11, 12] e {grauExp} em S-1200/S-2299 = "
            "[4];\n{tpVrPerRef}(./tpVrPerRef) = [15]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e ({grauExp} em S-1200/S-2299 = [1] ou não "
            "informado);\n{tpVrPerRef}(./tpVrPerRef) = [16]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = "
            "[2];\n{tpVrPerRef}(./tpVrPerRef) = [17]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = "
            "[3];\n{tpVrPerRef}(./tpVrPerRef) = [18]**, "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [13, 14] e {grauExp} em S-1200/S-2299 = "
            "[4];\n{tpVrPerRef}(./tpVrPerRef) = [19], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [15, 16, 21, 22];\n{tpVrPerRef}(./tpVrPerRef) = [31], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [51];\n{tpVrPerRef}(./tpVrPerRef) = [32], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [21, 22] ou "
            "({natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em "
            "S-1010 = [4050, 4051] com "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [9X]).\n\nb) Somar os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3], observando a tabela de relacionamento "
            "abaixo:\n{tpVrPerRef}(./tpVrPerRef) = [21], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [31, 32];\n{tpVrPerRef}(./tpVrPerRef) = [22], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [34];\n{tpVrPerRef}(./tpVrPerRef) = [23], "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) em "
            "S-1010 = [35].\n\n* Caso "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) da "
            "rubrica em S-1010 seja igual a [91, 92, 93, 94] e "
            "{indSusp}(1070_infoProcesso_inclusao_dadosProc_infoSusp_indSusp) "
            "do respectivo processo em S-1070 seja diferente de [90] (decisão "
            "definitiva), o valor deve ser computado na composição das bases "
            "do {tpVrPerRef}(./tpVrPerRef) = [11, 12, 13, 14].\n** Caso "
            "{codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) da "
            "rubrica em S-1010 seja igual a [95, 96, 97, 98] e "
            "{indSusp}(1070_infoProcesso_inclusao_dadosProc_infoSusp_indSusp) "
            "do respectivo processo em S-1070 seja diferente de [90] (decisão "
            "definitiva), o valor deve ser computado na composição das bases "
            "do {tpVrPerRef}(./tpVrPerRef) = [15, 16, 17, 18].\n*** Caso "
            "{indSusp}(1070_infoProcesso_inclusao_dadosProc_infoSusp_indSusp) "
            "do respectivo processo em S-1070 seja igual a [90] (decisão "
            "definitiva), o valor não deve ser computado."
        ),
    )
