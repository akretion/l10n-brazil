# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSSIMNAO,
    TIdeEmpregadorCnpj,
    TIdeEventoTrabPj,
    TIdeVinculo,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtCessao/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-2231 - Cessão/Exercício em Outro Órgão"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtCessao = fields.Many2one(
        comodel_name="eso.11.evtcessao",
        string="Evento Cessão/Exercício em Outro Órgão",
        xsd_required=True,
        help=(
            "Evento Cessão/Exercício em Outro Órgão.\nCHAVE_GRUPO: {Id}\nREGRA"
            ":REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:R"
            "EGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG\nREGRA:REGRA_EVENTO_POSTERIOR_C"
            "AT_OBITO\nREGRA:REGRA_EXCLUI_EVENTO_CESSAO\nREGRA:REGRA_EXISTE_IN"
            "FO_EMPREGADOR\nREGRA:REGRA_EXTEMP_REINTEGRACAO\nREGRA:REGRA_MESMO"
            "_PROCEMI\nREGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_VINCULO"
            "_ATIVO_NA_DTEVENTO"
        ),
    )


class EvtCessao(models.AbstractModel):
    """Evento Cessão/Exercício em Outro Órgão.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXCLUI_EVENTO_CESSAO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcessao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCessao"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabpj",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_PJ",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregadorcnpj",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador_cnpj",
    )

    eso11_ideVinculo = fields.Many2one(
        comodel_name="eso.11.tidevinculo",
        string="ideVinculo",
        xsd_required=True,
        xsd_type="T_ideVinculo",
    )

    eso11_infoCessao = fields.Many2one(
        comodel_name="eso.11.infocessao",
        string="Informações da cessão/exercício",
        xsd_required=True,
        help="Informações da cessão/exercício em outro órgão.",
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoCessao(models.AbstractModel):
    "Informações da cessão/exercício em outro órgão."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocessao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCessao.InfoCessao"

    eso11_iniCessao = fields.Many2one(
        comodel_name="eso.11.inicessao",
        string="Informações de início",
        choice="infocessao",
        xsd_choice_required=True,
        help=(
            "Informações de início da cessão/exercício em outro "
            "órgão.\nCHAVE_GRUPO: {dtIniCessao*}\nCONDICAO_GRUPO: O (se não "
            "for preenchido o grupo {fimCessao}(../fimCessao)); N (nos demais "
            "casos)"
        ),
    )

    eso11_fimCessao = fields.Many2one(
        comodel_name="eso.11.fimcessao",
        string="Informação de término",
        choice="infocessao",
        xsd_choice_required=True,
        help=(
            "Informação de término da cessão/exercício em outro "
            "órgão.\nCHAVE_GRUPO: {dtTermCessao*}\nCONDICAO_GRUPO: O (se não "
            "for preenchido o grupo {iniCessao}(../iniCessao)); N (nos demais "
            "casos)\nREGRA:REGRA_EXISTE_EVENTO_CESSAO"
        ),
    )


class IniCessao(models.AbstractModel):
    """Informações de início da cessão/exercício em outro órgão.
    CHAVE_GRUPO: {dtIniCessao*}
    CONDICAO_GRUPO: O (se não for preenchido o grupo {fimCessao}(../fimCessao)); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inicessao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCessao.InfoCessao.IniCessao"

    eso11_dtIniCessao = fields.Date(
        string="Data de início da cessão/exercício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início da cessão/exercício em outro órgão.\nValidação: "
            "Deve-se obedecer às seguintes regras:\na) Não pode ser posterior "
            "à data atual;\nb) Não pode existir evento de cessão/exercício em "
            "outro órgão (ou evento de afastamento pelo código de motivo de "
            "afastamento [14]) com data anterior a "
            "{dtIniCessao}(./dtIniCessao) sem que tenha sido encerrado."
        ),
    )

    eso11_cnpjCess = fields.Char(
        string="o CNPJ",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ do empregador/órgão público cessionário/de "
            "destino.\nValidação: Deve ser um CNPJ diferente do CNPJ do "
            "empregador/órgão público e diferente dos estabelecimentos "
            "informados através do evento S-1005.\nREGRA:REGRA_VALIDA_CNPJ"
        ),
    )

    eso11_respRemun = fields.Selection(
        TS_SIM_NAO,
        string="Informar",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o empregador/órgão público declarante continuará "
            "informando remunerações (S-1200/S-1202) do trabalhador cedido/em "
            "exercício em outro órgão."
        ),
    )


class FimCessao(models.AbstractModel):
    """Informação de término da cessão/exercício em outro órgão.
    CHAVE_GRUPO: {dtTermCessao*}
    CONDICAO_GRUPO: O (se não for preenchido o grupo {iniCessao}(../iniCessao)); N
    (nos demais casos)
    REGRA:REGRA_EXISTE_EVENTO_CESSAO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.fimcessao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCessao.InfoCessao.FimCessao"

    eso11_dtTermCessao = fields.Date(
        string="a data de término da cessão/exercício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de término da cessão/exercício em outro órgão.\nValidação:"
            " Deve-se obedecer às seguintes regras:\na) Deve ser igual ou "
            "posterior à data de início da cessão/exercício em outro "
            "órgão;\nb) Não pode ser posterior à data atual."
        ),
    )
