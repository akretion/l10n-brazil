# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSALIQRAT,
    TSTPINSC12,
    TSTPINSC124,
    TIdeEmpregador,
    TIdeEventoEvtTab,
    TNovaValidade,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTabLotacao/v_S_01_01_00"


class TIdeLotacao(models.AbstractModel):
    """Identificação da lotação e validade das informações
    DESCRICAO_COMPLETA:Identificação da lotação e período de validade das
    informações.
    CHAVE_GRUPO: {codLotacao*}, {iniValid*}, {fimValid*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tidelotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeLotacao"

    eso11_codLotacao = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador para a lotação "
            "tributária.\nValidação: O código atribuído não pode conter a "
            "expressão 'eSocial' nas 7 primeiras "
            "posições.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_iniValid = fields.Char(
        string="iniValid", xsd_required=True, xsd_type="TS_iniValid"
    )

    eso11_fimValid = fields.Char(string="fimValid", xsd_type="TS_fimValid")


class TDadosLotacao(models.AbstractModel):
    "Detalhamento das informações da lotação."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tdadoslotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosLotacao"

    eso11_tpLotacao = fields.Char(
        string="tpLotacao", xsd_required=True, xsd_type="TS_tpLotacao"
    )

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_4,
        string="o código correspondente ao tipo",
        xsd_type="TS_tpInsc_1_2_4",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nValidação: O campo não deve ser preenchido se "
            "{tpLotacao}(./tpLotacao) for igual a [01, 10, 21, 24, 90, 91]. "
            "Nos demais casos, observar conteúdo exigido para o campo "
            "{dadosLotacao/nrInsc}(./nrInsc), conforme Tabela 10."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="o número de inscrição",
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "o número de inscrição (CNPJ, CPF, CNO) ao qual pertence a lotação"
            " tributária.\nValidação: a) Deve ser preenchido de acordo com o "
            "conteúdo exigido, conforme especificado no campo "
            "{dadosLotacao/tpInsc}(./tpInsc) e na Tabela 10;\nb) Deve ser um "
            "identificador válido, constante das bases da RFB."
        ),
    )

    eso11_fpasLotacao = fields.Many2one(
        comodel_name="eso.11.fpaslotacao",
        string="Informações de FPAS",
        xsd_required=True,
        help=("Informações de FPAS e Terceiros relativos à lotação tributária."),
    )

    eso11_infoEmprParcial = fields.Many2one(
        comodel_name="eso.11.infoemprparcial",
        string="Informação complementar de obra",
        help=(
            "Informação complementar de obra de construção "
            "civil\nDESCRICAO_COMPLETA:Informação complementar que apresenta "
            "identificação do contratante de obra de construção civil sob "
            "regime de empreitada parcial ou subempreitada.\nCONDICAO_GRUPO: O"
            " (se "
            "{tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) = "
            "[02]); N (nos demais casos)"
        ),
    )

    eso11_dadosOpPort = fields.Many2one(
        comodel_name="eso.11.dadosopport",
        string="Informações do operador portuário",
        help=(
            "Informações do operador portuário.\nCONDICAO_GRUPO: O (se "
            "{tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) = "
            "[08]); N (nos demais casos)"
        ),
    )


class FpasLotacao(models.AbstractModel):
    "Informações de FPAS e Terceiros relativos à lotação tributária."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.fpaslotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosLotacao.FpasLotacao"

    eso11_fpas = fields.Char(string="fpas", xsd_required=True, xsd_type="TS_fpas")

    eso11_codTercs = fields.Char(
        string="o código de Terceiros",
        xsd_required=True,
        xsd_type="TS_codTercs",
        help=(
            "o código de Terceiros, já considerando a existência de eventuais "
            "convênios para recolhimento direto. Ex.: Se o contribuinte está "
            "enquadrado com FPAS [507], cujo código cheio de Terceiros é "
            "[0079], se possuir convênio com SENAI deve informar o código "
            "[0075].\nValidação: Se a classificação tributária em S-1000 for "
            "igual a [01, 02, 03, 04], informar [0000]. Nos demais casos, o "
            "código de Terceiros informado deve ser compatível com o código de"
            " FPAS informado, conforme Tabela 04."
        ),
    )

    eso11_codTercsSusp = fields.Char(
        string="código combinado dos Terceiros",
        xsd_type="TS_codTercs",
        help=(
            "código combinado dos Terceiros para os quais o recolhimento está "
            "suspenso em virtude de processos judiciais. Ex.: Se o "
            "contribuinte possui decisões de processos para suspensão de "
            "recolhimentos ao SESI (0008) e ao SEBRAE (0064), deve informar o "
            "código combinado das duas entidades, ou seja, [0072].\nValidação:"
            " Deve ser um código consistente com a Tabela 04.\nDeve haver pelo"
            " menos um processo em {procJudTerceiro}(1020_infoLotacao_inclusao"
            "_dadosLotacao_fpasLotacao_infoProcJudTerceiros_procJudTerceiro) "
            "para cada código de Terceiro cujo recolhimento esteja suspenso."
        ),
    )

    eso11_infoProcJudTerceiros = fields.Many2one(
        comodel_name="eso.11.infoprocjudterceiros",
        string="Informações",
        help=(
            "Informações de processos judiciais relativos às contribuições "
            "destinadas a Outras Entidades\nDESCRICAO_COMPLETA:Informações "
            "sobre a existência de processos judiciais, com sentença/decisão "
            "favorável ao contribuinte, relativos às contribuições destinadas "
            "a Outras Entidades e Fundos.\nCONDICAO_GRUPO: O (se {codTercsSusp"
            "}(1020_infoLotacao_inclusao_dadosLotacao_fpasLotacao_codTercsSusp"
            ") for preenchido); N (nos demais casos)"
        ),
    )


class InfoProcJudTerceiros(models.AbstractModel):
    """Informações de processos judiciais relativos às contribuições destinadas
    a Outras Entidades
    DESCRICAO_COMPLETA:Informações sobre a existência de processos judiciais, com
    sentença/decisão favorável ao contribuinte, relativos às contribuições
    destinadas a Outras Entidades e Fundos.
    CONDICAO_GRUPO: O (se
    {codTercsSusp}(1020_infoLotacao_inclusao_dadosLotacao_fpasLotacao_codTercsS
    usp) for preenchido); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoprocjudterceiros"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosLotacao.FpasLotacao.InfoProcJudTerceiros"

    eso11_procJudTerceiro = fields.One2many(
        "eso.11.procjudterceiro",
        "eso11_procJudTerceiro_infoProcJudTerceiros_id",
        string="Identificação do processo judicial",
        help=(
            "Identificação do processo judicial.\nCHAVE_GRUPO: {codTerc}, "
            "{nrProcJud}"
        ),
    )


class ProcJudTerceiro(models.AbstractModel):
    """Identificação do processo judicial.
    CHAVE_GRUPO: {codTerc}, {nrProcJud}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.procjudterceiro"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosLotacao.FpasLotacao.InfoProcJudTerceiros.ProcJudTerceiro"

    eso11_codTerc = fields.Char(
        string="código de Terceiro",
        xsd_required=True,
        xsd_type="TS_codTercs",
        help=(
            "código de Terceiro.\nValidação: Deve ser um código de Terceiro "
            "válido e compatível com o FPAS/Terceiros informado no grupo "
            "superior, conforme Tabela 04."
        ),
    )

    eso11_nrProcJud = fields.Char(
        string="nrProcJud", xsd_required=True, xsd_type="TS_nrProcJud_1"
    )

    eso11_codSusp = fields.Char(
        string="codSusp", xsd_required=True, xsd_type="TS_codSusp"
    )


class InfoEmprParcial(models.AbstractModel):
    """Informação complementar de obra de construção civil
    DESCRICAO_COMPLETA:Informação complementar que apresenta identificação do
    contratante de obra de construção civil sob regime de empreitada parcial ou
    subempreitada.
    CONDICAO_GRUPO: O (se
    {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) = [02]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoemprparcial"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosLotacao.InfoEmprParcial"

    eso11_tpInscContrat = fields.Selection(
        TS_TPINSC_1_2,
        string="Tipo de inscrição do contratante",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
    )

    eso11_nrInscContrat = fields.Char(
        string="Número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "Número de inscrição (CNPJ/CPF) do contratante.\nValidação: Deve "
            "ser um número de CNPJ ou CPF válido, conforme definido em "
            "{tpInscContrat}(./tpInscContrat)."
        ),
    )

    eso11_tpInscProp = fields.Selection(
        TS_TPINSC_1_2,
        string="Tipo de inscrição do proprietário do CNO",
        xsd_type="TS_tpInsc_1_2",
        help=(
            "Tipo de inscrição do proprietário do CNO.\nValidação: "
            "Preenchimento obrigatório e exclusivo quando o proprietário não "
            "for encontrado no CNO."
        ),
    )

    eso11_nrInscProp = fields.Char(
        string="o número de inscrição",
        xsd_type="TS_nrInsc_11_14",
        help=(
            "o número de inscrição (CNPJ/CPF) do proprietário do "
            "CNO.\nValidação: Preenchimento obrigatório e exclusivo se "
            "{tpInscProp}(./tpInscProp) for informado. Deve ser um número de "
            "CNPJ ou CPF válido, conforme indicado em "
            "{tpInscProp}(./tpInscProp)."
        ),
    )


class DadosOpPort(models.AbstractModel):
    """Informações do operador portuário.
    CONDICAO_GRUPO: O (se
    {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) = [08]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dadosopport"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDadosLotacao.DadosOpPort"

    eso11_aliqRat = fields.Selection(
        TS_ALIQRAT,
        string="a alíquota definida",
        xsd_required=True,
        xsd_type="TS_aliqRat",
        help=(
            "a alíquota definida na legislação vigente para a atividade (CNAE)"
            " preponderante."
        ),
    )

    eso11_fap = fields.Float(
        string="Fator Acidentário de Prevenção",
        xsd_required=True,
        xsd_type="TS_fap",
        help=(
            "Fator Acidentário de Prevenção - FAP.\nValidação: Deve ser um "
            "número maior ou igual a 0,5000 e menor ou igual a 2,0000, de "
            "acordo com o estabelecido pelo órgão governamental competente."
        ),
    )


class ESocial(models.AbstractModel):
    "S-1020 - Tabela de Lotações Tributárias"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtTabLotacao = fields.Many2one(
        comodel_name="eso.11.evttablotacao",
        string="Evento Tabela de Lotações Tributárias",
        xsd_required=True,
        help=(
            "Evento Tabela de Lotações Tributárias.\nCHAVE_GRUPO: {Id}\nREGRA:"
            "REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\n"
            "REGRA:REGRA_TABGERAL_ALTERACAO_PERIODO_CONFLITANTE\nREGRA:REGRA_T"
            "ABGERAL_EXISTE_REGISTRO_ALTERADO\nREGRA:REGRA_TABGERAL_EXISTE_REG"
            "ISTRO_EXCLUIDO\nREGRA:REGRA_TABGERAL_INCLUSAO_PERIODO_CONFLITANTE"
            "\nREGRA:REGRA_TABLOTACAO_VALIDA_FPASTERCEIROS\nREGRA:REGRA_TAB_PE"
            "RMITE_EXCLUSAO\nREGRA:REGRA_VALIDA_DT_FUTURA"
        ),
    )


class EvtTabLotacao(models.AbstractModel):
    """Evento Tabela de Lotações Tributárias.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_TABGERAL_ALTERACAO_PERIODO_CONFLITANTE
    REGRA:REGRA_TABGERAL_EXISTE_REGISTRO_ALTERADO
    REGRA:REGRA_TABGERAL_EXISTE_REGISTRO_EXCLUIDO
    REGRA:REGRA_TABGERAL_INCLUSAO_PERIODO_CONFLITANTE
    REGRA:REGRA_TABLOTACAO_VALIDA_FPASTERCEIROS
    REGRA:REGRA_TAB_PERMITE_EXCLUSAO
    REGRA:REGRA_VALIDA_DT_FUTURA"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttablotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabLotacao"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoevttab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_evtTab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_infoLotacao = fields.Many2one(
        comodel_name="eso.11.infolotacao",
        string="Informações da lotação",
        xsd_required=True,
        help=(
            "Informações da lotação\nDESCRICAO_COMPLETA:Identificação da "
            "operação (inclusão, alteração ou exclusão) e das informações da "
            "lotação."
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoLotacao(models.AbstractModel):
    """Informações da lotação
    DESCRICAO_COMPLETA:Identificação da operação (inclusão, alteração ou exclusão)
    e das informações da lotação."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infolotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabLotacao.InfoLotacao"

    eso11_inclusao = fields.Many2one(
        comodel_name="eso.11.inclusao",
        string="Inclusão de novas informações",
        choice="infolotacao",
        xsd_choice_required=True,
        help="Inclusão de novas informações.\nCONDICAO_GRUPO: OC",
    )

    eso11_alteracao = fields.Many2one(
        comodel_name="eso.11.alteracao",
        string="Alteração das informações",
        choice="infolotacao",
        xsd_choice_required=True,
        help="Alteração das informações.\nCONDICAO_GRUPO: OC",
    )

    eso11_exclusao = fields.Many2one(
        comodel_name="eso.11.exclusao",
        string="Exclusão das informações",
        choice="infolotacao",
        xsd_choice_required=True,
        help="Exclusão das informações.\nCONDICAO_GRUPO: OC",
    )


class Inclusao(models.AbstractModel):
    """Inclusão de novas informações.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabLotacao.InfoLotacao.Inclusao"

    eso11_ideLotacao = fields.Many2one(
        comodel_name="eso.11.tidelotacao",
        string="ideLotacao",
        xsd_required=True,
        xsd_type="T_ideLotacao",
    )

    eso11_dadosLotacao = fields.Many2one(
        comodel_name="eso.11.tdadoslotacao",
        string="dadosLotacao",
        xsd_required=True,
        xsd_type="T_dadosLotacao",
    )


class Alteracao(models.AbstractModel):
    """Alteração das informações.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.alteracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabLotacao.InfoLotacao.Alteracao"

    eso11_ideLotacao = fields.Many2one(
        comodel_name="eso.11.tidelotacao",
        string="ideLotacao",
        xsd_required=True,
        xsd_type="T_ideLotacao",
    )

    eso11_dadosLotacao = fields.Many2one(
        comodel_name="eso.11.tdadoslotacao",
        string="dadosLotacao",
        xsd_required=True,
        xsd_type="T_dadosLotacao",
    )

    eso11_novaValidade = fields.Many2one(
        comodel_name="eso.11.tnovavalidade",
        string="novaValidade",
        xsd_type="T_novaValidade",
    )


class Exclusao(models.AbstractModel):
    """Exclusão das informações.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.exclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTabLotacao.InfoLotacao.Exclusao"

    eso11_ideLotacao = fields.Many2one(
        comodel_name="eso.11.tidelotacao",
        string="ideLotacao",
        xsd_required=True,
        xsd_type="T_ideLotacao",
    )
