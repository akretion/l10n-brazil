# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSALIQRAT,
    TSINDCOMERC,
    TSINDCONSTR,
    TSINDCOOP,
    TSINDSUBSTPATR,
    TSINDSUBSTPATROBRA,
    TSPERCTRANSF,
    TSTPINSC12,
    TSTPINSC1234,
    TIdeEmpregador,
    TIdeEventoRetornoContrib,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtCS/v_S_01_01_00"

"""Indicativo da aquisição.
    Origem: campo {indAquis} de S-1250."""
BASESAQUIS_INDAQUIS = [
    (
        "1",
        "Aquisição da produção de produtor rural pessoa física ou segurado especial em geral",
    ),
    (
        "2",
        "Aquisição da produção de produtor rural pessoa física ou segurado especial em geral por entidade do PAA",
    ),
    (
        "3",
        "Aquisição da produção de produtor rural pessoa jurídica por entidade do PAA",
    ),
    (
        "4",
        "Aquisição da produção de produtor rural pessoa física ou segurado especial em geral - Produção isenta (Lei 13.606/2018)",
    ),
    (
        "5",
        "Aquisição da produção de produtor rural pessoa física ou segurado especial em geral por entidade do PAA - Produção isenta (Lei 13.606/2018)",
    ),
    (
        "6",
        "Aquisição da produção de produtor rural pessoa jurídica por entidade do PAA - Produção isenta (Lei 13.606/2018)",
    ),
]

"""Preencher com o código correspondente ao tipo de incidência para fins de
    apuração da contribuição previdenciária.
    Validação: a) Para empresas com {classTrib}(5011_infoCS_infoContrib_classTrib)
    = [01, 70, 80], todas as bases de cálculo devem ser totalizadas com
    {indIncid}(./indIncid) = [9], EXCETO para
    {classTrib}(5011_infoCS_infoContrib_classTrib) = [01] E
    {ideEstab/tpInsc}(5011_infoCS_ideEstab) = [4], que deve ser totalizada com
    {indIncid}(./indIncid) = [1].
    b) Para empresas com {classTrib}(5011_infoCS_infoContrib_classTrib) = [03],
    considerar a informação prestada no campo
    {indSimples}(5001_infoCp_ideEstabLot_infoCategIncid_indSimples) do evento
    S-5001, conforme abaixo:
    - Se o {indSimples}(5001_infoCp_ideEstabLot_infoCategIncid_indSimples) em
    S-5001 = [1] (contrib. subst. integralmente), a base de cálculo do
    respectivo trabalhador deve ser totalizada com {indIncid}(./indIncid) =
    [9];
    - Se o {indSimples}(5001_infoCp_ideEstabLot_infoCategIncid_indSimples) em
    S-5001 = [2] (contrib. não substituída), a base de cálculo do respectivo
    trabalhador deve ser totalizada com {indIncid}(./indIncid) = [1] (normal);
    - Se o {indSimples}(5001_infoCp_ideEstabLot_infoCategIncid_indSimples) em
    S-5001 = [3] (ativ. concomitante), a base de cálculo do respectivo
    trabalhador deve ser totalizada com {indIncid}(./indIncid) = [2].
    c) Para empresas com {classTrib}(5011_infoCS_infoContrib_classTrib) = [10]
    (sindicato de avulsos não portuários), as bases de cálculo dos
    trabalhadores avulsos da categoria [202] devem ser totalizadas com
    {indIncid}(./indIncid) = [9].
    d) Para {classTrib}(5011_infoCS_infoContrib_classTrib) = [22] (segurado
    especial), as bases de cálculo dos trabalhadores devem ser totalizadas com
    {indIncid}(./indIncid) = [9], EXCETO para a categoria [104] (empregado
    doméstico), que deve ser totalizada com {indIncid}(./indIncid) = [1].
    e) Para contribuinte com {classTrib}(5011_infoCS_infoContrib_classTrib) = [99]
    e com {indCoop}(5011_infoCS_infoContrib_infoPJ_indCoop) = [1] (cooperativa
    de trabalho), as remunerações dos cooperados (categoria [731, 734]) cuja
    lotação esteja classificada com
    {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) em S-1020 =
    [05, 06, 07] devem ser totalizadas com {indIncid}(./indIncid) = [9]. Nos
    demais casos, {indIncid}(./indIncid) = [1].
    f) Para contribuintes com {classTrib}(5011_infoCS_infoContrib_classTrib) =
    [11], as bases de cálculo dos trabalhadores devem ser totalizadas com
    {indIncid}(./indIncid) = [9], EXCETO para as categorias de contribuinte
    individual, que devem ser totalizadas com {indIncid}(./indIncid) = [1].
    g) Para {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) em S-1020
    = [91], todas as bases de cálculo devem ser totalizadas com
    {indIncid}(./indIncid) = [9]."""
BASESREMUN_INDINCID = [
    ("1", "Normal"),
    ("2", "Atividade concomitante"),
    ("9", "Substituída ou isenta"),
]

"""Indicativo de existência de valores de bases e de contribuições
    sociais."""
INFOCS_INDEXISTINFO = [
    ("1", "Há informações com apuração de contribuições sociais"),
    ("2", "Há movimento, porém sem apuração de contribuições sociais"),
    ("3", "Não há movimento no período informado em {perApur}(5011_ideEvento_perApur)"),
]

"""Indicador de tributação sobre a folha de pagamento - PIS e COFINS.
    Evento de origem: S-1000."""
INFOPJ_INDTRIBFOLHAPISCOFINS = [
    ("S", "Sim"),
]


class ESocial(models.AbstractModel):
    """S-5011 - Informações das Contribuições Sociais Consolidadas por
    Contribuinte"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtCS = fields.Many2one(
        comodel_name="eso.11.evtcs",
        string="Evento Informações",
        xsd_required=True,
        help=(
            "Evento Informações das Contribuições Sociais Consolidadas por "
            "Contribuinte.\nCHAVE_GRUPO: {Id}"
        ),
    )


class EvtCs(models.AbstractModel):
    """Evento Informações das Contribuições Sociais Consolidadas por
    Contribuinte.
    CHAVE_GRUPO: {Id}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcs"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoretornocontrib",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_retorno_contrib",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_infoCS = fields.Many2one(
        comodel_name="eso.11.infocs",
        string="Informações relativas",
        xsd_required=True,
        help=(
            "Informações relativas às contribuições "
            "sociais\nDESCRICAO_COMPLETA:Informações relativas às "
            "contribuições sociais devidas à Previdência Social e a Outras "
            "Entidades e Fundos."
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id_retorno")


class InfoCs(models.AbstractModel):
    """Informações relativas às contribuições sociais
    DESCRICAO_COMPLETA:Informações relativas às contribuições sociais devidas à
    Previdência Social e a Outras Entidades e Fundos."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocs"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs"

    eso11_nrRecArqBase = fields.Char(
        string="nrRecArqBase", xsd_required=True, xsd_type="TS_nrRecArqBase"
    )

    eso11_indExistInfo = fields.Selection(
        INFOCS_INDEXISTINFO, string="indExistInfo", xsd_required=True
    )

    eso11_infoCPSeg = fields.Many2one(
        comodel_name="eso.11.infocpseg",
        string="Informações",
        help=(
            "Informações de contribuição previdenciária do "
            "segurado.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoContrib = fields.Many2one(
        comodel_name="eso.11.infocontrib",
        string="Informações gerais do contribuinte",
        xsd_required=True,
        help=(
            "Informações gerais do "
            "contribuinte\nDESCRICAO_COMPLETA:Informações gerais do "
            "contribuinte necessárias à apuração das contribuições sociais."
        ),
    )

    eso11_ideEstab = fields.One2many(
        "eso.11.ideestab",
        "eso11_ideEstab_infoCS_id",
        string="Identificação do estabelecimento/obra",
        help=(
            "Identificação do "
            "estabelecimento/obra\nDESCRICAO_COMPLETA:Informações de "
            "identificação do estabelecimento ou obra de construção "
            "civil.\nCHAVE_GRUPO: {tpInsc}, {nrInsc}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoCRContrib = fields.One2many(
        "eso.11.infocrcontrib",
        "eso11_infoCRContrib_infoCS_id",
        string="Totalizador dos Códigos de Receita",
        help=(
            "Totalizador dos Códigos de Receita do "
            "contribuinte\nDESCRICAO_COMPLETA:Informações consolidadas das "
            "contribuições sociais devidas à Previdência Social e Outras "
            "Entidades e Fundos, por Código de Receita - CR.\nCHAVE_GRUPO: "
            "{tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoCpseg(models.AbstractModel):
    """Informações de contribuição previdenciária do segurado.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocpseg"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.InfoCpseg"

    eso11_vrDescCP = fields.Float(
        string="Valor total da contribuição descontada",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total da contribuição descontada dos segurados.\nOrigem: "
            "campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [21]."
        ),
    )

    eso11_vrCpSeg = fields.Float(
        string="Valor total calculado relativo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total calculado relativo à contribuição dos "
            "segurados.\nOrigem: campo {vrCpSeg}(5001_infoCpCalc_vrCpSeg) de "
            "S-5001."
        ),
    )


class InfoContrib(models.AbstractModel):
    """Informações gerais do contribuinte
    DESCRICAO_COMPLETA:Informações gerais do contribuinte necessárias à apuração
    das contribuições sociais."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocontrib"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.InfoContrib"

    eso11_classTrib = fields.Char(string="classTrib", xsd_required=True)

    eso11_infoPJ = fields.Many2one(
        comodel_name="eso.11.infopj",
        string="Informações exclusivas da PJ",
        help=(
            "Informações exclusivas da PJ\nDESCRICAO_COMPLETA:Informações "
            "complementares, exclusivas da Pessoa Jurídica.\nCONDICAO_GRUPO: O"
            " (se {ideEmpregador/tpInsc}(5011_ideEmpregador_tpInsc) = [1]); N "
            "(nos demais casos)"
        ),
    )


class InfoPj(models.AbstractModel):
    """Informações exclusivas da PJ
    DESCRICAO_COMPLETA:Informações complementares, exclusivas da Pessoa Jurídica.
    CONDICAO_GRUPO: O (se {ideEmpregador/tpInsc}(5011_ideEmpregador_tpInsc) = [1]);
    N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infopj"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.InfoContrib.InfoPj"

    eso11_indCoop = fields.Selection(
        TS_INDCOOP,
        string="Indicativo de cooperativa",
        xsd_type="TS_indCoop",
        help="Indicativo de cooperativa.\nEvento de origem: S-1000.",
    )

    eso11_indConstr = fields.Selection(
        TS_INDCONSTR,
        string="Indicativo de construtora",
        xsd_required=True,
        xsd_type="TS_indConstr",
        help="Indicativo de construtora.\nEvento de origem: S-1000.",
    )

    eso11_indSubstPatr = fields.Selection(
        TS_INDSUBSTPATR,
        string="Indicativo de substituição",
        xsd_type="TS_indSubstPatr",
        help=(
            "Indicativo de substituição da contribuição previdenciária "
            "patronal.\nOrigem: campo "
            "{indSubstPatr}(1280_infoSubstPatr_indSubstPatr) de S-1280."
        ),
    )

    eso11_percRedContrib = fields.Float(
        string="Percentual de redução",
        xsd_type="TS_percentual",
        help=(
            "Percentual de redução da contribuição prevista na Lei "
            "12.546/2011.\nEvento de origem: S-1280."
        ),
    )

    eso11_percTransf = fields.Selection(
        TS_PERCTRANSF,
        string="Percentual de contribuição social",
        xsd_type="TS_percTransf",
        help=(
            "Percentual de contribuição social - Lei 11.096/2005.\nEvento de "
            "origem: S-1280."
        ),
    )

    eso11_indTribFolhaPisCofins = fields.Selection(
        INFOPJ_INDTRIBFOLHAPISCOFINS, string="indTribFolhaPisCofins"
    )

    eso11_infoAtConc = fields.Many2one(
        comodel_name="eso.11.infoatconc",
        string="Informações de atividades concomitantes",
        help=(
            "Informações de atividades "
            "concomitantes\nDESCRICAO_COMPLETA:Informações prestadas por "
            "empresa enquadrada no regime de tributação Simples Nacional com "
            "tributação previdenciária substituída e não "
            "substituída.\nCONDICAO_GRUPO: O (se {classTrib}(../../classTrib) "
            "= [03]; N (nos demais casos)"
        ),
    )


class InfoAtConc(models.AbstractModel):
    """Informações de atividades concomitantes
    DESCRICAO_COMPLETA:Informações prestadas por empresa enquadrada no regime de
    tributação Simples Nacional com tributação previdenciária substituída e não
    substituída.
    CONDICAO_GRUPO: O (se {classTrib}(../../classTrib) = [03]; N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoatconc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.InfoContrib.InfoPj.InfoAtConc"

    eso11_fatorMes = fields.Float(
        string="Informe o fator a ser utilizado",
        xsd_required=True,
        xsd_type="TS_percentual",
        help=(
            "Informe o fator a ser utilizado para cálculo da contribuição "
            "patronal do mês dos trabalhadores envolvidos na execução das "
            "atividades enquadradas no Anexo IV em conjunto com as dos Anexos "
            "I a III e V da Lei Complementar 123/2006.\nEvento de origem: "
            "S-1280."
        ),
    )

    eso11_fator13 = fields.Float(
        string="fator13",
        xsd_required=True,
        xsd_type="TS_percentual",
        help=(
            "Informe o fator a ser utilizado para cálculo da contribuição "
            "patronal do décimo terceiro dos trabalhadores envolvidos na "
            "execução das atividades enquadradas no Anexo IV em conjunto com "
            "as dos Anexos I a III e V da Lei Complementar 123/2006.\nEvento "
            "de origem: S-1280."
        ),
    )


class IdeEstab(models.AbstractModel):
    """Identificação do estabelecimento/obra
    DESCRICAO_COMPLETA:Informações de identificação do estabelecimento ou obra de
    construção civil.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_3_4,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2_3_4",
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {ideEstab/tpInsc}(./tpInsc).\nEvento "
            "de origem: S-1260, S-1270 ou S-5001."
        ),
    )

    eso11_infoEstab = fields.Many2one(
        comodel_name="eso.11.infoestab",
        string="Informações do estabelecimento",
        help=(
            "Informações do estabelecimento\nDESCRICAO_COMPLETA:Informações "
            "relativas a cada estabelecimento, necessárias à apuração das "
            "contribuições sociais.\nCONDICAO_GRUPO: N (se "
            "{ideEstab/tpInsc}(../tpInsc) = [2] OU (se "
            "{ideEstab/tpInsc}(../tpInsc) = [3] e se tratar de empregador "
            "doméstico) OU se não existir informação em S-1200, S-1270, S-2299"
            " ou S-2399 relativas ao estabelecimento); O (nos demais casos)"
        ),
    )

    eso11_ideLotacao = fields.One2many(
        "eso.11.idelotacao",
        "eso11_ideLotacao_ideEstab_id",
        string="Identificação da lotação tributária",
        help=(
            "Identificação da lotação tributária.\nCHAVE_GRUPO: "
            "{codLotacao}\nCONDICAO_GRUPO: O (se existir informação em S-1200,"
            " S-1270, S-2299 ou S-2399 relativas ao estabelecimento "
            "identificado em {ideEstab/nrInsc}(../nrInsc)); N (nos demais "
            "casos)"
        ),
    )

    eso11_basesAquis = fields.One2many(
        "eso.11.basesaquis",
        "eso11_basesAquis_ideEstab_id",
        string="Informações sobre aquisição rural",
        help=(
            "Informações sobre aquisição rural\nDESCRICAO_COMPLETA:Informações"
            " de bases de cálculo relativas à aquisição de produção "
            "rural.\nEvento de origem: S-1250 (existente até a versão 2.5 do "
            "leiaute).\nCHAVE_GRUPO: {indAquis}\nCONDICAO_GRUPO: O (se existir"
            " informação em S-1250 relativa ao estabelecimento identificado em"
            " {ideEstab/nrInsc}(../nrInsc) e se não houver informação de "
            "{indExcApur1250}(1299_infoFech_indExcApur1250) em S-1299); N (nos"
            " demais casos)"
        ),
    )

    eso11_basesComerc = fields.One2many(
        "eso.11.basescomerc",
        "eso11_basesComerc_ideEstab_id",
        string="Informações da comercialização",
        help=(
            "Informações da comercialização da "
            "produção\nDESCRICAO_COMPLETA:Informações de bases de cálculo "
            "relativas à comercialização da produção rural da Pessoa "
            "Física.\nInformações desse grupo conforme informado pelo "
            "contribuinte em S-1260.\nCHAVE_GRUPO: "
            "{indComerc}\nCONDICAO_GRUPO: O (se houver evento S-1260 válido na"
            " competência relativo ao estabelecimento identificado em "
            "{ideEstab/nrInsc}(../nrInsc)); N (nos demais casos)"
        ),
    )

    eso11_infoCREstab = fields.One2many(
        "eso.11.infocrestab",
        "eso11_infoCREstab_ideEstab_id",
        string="Códigos de Receita por estabelecimento",
        help=(
            "Códigos de Receita por "
            "estabelecimento\nDESCRICAO_COMPLETA:Informações das contribuições"
            " sociais devidas à Previdência Social e Outras Entidades e "
            "Fundos, consolidadas por estabelecimento e por Código de Receita "
            "- CR.\nCHAVE_GRUPO: {tpCR}\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoEstab(models.AbstractModel):
    """Informações do estabelecimento
    DESCRICAO_COMPLETA:Informações relativas a cada estabelecimento, necessárias à
    apuração das contribuições sociais.
    CONDICAO_GRUPO: N (se {ideEstab/tpInsc}(../tpInsc) = [2] OU (se
    {ideEstab/tpInsc}(../tpInsc) = [3] e se tratar de empregador doméstico) OU
    se não existir informação em S-1200, S-1270, S-2299 ou S-2399 relativas ao
    estabelecimento); O (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.InfoEstab"

    eso11_cnaePrep = fields.Char(
        string="o código CNAE",
        xsd_required=True,
        xsd_type="TS_cnae",
        help=(
            "o código CNAE, conforme informado em S-1005.\nEvento de origem: " "S-1005."
        ),
    )

    eso11_cnpjResp = fields.Char(
        string="o CNPJ responsável pela inscrição",
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ responsável pela inscrição no cadastro de obras da "
            "RFB.\nEvento de origem: S-1005."
        ),
    )

    eso11_aliqRat = fields.Selection(
        TS_ALIQRAT,
        string="alíquota RAT",
        xsd_required=True,
        xsd_type="TS_aliqRat",
        help=(
            "alíquota RAT.\nValidação: Deve corresponder à alíquota declarada "
            "no evento S-1005. Caso não haja informação, retornar a alíquota "
            "definida na legislação vigente para o código CNAE informado."
        ),
    )

    eso11_fap = fields.Float(
        string="Fator Acidentário de Prevenção",
        xsd_type="TS_fap",
        help=(
            "Fator Acidentário de Prevenção - FAP.\nValidação: Informação "
            "obrigatória e exclusiva se "
            "{ideEmpregador/tpInsc}(5011_ideEmpregador_tpInsc) = [1]. Deve "
            "corresponder ao FAP estabelecido para a empresa pelo órgão "
            "governamental competente, exceto se:\na) "
            "{ideEstab/tpInsc}(5011_infoCS_ideEstab_tpInsc) = [4] e se não "
            "existir o campo {cnpjResp}(./cnpjResp); ou\nb) "
            "{ideEstab/tpInsc}(5011_infoCS_ideEstab_tpInsc) = [1, 4] e se "
            "houver informação de {procAdmJudFap}(1005_infoEstab_inclusao_dado"
            "sEstab_aliqGilrat_procAdmJudFap) em S-1005; ou\nc) "
            "{ideEstab/tpInsc}(5011_infoCS_ideEstab_tpInsc) = [1, 4] e o "
            "estabelecimento ou o CNPJ responsável pela inscrição no CNO não "
            "for encontrado na tabela FAP referente ao ano de "
            "{perApur}(5011_ideEvento_perApur).\nCaso haja alguma exceção "
            "acima, retornar o FAP declarado no evento S-1005."
        ),
    )

    eso11_aliqRatAjust = fields.Float(string="aliqRatAjust")

    eso11_infoEstabRef = fields.Many2one(
        comodel_name="eso.11.infoestabref",
        string="Informações de RAT e FAP de referência",
        help=(
            "Informações de RAT e FAP de referência\nDESCRICAO_COMPLETA: "
            "Informações de RAT e FAP de referência, nos casos de processo "
            "administrativo ou judicial que altere a(s) "
            "alíquota(s).\nCONDICAO_GRUPO: OC (se houver informação de {procAd"
            "mJudRat}(1005_infoEstab_inclusao_dadosEstab_aliqGilrat_procAdmJud"
            "Rat) em S-1005 ou de {procAdmJudFap}(1005_infoEstab_inclusao_dado"
            "sEstab_aliqGilrat_procAdmJudFap) em S-1005); N (nos demais casos)"
        ),
    )

    eso11_infoComplObra = fields.Many2one(
        comodel_name="eso.11.infocomplobra",
        string="Informações complementares relativas",
        help=(
            "Informações complementares relativas a "
            "obras\nDESCRICAO_COMPLETA:Informações complementares relativas a "
            "obras de construção civil.\nCONDICAO_GRUPO: O (se houver "
            "informação de "
            "{infoObra}(1005_infoEstab_inclusao_dadosEstab_infoObra) em "
            "S-1005); N (nos demais casos)"
        ),
    )


class InfoEstabRef(models.AbstractModel):
    """Informações de RAT e FAP de referência
    DESCRICAO_COMPLETA: Informações de RAT e FAP de referência, nos casos de
    processo administrativo ou judicial que altere a(s) alíquota(s).
    CONDICAO_GRUPO: OC (se houver informação de
    {procAdmJudRat}(1005_infoEstab_inclusao_dadosEstab_aliqGilrat_procAdmJudRat
    ) em S-1005 ou de {procAdmJudFap}(1005_infoEstab_inclusao_dadosEstab_aliqGi
    lrat_procAdmJudFap) em S-1005); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoestabref"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.InfoEstab.InfoEstabRef"

    eso11_aliqRat = fields.Selection(
        TS_ALIQRAT,
        string="Retornar a alíquota RAT definida",
        xsd_required=True,
        xsd_type="TS_aliqRat",
        help=(
            "Retornar a alíquota RAT definida na legislação "
            "vigente.\nValidação: Deve corresponder à alíquota definida na "
            "legislação vigente para o código CNAE informado em S-1005."
        ),
    )

    eso11_fap = fields.Float(
        string="Fator Acidentário de Prevenção",
        xsd_type="TS_fap",
        help=(
            "Fator Acidentário de Prevenção - FAP estabelecido pelo órgão "
            "governamental competente.\nValidação: Informação obrigatória e "
            "exclusiva se {ideEmpregador/tpInsc}(5011_ideEmpregador_tpInsc) = "
            "[1]. Deve corresponder ao FAP estabelecido para a empresa pelo "
            "órgão governamental competente."
        ),
    )

    eso11_aliqRatAjust = fields.Float(string="aliqRatAjust")


class InfoComplObra(models.AbstractModel):
    """Informações complementares relativas a obras
    DESCRICAO_COMPLETA:Informações complementares relativas a obras de construção
    civil.
    CONDICAO_GRUPO: O (se houver informação de
    {infoObra}(1005_infoEstab_inclusao_dadosEstab_infoObra) em S-1005); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplobra"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.InfoEstab.InfoComplObra"

    eso11_indSubstPatrObra = fields.Selection(
        TS_INDSUBSTPATROBRA,
        string="Indicativo de substituição",
        xsd_required=True,
        xsd_type="TS_indSubstPatrObra",
        help=(
            "Indicativo de substituição da contribuição patronal de obra de "
            "construção civil.\nOrigem: campo {indSubstPatrObra}(1005_infoEsta"
            "b_inclusao_dadosEstab_infoObra_indSubstPatrObra) de S-1005."
        ),
    )


class IdeLotacao(models.AbstractModel):
    """Identificação da lotação tributária.
    CHAVE_GRUPO: {codLotacao}
    CONDICAO_GRUPO: O (se existir informação em S-1200, S-1270, S-2299 ou S-2399
    relativas ao estabelecimento identificado em {ideEstab/nrInsc}(../nrInsc));
    N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idelotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao"

    eso11_codLotacao = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador para a lotação "
            "tributária.\nEvento de origem: S-1270 ou S-5001."
        ),
    )

    eso11_fpas = fields.Char(
        string="o código relativo ao FPAS",
        xsd_required=True,
        xsd_type="TS_fpas",
        help="o código relativo ao FPAS.\nEvento de origem: S-1020.",
    )

    eso11_codTercs = fields.Char(
        string="o código de Terceiros",
        xsd_required=True,
        xsd_type="TS_codTercs",
        help=(
            "o código de Terceiros, conforme Tabela 04.\nEvento de origem: " "S-1020."
        ),
    )

    eso11_codTercsSusp = fields.Char(
        string="código combinado dos Terceiros",
        xsd_type="TS_codTercs",
        help=(
            "código combinado dos Terceiros para os quais o recolhimento está "
            "suspenso em virtude de processos judiciais.\nEvento de origem: "
            "S-1020."
        ),
    )

    eso11_infoTercSusp = fields.One2many(
        "eso.11.infotercsusp",
        "eso11_infoTercSusp_ideLotacao_id",
        string="Informações de suspensão de contribuição",
        help=(
            "Informações de suspensão de contribuição a "
            "Terceiros\nDESCRICAO_COMPLETA:Informações de suspensão de "
            "contribuições destinadas a Outras Entidades e Fundos "
            "(Terceiros).\nCHAVE_GRUPO: {codTerc}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoEmprParcial = fields.Many2one(
        comodel_name="eso.11.infoemprparcial",
        string="Informação complementar de obra",
        help=(
            "Informação complementar de obra de construção "
            "civil\nDESCRICAO_COMPLETA:Informação complementar que apresenta "
            "identificação do contratante e do proprietário de obra de "
            "construção civil contratada sob regime de empreitada parcial ou "
            "subempreitada.\nEvento de origem: S-1020.\nCONDICAO_GRUPO: O (se "
            "{tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) em "
            "S-1020 relativo a {codLotacao}(../codLotacao) for igual a [02]); "
            "N (nos demais casos)"
        ),
    )

    eso11_dadosOpPort = fields.Many2one(
        comodel_name="eso.11.dadosopport",
        string="Informações relativas",
        help=(
            "Informações relativas ao operador portuário.\nCONDICAO_GRUPO: O "
            "(se {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao)"
            " em S-1020 relativo a {codLotacao}(../codLotacao) for igual a "
            "[08]); N (nos demais casos)"
        ),
    )

    eso11_basesRemun = fields.One2many(
        "eso.11.basesremun",
        "eso11_basesRemun_ideLotacao_id",
        string="Bases de cálculo por categoria",
        help=(
            "Bases de cálculo por categoria\nDESCRICAO_COMPLETA:Bases de "
            "cálculo da contribuição previdenciária incidente sobre "
            "remunerações, por categoria.\nCHAVE_GRUPO: {indIncid}, "
            "{codCateg}\nCONDICAO_GRUPO: O (se houver evento "
            "S-1200/S-2299/S-2399 com informações de remuneração válido na "
            "competência relativo ao estabelecimento identificado em "
            "{ideEstab/nrInsc}(../../nrInsc)); N (nos demais casos)"
        ),
    )

    eso11_basesAvNPort = fields.Many2one(
        comodel_name="eso.11.basesavnport",
        string="Contratação de avulsos não portuários",
        help=(
            "Contratação de avulsos não "
            "portuários\nDESCRICAO_COMPLETA:Informações de bases de cálculo "
            "relativas à contratação de trabalhadores avulsos não "
            "portuários.\nInformações desse grupo conforme informado pelo "
            "contribuinte em S-1270.\nCONDICAO_GRUPO: O (se houver evento "
            "S-1270 válido na competência relativo ao estabelecimento "
            "identificado em {ideEstab/nrInsc}(../../nrInsc)); N (nos demais "
            "casos)"
        ),
    )

    eso11_infoSubstPatrOpPort = fields.Many2one(
        comodel_name="eso.11.infosubstpatropport",
        string="Informação de substituição prevista",
        help=(
            "Informação de substituição prevista na Lei "
            "12.546/2011\nDESCRICAO_COMPLETA:Grupo preenchido exclusivamente "
            "pelo Órgão Gestor de Mão de Obra - OGMO "
            "({classTrib}(5011_infoCS_infoContrib_classTrib) = [09]), "
            "relativamente a operador portuário enquadrado nos arts. 7º a 9º "
            "da Lei 12.546/2011.\nCONDICAO_GRUPO: OC (se "
            "{classTrib}(5011_infoCS_infoContrib_classTrib) = [09]; N (nos "
            "demais casos)"
        ),
    )


class InfoTercSusp(models.AbstractModel):
    """Informações de suspensão de contribuição a Terceiros
    DESCRICAO_COMPLETA:Informações de suspensão de contribuições destinadas a
    Outras Entidades e Fundos (Terceiros).
    CHAVE_GRUPO: {codTerc}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotercsusp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.InfoTercSusp"

    eso11_codTerc = fields.Char(
        string="código de Terceiro",
        xsd_required=True,
        xsd_type="TS_codTercs",
        help=(
            "código de Terceiro.\nOrigem: campo {codTerc}(1020_infoLotacao_inc"
            "lusao_dadosLotacao_fpasLotacao_infoProcJudTerceiros_procJudTercei"
            "ro_codTerc) de S-1020."
        ),
    )


class InfoEmprParcial(models.AbstractModel):
    """Informação complementar de obra de construção civil
    DESCRICAO_COMPLETA:Informação complementar que apresenta identificação do
    contratante e do proprietário de obra de construção civil contratada sob
    regime de empreitada parcial ou subempreitada.
    Evento de origem: S-1020.
    CONDICAO_GRUPO: O (se
    {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) em S-1020
    relativo a {codLotacao}(../codLotacao) for igual a [02]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoemprparcial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.InfoEmprParcial"

    eso11_tpInscContrat = fields.Selection(
        TS_TPINSC_1_2,
        string="Tipo de inscrição do contratante",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
    )

    eso11_nrInscContrat = fields.Char(
        string="Número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help="Número de inscrição (CNPJ/CPF) do contratante.",
    )

    eso11_tpInscProp = fields.Selection(
        TS_TPINSC_1_2,
        string="Tipo de inscrição do proprietário do CNO",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
        help=(
            "Tipo de inscrição do proprietário do CNO.\nValidação: Retornar o "
            "tipo de inscrição do proprietário no CNO. Caso não tenha sido "
            "encontrado, retornar {tpInscProp}(1020_infoLotacao_inclusao_dados"
            "Lotacao_infoEmprParcial_tpInscProp) de S-1020. Se o tipo de "
            "inscrição do proprietário no CNO não for encontrado e se não "
            "houver informação de {tpInscProp}(1020_infoLotacao_inclusao_dados"
            "Lotacao_infoEmprParcial_tpInscProp) em S-1020, retornar {tpInscCo"
            "ntrat}(5011_infoCS_ideEstab_ideLotacao_infoEmprParcial_tpInscCont"
            "rat)."
        ),
    )

    eso11_nrInscProp = fields.Char(
        string="o número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "o número de inscrição (CNPJ/CPF) do proprietário do "
            "CNO.\nValidação: Retornar o número de inscrição do proprietário "
            "no CNO. Caso não tenha sido encontrado, retornar {nrInscProp}(102"
            "0_infoLotacao_inclusao_dadosLotacao_infoEmprParcial_nrInscProp) "
            "de S-1020. Se o número de inscrição do proprietário no CNO não "
            "for encontrado e se não houver informação de {nrInscProp}(1020_in"
            "foLotacao_inclusao_dadosLotacao_infoEmprParcial_nrInscProp) em "
            "S-1020, retornar {nrInscContrat}(5011_infoCS_ideEstab_ideLotacao_"
            "infoEmprParcial_nrInscContrat)."
        ),
    )

    eso11_cnoObra = fields.Char(string="cnoObra", xsd_required=True)


class DadosOpPort(models.AbstractModel):
    """Informações relativas ao operador portuário.
    CONDICAO_GRUPO: O (se
    {tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) em S-1020
    relativo a {codLotacao}(../codLotacao) for igual a [08]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dadosopport"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.DadosOpPort"

    eso11_cnpjOpPortuario = fields.Char(
        string="o CNPJ do operador portuário",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ do operador portuário.\nOrigem: campo {dadosLotacao/nrInsc"
            "}(1020_infoLotacao_inclusao_dadosLotacao_nrInsc) de S-1020."
        ),
    )

    eso11_aliqRat = fields.Selection(
        TS_ALIQRAT,
        string="alíquota RAT",
        xsd_required=True,
        xsd_type="TS_aliqRat",
        help=(
            "alíquota RAT.\nOrigem: campo {dadosOpPort/aliqRat}(1020_infoLotac"
            "ao_inclusao_dadosLotacao_dadosOpPort_aliqRat) de S-1020."
        ),
    )

    eso11_fap = fields.Float(
        string="Fator Acidentário de Prevenção",
        xsd_required=True,
        xsd_type="TS_fap",
        help=(
            "Fator Acidentário de Prevenção - FAP.\nOrigem: campo {dadosOpPort"
            "/fap}(1020_infoLotacao_inclusao_dadosLotacao_dadosOpPort_fap) de "
            "S-1020."
        ),
    )

    eso11_aliqRatAjust = fields.Float(string="aliqRatAjust", xsd_required=True)


class BasesRemun(models.AbstractModel):
    """Bases de cálculo por categoria
    DESCRICAO_COMPLETA:Bases de cálculo da contribuição previdenciária incidente
    sobre remunerações, por categoria.
    CHAVE_GRUPO: {indIncid}, {codCateg}
    CONDICAO_GRUPO: O (se houver evento S-1200/S-2299/S-2399 com informações de
    remuneração válido na competência relativo ao estabelecimento identificado
    em {ideEstab/nrInsc}(../../nrInsc)); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basesremun"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.BasesRemun"

    eso11_indIncid = fields.Selection(
        BASESREMUN_INDINCID, string="indIncid", xsd_required=True
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=("o código da categoria do trabalhador, conforme definido em " "S-5001."),
    )

    eso11_basesCp = fields.Many2one(
        comodel_name="eso.11.basescp",
        string="Bases",
        xsd_required=True,
        help=(
            "Bases, contribuições do segurado e deduções da "
            "CP\nDESCRICAO_COMPLETA:Valores correspondentes às bases, "
            "contribuições do segurado e deduções da contribuição "
            "previdenciária."
        ),
    )


class BasesCp(models.AbstractModel):
    """Bases, contribuições do segurado e deduções da CP
    DESCRICAO_COMPLETA:Valores correspondentes às bases, contribuições do segurado
    e deduções da contribuição previdenciária."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basescp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.BasesRemun.BasesCp"

    eso11_vrBcCp00 = fields.Float(
        string="a base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição previdenciária sobre a "
            "remuneração.\nOrigem: para {codCateg}(../codCateg) diferente de "
            "[104]: somatório do campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [11, 15]; para "
            "{codCateg}(../codCateg) = [104]: somatório do campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [11, 15], limitado ao teto do "
            "salário de contribuição.\nOBS.: A contribuição previdenciária "
            "patronal do empregador doméstico tem como base de cálculo o "
            "somatório do salário de contribuição de cada empregado."
        ),
    )

    eso11_vrBcCp15 = fields.Float(
        string="a base de cálculo (vrBcCp15)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição adicional para o financiamento "
            "dos benefícios de aposentadoria especial após 15 anos de "
            "contribuição.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, se {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_in"
            "foBaseCS_tpValor) em S-5001 = [12, 16]."
        ),
    )

    eso11_vrBcCp20 = fields.Float(
        string="a base de cálculo (vrBcCp20)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição adicional para o financiamento "
            "dos benefícios de aposentadoria especial após 20 anos de "
            "contribuição.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [13, 17]."
        ),
    )

    eso11_vrBcCp25 = fields.Float(
        string="a base de cálculo (vrBcCp25)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição adicional para o financiamento "
            "dos benefícios de aposentadoria especial após 25 anos de "
            "contribuição.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [14, 18]."
        ),
    )

    eso11_vrSuspBcCp00 = fields.Float(
        string="Valor da BC com incidência suspensa",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da BC com incidência suspensa em decorrência de decisão "
            "judicial.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [91, 95]."
        ),
    )

    eso11_vrSuspBcCp15 = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária adicional"
            " correspondente a exposição a agente nocivo que dá ao trabalhador"
            " direito a aposentadoria especial aos 15 anos de trabalho, com "
            "incidência suspensa em decorrência de decisão judicial.\nOrigem: "
            "campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [92, 96]."
        ),
    )

    eso11_vrSuspBcCp20 = fields.Float(
        string="Valor da base de cálculo (vrSuspBcCp20)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária adicional"
            " correspondente a exposição a agente nocivo que dá ao trabalhador"
            " expectativa de aposentadoria especial aos 20 anos de trabalho, "
            "com incidência suspensa em decorrência de decisão "
            "judicial.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [93, 97]."
        ),
    )

    eso11_vrSuspBcCp25 = fields.Float(
        string="Valor da base de cálculo (vrSuspBcCp25)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária adicional"
            " correspondente a exposição a agente nocivo que dá ao trabalhador"
            " direito a aposentadoria especial aos 25 anos de trabalho, com "
            "incidência suspensa em decorrência de decisão judicial.\nOrigem: "
            "campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [94, 98]."
        ),
    )

    eso11_vrBcCp00VA = fields.Float(
        string="a base de cálculo (vrBcCp00VA)",
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição previdenciária sobre a "
            "remuneração - Contrato Verde e Amarelo.\nOrigem: somatório do "
            "campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [41, 45]."
        ),
    )

    eso11_vrBcCp15VA = fields.Float(
        string="a base de cálculo (vrBcCp15VA)",
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição adicional para o financiamento "
            "dos benefícios de aposentadoria especial após 15 anos de "
            "contribuição - Contrato Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, se {tpValor}(5001_infoCp_ideEstabLot_infoCategIncid_in"
            "foBaseCS_tpValor) em S-5001 = [42, 46]."
        ),
    )

    eso11_vrBcCp20VA = fields.Float(
        string="a base de cálculo (vrBcCp20VA)",
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição adicional para o financiamento "
            "dos benefícios de aposentadoria especial após 20 anos de "
            "contribuição - Contrato Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [43, 47]."
        ),
    )

    eso11_vrBcCp25VA = fields.Float(
        string="a base de cálculo (vrBcCp25VA)",
        xsd_type="TS_valorMonetario",
        help=(
            "a base de cálculo da contribuição adicional para o financiamento "
            "dos benefícios de aposentadoria especial após 25 anos de "
            "contribuição - Contrato Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [44, 48]."
        ),
    )

    eso11_vrSuspBcCp00VA = fields.Float(
        string="vrSuspBcCp00VA",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da BC com incidência suspensa em decorrência de decisão "
            "judicial - Contrato Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [81, 85]."
        ),
    )

    eso11_vrSuspBcCp15VA = fields.Float(
        string="vrSuspBcCp15VA",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária adicional"
            " correspondente a exposição a agente nocivo que dá ao trabalhador"
            " direito a aposentadoria especial aos 15 anos de trabalho, com "
            "incidência suspensa em decorrência de decisão judicial - Contrato"
            " Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [82, 86]."
        ),
    )

    eso11_vrSuspBcCp20VA = fields.Float(
        string="vrSuspBcCp20VA",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária adicional"
            " correspondente a exposição a agente nocivo que dá ao trabalhador"
            " expectativa de aposentadoria especial aos 20 anos de trabalho, "
            "com incidência suspensa em decorrência de decisão judicial - "
            "Contrato Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [83, 87]."
        ),
    )

    eso11_vrSuspBcCp25VA = fields.Float(
        string="vrSuspBcCp25VA",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária adicional"
            " correspondente a exposição a agente nocivo que dá ao trabalhador"
            " direito a aposentadoria especial aos 25 anos de trabalho, com "
            "incidência suspensa em decorrência de decisão judicial - Contrato"
            " Verde e Amarelo.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [84, 88]."
        ),
    )

    eso11_vrDescSest = fields.Float(
        string="Valor total descontado do trabalhador",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total descontado do trabalhador para recolhimento ao "
            "SEST.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [22]."
        ),
    )

    eso11_vrCalcSest = fields.Float(
        string="Valor calculado relativo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor calculado relativo à contribuição devida pelo trabalhador "
            "para recolhimento ao SEST.\nOrigem: campo {vrCsSegTerc}(5001_info"
            "Cp_ideEstabLot_infoCategIncid_calcTerc_vrCsSegTerc) de S-5001, "
            "quando {calcTerc/tpCR}(5001_infoCp_ideEstabLot_infoCategIncid_cal"
            "cTerc_tpCR) em S-5001 = [121802], exceto se houver informação de "
            "processo judicial do trabalhador, quando deve ser utilizado o "
            "valor apurado em {vrDescSest}(./vrDescSest)."
        ),
    )

    eso11_vrDescSenat = fields.Float(
        string="vrDescSenat",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total descontado do trabalhador para recolhimento ao "
            "SENAT.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [23]."
        ),
    )

    eso11_vrCalcSenat = fields.Float(
        string="Valor calculado relativo (vrCalcSenat)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor calculado relativo à contribuição devida pelo trabalhador "
            "para recolhimento ao SENAT.\nOrigem: campo {vrCsSegTerc}(5001_inf"
            "oCp_ideEstabLot_infoCategIncid_calcTerc_vrCsSegTerc) de S-5001, "
            "quando {calcTerc/tpCR}(5001_infoCp_ideEstabLot_infoCategIncid_cal"
            "cTerc_tpCR) em S-5001 = [122102], exceto se houver informação de "
            "processo judicial do trabalhador, quando deve ser utilizado o "
            "valor apurado em {vrDescSenat}(./vrDescSenat)."
        ),
    )

    eso11_vrSalFam = fields.Float(
        string="Valor total do salário-família",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total do salário-família para a categoria "
            "indicada.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [31]."
        ),
    )

    eso11_vrSalMat = fields.Float(
        string="Valor total do salário-maternidade",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total do salário-maternidade para a categoria "
            "indicada.\nOrigem: campo "
            "{valor}(5001_infoCp_ideEstabLot_infoCategIncid_infoBaseCS_valor) "
            "de S-5001, quando {tpValor}(5001_infoCp_ideEstabLot_infoCategInci"
            "d_infoBaseCS_tpValor) em S-5001 = [32]."
        ),
    )


class BasesAvNport(models.AbstractModel):
    """Contratação de avulsos não portuários
    DESCRICAO_COMPLETA:Informações de bases de cálculo relativas à contratação de
    trabalhadores avulsos não portuários.
    Informações desse grupo conforme informado pelo contribuinte em S-1270.
    CONDICAO_GRUPO: O (se houver evento S-1270 válido na competência relativo ao
    estabelecimento identificado em {ideEstab/nrInsc}(../../nrInsc)); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basesavnport"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.BasesAvNport"

    eso11_vrBcCp00 = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária sobre a "
            "remuneração dos trabalhadores avulsos não portuários.\nOrigem: "
            "campo {vrBcCp00}(1270_remunAvNP_vrBcCp00) de S-1270."
        ),
    )

    eso11_vrBcCp15 = fields.Float(
        string="Valor da base de cálculo (vrBcCp15)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição adicional para o "
            "financiamento dos benefícios de aposentadoria especial após 15 "
            "anos de contribuição.\nOrigem: campo "
            "{vrBcCp15}(1270_remunAvNP_vrBcCp15) de S-1270."
        ),
    )

    eso11_vrBcCp20 = fields.Float(
        string="Valor da base de cálculo (vrBcCp20)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição adicional para o "
            "financiamento dos benefícios de aposentadoria especial após 20 "
            "anos de contribuição.\nOrigem: campo "
            "{vrBcCp20}(1270_remunAvNP_vrBcCp20) de S-1270."
        ),
    )

    eso11_vrBcCp25 = fields.Float(
        string="Valor da base de cálculo (vrBcCp25)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição adicional para o "
            "financiamento dos benefícios de aposentadoria especial após 25 "
            "anos de contribuição.\nOrigem: campo "
            "{vrBcCp25}(1270_remunAvNP_vrBcCp25) de S-1270."
        ),
    )

    eso11_vrBcCp13 = fields.Float(
        string="Valor da base de cálculo (vrBcCp13)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária sobre o "
            "13° salário dos trabalhadores avulsos não portuários "
            "contratados.\nOrigem: campo {vrBcCp13}(1270_remunAvNP_vrBcCp13) "
            "de S-1270."
        ),
    )

    eso11_vrDescCP = fields.Float(
        string="o valor total da contribuição descontada",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "o valor total da contribuição descontada dos trabalhadores "
            "avulsos não portuários.\nOrigem: campo "
            "{vrDescCP}(1270_remunAvNP_vrDescCP) de S-1270."
        ),
    )


class InfoSubstPatrOpPort(models.AbstractModel):
    """Informação de substituição prevista na Lei 12.546/2011
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente pelo Órgão Gestor de Mão de
    Obra - OGMO ({classTrib}(5011_infoCS_infoContrib_classTrib) = [09]),
    relativamente a operador portuário enquadrado nos arts. 7º a 9º da Lei
    12.546/2011.
    CONDICAO_GRUPO: OC (se {classTrib}(5011_infoCS_infoContrib_classTrib) = [09]; N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infosubstpatropport"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.IdeLotacao.InfoSubstPatrOpPort"

    eso11_cnpjOpPortuario = fields.Char(
        string="o CNPJ do operador portuário",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ do operador portuário.\nOrigem: campo {dadosLotacao/nrInsc"
            "}(1020_infoLotacao_inclusao_dadosLotacao_nrInsc) de S-1020 "
            "relativo a {codLotacao}(1280_infoSubstPatrOpPort_codLotacao) em "
            "S-1280."
        ),
    )


class BasesAquis(models.AbstractModel):
    """Informações sobre aquisição rural
    DESCRICAO_COMPLETA:Informações de bases de cálculo relativas à aquisição de
    produção rural.
    Evento de origem: S-1250 (existente até a versão 2.5 do leiaute).
    CHAVE_GRUPO: {indAquis}
    CONDICAO_GRUPO: O (se existir informação em S-1250 relativa ao estabelecimento
    identificado em {ideEstab/nrInsc}(../nrInsc) e se não houver informação de
    {indExcApur1250}(1299_infoFech_indExcApur1250) em S-1299); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basesaquis"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.BasesAquis"

    eso11_indAquis = fields.Selection(
        BASESAQUIS_INDAQUIS, string="indAquis", xsd_required=True
    )

    eso11_vlrAquis = fields.Float(
        string="Valor total da aquisição",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total da aquisição de produção rural de produtor "
            "rural.\nOrigem: campo {vlrTotAquis} de S-1250."
        ),
    )

    eso11_vrCPDescPR = fields.Float(
        string="o valor",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "o valor da contribuição previdenciária descontada pelo adquirente"
            " de produção de produtor rural - sub-rogação.\nOrigem: somatório "
            "do campo {vrCpDescPR} de S-1250."
        ),
    )

    eso11_vrCPNRet = fields.Float(
        string="Valor da contribuição previdenciária",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição previdenciária que deixou de ser retida "
            "pelo declarante em decorrência de decisão/sentença judicial."
        ),
    )

    eso11_vrRatNRet = fields.Float(
        string="Valor da GILRAT",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da GILRAT, incidente sobre a aquisição de produção rural de"
            " produtor rural, cuja retenção deixou de ser efetuada em "
            "decorrência de decisão/sentença judicial."
        ),
    )

    eso11_vrSenarNRet = fields.Float(
        string="Valor da contribuição destinada ao SENAR",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição destinada ao SENAR, incidente sobre a "
            "aquisição de produção rural de produtor rural pessoa "
            "física/segurado especial, que deixou de ser retida em decorrência"
            " de decisão/sentença judicial."
        ),
    )

    eso11_vrCPCalcPR = fields.Float(
        string="Valor calculado relativo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor calculado relativo à contribuição previdenciária do "
            "produtor rural, de acordo com {indAquis}(./indAquis), conforme "
            "segue:\na) {indAquis}(./indAquis) = [1, 2]: "
            "{vlrAquis}(./vlrAquis) x 1,2%;\nb) {indAquis}(./indAquis) = [3]: "
            "{vlrAquis}(./vlrAquis) x 1,7%;\nc) {indAquis}(./indAquis) = [4, "
            "5, 6]: 0 (zero)."
        ),
    )

    eso11_vrRatDescPR = fields.Float(
        string="Valor da contribuição destinada",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição destinada ao financiamento dos benefícios "
            "concedidos em razão do grau de incidência da incapacidade "
            "laborativa decorrente dos riscos ambientais do trabalho, "
            "incidente sobre a aquisição de produção rural de produtor rural."
        ),
    )

    eso11_vrRatCalcPR = fields.Float(
        string="Valor calculado relativo (vrRatCalcPR)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor calculado relativo à contribuição GILRAT devida pelo "
            "produtor rural, de acordo com {indAquis}(./indAquis), conforme "
            "segue:\na) {indAquis}(./indAquis) = [1, 2, 3]: "
            "{vlrAquis}(./vlrAquis) x 0,1%;\nb) {indAquis}(./indAquis) = [4, "
            "5, 6]: 0 (zero)."
        ),
    )

    eso11_vrSenarDesc = fields.Float(
        string="vrSenarDesc",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição destinada ao SENAR, incidente sobre a "
            "aquisição de produção rural de produtor rural pessoa "
            "física/segurado especial.\nOrigem: campo {vrSenarDesc} de S-1250."
        ),
    )

    eso11_vrSenarCalc = fields.Float(
        string="Valor calculado da contribuição devida",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor calculado da contribuição devida pelo produtor rural ao "
            "SENAR, conforme segue:\na) {indAquis}(./indAquis) = [1, 2, 4, 5]:"
            " {vlrAquis}(./vlrAquis) x 0,2%;\nb) {indAquis}(./indAquis) = [3, "
            "6]: 0 (zero).\nOBS.: No período de 04/2020 a 06/2020, a alíquota "
            "deve ser 0,1%."
        ),
    )


class BasesComerc(models.AbstractModel):
    """Informações da comercialização da produção
    DESCRICAO_COMPLETA:Informações de bases de cálculo relativas à comercialização
    da produção rural da Pessoa Física.
    Informações desse grupo conforme informado pelo contribuinte em S-1260.
    CHAVE_GRUPO: {indComerc}
    CONDICAO_GRUPO: O (se houver evento S-1260 válido na competência relativo ao
    estabelecimento identificado em {ideEstab/nrInsc}(../nrInsc)); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basescomerc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.BasesComerc"

    eso11_indComerc = fields.Selection(
        TS_INDCOMERC,
        string="Indicativo de comercialização",
        xsd_required=True,
        xsd_type="TS_indComerc",
        help=(
            "Indicativo de comercialização.\nOrigem: campo "
            "{indComerc}(1260_infoComProd_ideEstabel_tpComerc_indComerc) de "
            "S-1260."
        ),
    )

    eso11_vrBcComPR = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da comercialização da produção rural do "
            "produtor rural PF/segurado especial a outra PF no varejo ou a "
            "outro produtor rural PF/segurado especial ou no mercado externo, "
            "conforme {indComerc}(./indComerc).\nOrigem: campo "
            "{vrTotCom}(1260_infoComProd_ideEstabel_tpComerc_vrTotCom) de "
            "S-1260."
        ),
    )

    eso11_vrCPSusp = fields.Float(
        string="Valor da contribuição previdenciária",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição previdenciária com exigibilidade "
            "suspensa.\nOrigem: campo {vrCPSusp}(1260_infoComProd_ideEstabel_t"
            "pComerc_infoProcJud_vrCPSusp) de S-1260."
        ),
    )

    eso11_vrRatSusp = fields.Float(
        string="Valor da contribuição para GILRAT",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição para GILRAT com exigibilidade "
            "suspensa.\nOrigem: campo {vrRatSusp}(1260_infoComProd_ideEstabel_"
            "tpComerc_infoProcJud_vrRatSusp) de S-1260."
        ),
    )

    eso11_vrSenarSusp = fields.Float(
        string="Valor da contribuição para o SENAR",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição para o SENAR com exigibilidade "
            "suspensa.\nOrigem: campo {vrSenarSusp}(1260_infoComProd_ideEstabe"
            "l_tpComerc_infoProcJud_vrSenarSusp) de S-1260."
        ),
    )


class InfoCrestab(models.AbstractModel):
    """Códigos de Receita por estabelecimento
    DESCRICAO_COMPLETA:Informações das contribuições sociais devidas à Previdência
    Social e Outras Entidades e Fundos, consolidadas por estabelecimento e por
    Código de Receita - CR.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocrestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.IdeEstab.InfoCrestab"

    eso11_tpCR = fields.Char(string="tpCR", xsd_required=True)

    eso11_vrCR = fields.Float(
        string="Valor correspondente ao CR apurado",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor correspondente ao CR apurado.\nValidação: Deve ser apurado "
            "de acordo com a legislação em vigor na competência.\nDeve ser "
            "maior que 0 (zero)."
        ),
    )

    eso11_vrSuspCR = fields.Float(
        string="Valor suspenso correspondente",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor suspenso correspondente ao CR apurado.\nValidação: Deve ser"
            " apurado de acordo com as informações de processos judiciais e "
            "administrativos."
        ),
    )


class InfoCrcontrib(models.AbstractModel):
    """Totalizador dos Códigos de Receita do contribuinte
    DESCRICAO_COMPLETA:Informações consolidadas das contribuições sociais devidas à
    Previdência Social e Outras Entidades e Fundos, por Código de Receita - CR.
    CHAVE_GRUPO: {tpCR}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocrcontrib"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCs.InfoCs.InfoCrcontrib"

    eso11_tpCR = fields.Char(string="tpCR", xsd_required=True)

    eso11_vrCR = fields.Float(
        string="Valor correspondente ao CR apurado",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor correspondente ao CR apurado.\nValidação: Deve ser apurado "
            "de acordo com a legislação em vigor na competência.\nDeve ser "
            "maior que 0 (zero)."
        ),
    )

    eso11_vrCRSusp = fields.Float(
        string="Valor do tributo",
        xsd_type="TS_valorMonetario",
        help="Valor do tributo com exigibilidade suspensa.",
    )
