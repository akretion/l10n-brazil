# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSGRAUEXP,
    TSNATATIVIDADE,
    TSSIMNAO,
    TSTMPPARC,
    TSTPCONTR,
    TSTPINSC12,
    TSTPINSC134,
    TSTPREGPREV123,
    TSTPREGTRAB,
    TSUF,
    TSUNDSALFIXO,
    TIdeEventoTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtProcTrab/v_S_01_01_00"

"Indicar o âmbito de celebração do acordo."
INFOCCP_TPCCP = [
    ("1", "CCP no âmbito de empresa"),
    ("2", "CCP no âmbito de sindicato"),
    ("3", "NINTER"),
]

"""Tipo de contrato a que se refere o processo judicial ou a demanda
    submetida à CCP ou ao NINTER."""
INFOCONTR_TPCONTR = [
    (
        "1",
        "Trabalhador com vínculo formalizado, sem alteração nas datas de admissão e de desligamento",
    ),
    ("2", "Trabalhador com vínculo formalizado, com alteração na data de admissão"),
    (
        "3",
        "Trabalhador com vínculo formalizado, com inclusão ou alteração de data de desligamento",
    ),
    (
        "4",
        "Trabalhador com vínculo formalizado, com alteração nas datas de admissão e de desligamento",
    ),
    ("5", "Empregado com reconhecimento de vínculo"),
    (
        "6",
        "Trabalhador sem vínculo de emprego/estatutário (TSVE), sem reconhecimento de vínculo empregatício",
    ),
]

"Informar a origem do processo/demanda."
INFOPROCESSO_ORIGEM = [
    ("1", "Processo judicial"),
    ("2", "Demanda submetida à CCP ou ao NINTER"),
]

"""Motivo do término do diretor não empregado, com FGTS.
    Validação: Informação obrigatória e exclusiva se
    {infoContr/codCateg}(2500_ideTrab_infoContr_codCateg) = [721]."""
INFOTERM_MTVDESLIGTSV = [
    (
        "01",
        "Exoneração do diretor não empregado sem justa causa, por deliberação da assembleia, dos sócios cotistas ou da autoridade competente",
    ),
    (
        "02",
        "Término de mandato do diretor não empregado que não tenha sido reconduzido ao cargo",
    ),
    ("03", "Exoneração a pedido de diretor não empregado"),
    ("04", "Exoneração do diretor não empregado por culpa recíproca ou força maior"),
    ("05", "Morte do diretor não empregado"),
    (
        "06",
        "Exoneração do diretor não empregado por falência, encerramento ou supressão de parte da empresa",
    ),
    ("99", "Outros"),
]

"""Repercussão do processo trabalhista ou de demanda submetida à CCP ou ao
    NINTER."""
INFOVLR_REPERCPROC = [
    ("1", "Decisão com pagamento de verbas de natureza remuneratória"),
    ("2", "Decisão sem pagamento de verbas de natureza remuneratória"),
]

"""Preencher com o código correspondente ao tipo de inscrição, conforme
    Tabela 05.
    Validação: Somente é possível informar [5] se {dtTransf}(./dtTransf) for igual
    ou anterior a [1999-06-30].
    Somente é possível informar [6] se {dtTransf}(./dtTransf) for igual ou anterior
    a [2011-12-31]."""
SUCESSAOVINC_TPINSC = [
    ("1", "CNPJ"),
    ("2", "CPF"),
    ("5", "CGC"),
    ("6", "CEI"),
]


class ESocial(models.AbstractModel):
    "S-2500 - Processo Trabalhista"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtProcTrab = fields.Many2one(
        comodel_name="eso.11.evtproctrab",
        string="Evento Processo Trabalhista",
        xsd_required=True,
        help=(
            "Evento Processo Trabalhista.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_BASE"
            "S_PROC_TRAB\nREGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR\nREGRA:REGRA"
            "_COMPATIBILIDADE_CATEGORIA_CLASSTRIB\nREGRA:REGRA_ENVIO_PROC_FECH"
            "AMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EXISTE_INFO_EMPRE"
            "GADOR\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_MUDANCA_CATEG_NAT_A"
            "TIV\nREGRA:REGRA_UNICIDADE_CONTRATUAL\nREGRA:REGRA_VALIDA_EMPREGA"
            "DOR\nREGRA:REGRA_VALIDA_MATRICULA\nREGRA:REGRA_VALIDA_PROC_TRAB\n"
            "REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"
        ),
    )


class EvtProcTrab(models.AbstractModel):
    """Evento Processo Trabalhista.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_BASES_PROC_TRAB
    REGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR
    REGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_MUDANCA_CATEG_NAT_ATIV
    REGRA:REGRA_UNICIDADE_CONTRATUAL
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_MATRICULA
    REGRA:REGRA_VALIDA_PROC_TRAB
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtproctrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.ideempregador",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do empregador ou do contribuinte que"
            " está prestando a informação.\nCHAVE_GRUPO: {tpInsc*}, {nrInsc*}"
        ),
    )

    eso11_infoProcesso = fields.Many2one(
        comodel_name="eso.11.infoprocesso",
        string="Informações do processo judicial",
        xsd_required=True,
        help=(
            "Informações do processo judicial ou de demanda submetida à CCP ou"
            " ao NINTER.\nCHAVE_GRUPO: {nrProcTrab*}\nDESCRICAO_COMPLETA: "
            "Informações do processo judicial ou de demanda submetida à "
            "Comissão de Conciliação Prévia (CCP) ou ao Núcleo Intersindical "
            "de Conciliação Trabalhista (NINTER)."
        ),
    )

    eso11_ideTrab = fields.Many2one(
        comodel_name="eso.11.idetrab",
        string="Informações do trabalhador",
        xsd_required=True,
        help="Informações do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}",
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador ou do contribuinte que está
    prestando a informação.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeEmpregador"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
        help=(
            "o código correspondente ao tipo de inscrição do empregador ou "
            "contribuinte que está prestando a informação, conforme Tabela 05."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do empregador",
        xsd_required=True,
        xsd_type="TS_nrInsc_8_11_14",
        help=(
            "número de inscrição do empregador ou contribuinte que está "
            "prestando a informação, de acordo com o tipo de inscrição "
            "indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e conforme "
            "informado em S-1000."
        ),
    )

    eso11_ideResp = fields.Many2one(
        comodel_name="eso.11.ideresp",
        string="Identificação do contribuinte",
        help=(
            "Identificação do contribuinte, caso tenha havido imposição de "
            "responsabilidade indireta.\nDESCRICAO_COMPLETA: Informações de "
            "identificação do contribuinte (responsável direto), caso tenha "
            "havido imposição de responsabilidade indireta.\nCONDICAO_GRUPO: "
            "OC"
        ),
    )


class IdeResp(models.AbstractModel):
    """Identificação do contribuinte, caso tenha havido imposição de
    responsabilidade indireta.
    DESCRICAO_COMPLETA: Informações de identificação do contribuinte (responsável
    direto), caso tenha havido imposição de responsabilidade indireta.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideresp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeEmpregador.IdeResp"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo "
            "{ideResp/tpInsc}(./tpInsc).\nValidação: Deve ser um identificador"
            " válido e:\na) Se {ideResp/tpInsc}(./tpInsc) = [1], deve ser "
            "informado com 14 (catorze) algarismos. Se o empregador for pessoa"
            " jurídica, a raiz do CNPJ informado deve ser diferente de "
            "{ideEmpregador/nrInsc}(../nrInsc), exceto se "
            "{ideEmpregador/nrInsc}(../nrInsc) tiver 14 (catorze) "
            "algarismos.\nb) Se {ideResp/tpInsc}(./tpInsc) = [2], deve ser "
            "diferente do CPF do trabalhador. Se o empregador for pessoa "
            "física, também deve ser diferente do CPF do empregador."
        ),
    )


class InfoProcesso(models.AbstractModel):
    """Informações do processo judicial ou de demanda submetida à CCP ou ao
    NINTER.
    CHAVE_GRUPO: {nrProcTrab*}
    DESCRICAO_COMPLETA: Informações do processo judicial ou de demanda submetida à
    Comissão de Conciliação Prévia (CCP) ou ao Núcleo Intersindical de
    Conciliação Trabalhista (NINTER)."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoprocesso"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.InfoProcesso"

    eso11_origem = fields.Selection(
        INFOPROCESSO_ORIGEM, string="origem", xsd_required=True
    )

    eso11_nrProcTrab = fields.Char(
        string="Número do processo trabalhista",
        xsd_required=True,
        xsd_type="TS_nrProcTrab",
        help=(
            "Número do processo trabalhista, da ata ou número de identificação"
            " da conciliação.\nValidação: Se {origem}(./origem) = [1], deve "
            "ser um processo judicial válido, com 20 (vinte) algarismos. Se "
            "{origem}(./origem) = [2], deve possuir 15 (quinze) algarismos."
        ),
    )

    eso11_obsProcTrab = fields.Char(
        string="Observações relacionadas",
        xsd_type="TS_texto_999",
        help=(
            "Observações relacionadas ao processo judicial ou à demanda "
            "submetida à CCP ou ao NINTER."
        ),
    )

    eso11_dadosCompl = fields.Many2one(
        comodel_name="eso.11.dadoscompl",
        string="Informações complementares",
        xsd_required=True,
        help="Informações complementares do processo ou da demanda.",
    )


class DadosCompl(models.AbstractModel):
    "Informações complementares do processo ou da demanda."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dadoscompl"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.InfoProcesso.DadosCompl"

    eso11_infoProcJud = fields.Many2one(
        comodel_name="eso.11.infoprocjud",
        string="Informações complementares",
        choice="dadoscompl",
        xsd_choice_required=True,
        help=(
            "Informações complementares do processo judicial.\nCONDICAO_GRUPO:"
            " O (se {origem}(2500_infoProcesso_origem) = [1]); N (nos demais "
            "casos)"
        ),
    )

    eso11_infoCCP = fields.Many2one(
        comodel_name="eso.11.infoccp",
        string="Informações complementares (infoCCP)",
        choice="dadoscompl",
        xsd_choice_required=True,
        help=(
            "Informações complementares da demanda submetida à CCP ou ao "
            "NINTER.\nCONDICAO_GRUPO: O (se {origem}(2500_infoProcesso_origem)"
            " = [2]); N (nos demais casos)"
        ),
    )


class InfoProcJud(models.AbstractModel):
    """Informações complementares do processo judicial.
    CONDICAO_GRUPO: O (se {origem}(2500_infoProcesso_origem) = [1]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoprocjud"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.InfoProcesso.DadosCompl.InfoProcJud"

    eso11_dtSent = fields.Date(
        string="data do(a)",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "data do(a):\na) Trânsito em julgado da decisão líquida proferida "
            "no processo trabalhista;\nb) Homologação de acordo judicial; "
            "ou\nc) Trânsito em julgado da decisão homologatória dos cálculos "
            "de liquidação da sentença.\nValidação: Deve ser igual ou anterior"
            " à data atual."
        ),
    )

    eso11_ufVara = fields.Selection(
        TS_UF,
        string="a sigla da Unidade da Federação onde",
        xsd_required=True,
        xsd_type="TS_uf",
        help=(
            "a sigla da Unidade da Federação onde está localizada a Vara em "
            "que o processo tramitou."
        ),
    )

    eso11_codMunic = fields.Char(
        string="codMunic", xsd_required=True, xsd_type="TS_codMunic"
    )

    eso11_idVara = fields.Char(string="idVara", xsd_required=True)


class InfoCcp(models.AbstractModel):
    """Informações complementares da demanda submetida à CCP ou ao NINTER.
    CONDICAO_GRUPO: O (se {origem}(2500_infoProcesso_origem) = [2]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoccp"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.InfoProcesso.DadosCompl.InfoCcp"

    eso11_dtCCP = fields.Date(
        string="Data da celebração",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data da celebração do acordo celebrado perante CCP ou "
            "Ninter.\nValidação: Deve ser igual ou anterior à data atual."
        ),
    )

    eso11_tpCCP = fields.Selection(INFOCCP_TPCCP, string="tpCCP", xsd_required=True)

    eso11_cnpjCCP = fields.Char(
        string="Identificar o CNPJ",
        xsd_type="TS_cnpj",
        help=(
            "Identificar o CNPJ do sindicato representativo do trabalhador, no"
            " âmbito da CCP ou NINTER.\nValidação: O preenchimento é "
            "obrigatório e exclusivo se {tpCCP}(./tpCCP) for igual a [2] ou "
            "[3]. Deve ser um número de CNPJ válido."
        ),
    )


class IdeTrab(models.AbstractModel):
    """Informações do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_nmTrab = fields.Char(
        string="nome do trabalhador",
        xsd_type="TS_nmTrab",
        help=(
            "nome do trabalhador.\nValidação: Preenchimento obrigatório se não"
            " existir contrato com {indContr}(2500_ideTrab_infoContr_indContr)"
            " = [S]."
        ),
    )

    eso11_dtNascto = fields.Date(
        string="a data de nascimento",
        xsd_type="TS_dtNascto",
        help=(
            "a data de nascimento.\nValidação: Preenchimento obrigatório se "
            "não existir contrato com "
            "{indContr}(2500_ideTrab_infoContr_indContr) = [S]. Deve ser maior"
            " ou igual que 01/01/1890 e menor ou igual à data atual."
        ),
    )

    eso11_dependente = fields.One2many(
        "eso.11.dependente",
        "eso11_dependente_ideTrab_id",
        string="Informações dos dependentes",
        help=(
            "Informações dos dependentes.\nCHAVE_GRUPO: "
            "{cpfDep}\nCONDICAO_GRUPO: OC (se existir contrato com "
            "{indContr}(2500_ideTrab_infoContr_indContr) = [N]); N (nos demais"
            " casos)"
        ),
    )

    eso11_infoContr = fields.One2many(
        "eso.11.infocontr",
        "eso11_infoContr_ideTrab_id",
        string="Informações do contrato de trabalho",
        help=(
            "Informações do contrato de trabalho.\nCHAVE_GRUPO: {matricula}, "
            "{codCateg}, {dtInicio}"
        ),
    )


class Dependente(models.AbstractModel):
    """Informações dos dependentes.
    CHAVE_GRUPO: {cpfDep}
    CONDICAO_GRUPO: OC (se existir contrato com
    {indContr}(2500_ideTrab_infoContr_indContr) = [N]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dependente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.Dependente"

    eso11_cpfDep = fields.Char(
        string="Número de inscrição no CPF",
        xsd_required=True,
        xsd_type="TS_cpfDep",
        help=(
            "Número de inscrição no CPF.\nValidação: Deve ser um número de CPF"
            " válido e diferente do CPF do trabalhador. Em arquivo de "
            "empregador Pessoa Física, também deve ser diferente do CPF "
            "informado em {ideEmpregador/nrInsc}(2500_ideEmpregador_nrInsc)."
        ),
    )

    eso11_tpDep = fields.Char(string="tpDep", xsd_required=True, xsd_type="TS_tpDep")

    eso11_descDep = fields.Char(
        string="descrição da dependência",
        xsd_type="TS_codigo_esocial",
        help=(
            "descrição da dependência.\nValidação: Informação obrigatória e "
            "exclusiva se {tpDep}(./tpDep) = [99]."
        ),
    )


class InfoContr(models.AbstractModel):
    """Informações do contrato de trabalho.
    CHAVE_GRUPO: {matricula}, {codCateg}, {dtInicio}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocontr"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr"

    eso11_tpContr = fields.Selection(
        INFOCONTR_TPCONTR, string="tpContr", xsd_required=True
    )

    eso11_indContr = fields.Selection(
        TS_SIM_NAO,
        string="Indicativo",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo se o contrato possui informação no evento S-2190, "
            "S-2200 ou S-2300 no declarante.\nValidação: Deve ser igual a [N] "
            "se o grupo {ideResp}(2500_ideEmpregador_ideResp) for informado."
        ),
    )

    eso11_dtAdmOrig = fields.Date(
        string="a data de admissão original do vínculo",
        xsd_type="xs:date",
        help=(
            "a data de admissão original do vínculo (data de admissão antes da"
            " alteração).\nValidação: Preenchimento obrigatório e exclusivo se"
            " {infoContr/tpContr}(./tpContr) = [2, 4] e se "
            "{indContr}(./indContr) = [N]. Deve ser posterior à data de "
            "nascimento do trabalhador."
        ),
    )

    eso11_indReint = fields.Selection(
        TS_SIM_NAO,
        string="Indicativo de reintegração do empregado",
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo de reintegração do empregado.\nValidação: "
            "Preenchimento obrigatório e exclusivo se "
            "{infoContr/tpContr}(./tpContr) for diferente de [6] e "
            "{indContr}(./indContr) = [S]. Caso seja informado [S], deve "
            "existir evento de reintegração (S-2298) para a matrícula abaixo "
            "informada, com o número de processo nesse evento igual a "
            "{nrProcTrab}(2500_infoProcesso_nrProcTrab)."
        ),
    )

    eso11_indCateg = fields.Selection(
        TS_SIM_NAO,
        string="Indicativo se houve reconhecimento",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo se houve reconhecimento de categoria do trabalhador "
            "diferente da informada (no eSocial ou na GFIP) pelo declarante."
        ),
    )

    eso11_indNatAtiv = fields.Selection(
        TS_SIM_NAO,
        string="indNatAtiv",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo se houve reconhecimento de natureza da atividade "
            "diferente da cadastrada pelo declarante."
        ),
    )

    eso11_indMotDeslig = fields.Selection(
        TS_SIM_NAO,
        string="indMotDeslig",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo se houve reconhecimento de motivo de desligamento "
            "diferente do informado pelo declarante."
        ),
    )

    eso11_indUnic = fields.Selection(
        TS_SIM_NAO,
        string="indUnic",
        xsd_type="TS_sim_nao",
        help=(
            "Indicativo se houve reconhecimento de unicidade contratual "
            "(declaração da continuidade do contrato de trabalho, considerando"
            " como único dois ou mais vínculos sucessivos informados no "
            "eSocial).\nValidação: Deve ser igual a [N] se o grupo "
            "{ideResp}(2500_ideEmpregador_ideResp) for informado."
        ),
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nSe "
            "{indContr}(./indContr) = [N], deve ser criada uma matrícula para "
            "o trabalhador.\nSe {indContr}(./indContr) = [S], deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2190, S-2200 ou S-2300 do respectivo contrato. O campo não deve"
            " ser informado somente no caso de TSVE cadastrado em versão do "
            "leiaute anterior a S-1.0.\nSe {indUnic}(./indUnic) = [S], deve "
            "ser preenchida a matrícula que incorporará as demais (informadas "
            "no grupo "
            "{unicContr}(2500_ideTrab_infoContr_unicContr)).\nValidação: Se "
            "{indContr}(./indContr) = [N], deve ser aplicada a regra de "
            "validação abaixo. Além disso, o valor informado neste campo não "
            "pode conter a expressão 'eSocial' nas 7 (sete) primeiras "
            "posições. Se {indContr}(./indContr) = [S], deve corresponder a "
            "uma matrícula existente no Registro de Eventos Trabalhistas - RET"
            " para o respectivo trabalhador.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador.\nValidação: Informação "
            "obrigatória e exclusiva se {indContr}(./indContr) = [N] ou se o "
            "campo {matricula}(./matricula) não estiver preenchido. Deve ser "
            "um código válido e existente na Tabela 01 e obedecer ao que "
            "segue:\na) Se o campo {matricula}(./matricula) não estiver "
            "preenchido, deve ser igual ao código de categoria informado no "
            "evento S-2300;\nb) Se {indContr}(./indContr) = [N] e "
            "{infoContr/tpContr}(./tpContr) for diferente de [6], deve ser um "
            "código de categoria compatível com o evento S-2200 (conforme "
            "regra de validação abaixo);\nc) Se {indContr}(./indContr) = [N] e"
            " {infoContr/tpContr}(./tpContr) = [6], deve ser um código de "
            "categoria compatível com o evento S-2300 (conforme regra de "
            "validação abaixo).\nREGRA:REGRA_COMPATIB_CATEG_EVENTO"
        ),
    )

    eso11_dtInicio = fields.Date(
        string="Data de início de TSVE",
        xsd_type="xs:date",
        help=(
            "Data de início de TSVE, que pode ser:\na) Para o cooperado, a "
            "data de ingresso na cooperativa;\nb) Para o diretor não "
            "empregado, a data de posse no cargo;\nc) Para o dirigente "
            "sindical, a data de início do mandato no sindicato;\nd) Para o "
            "estagiário, a data de início do estágio;\ne) Para o trabalhador "
            "avulso, a data de ingresso no Órgão Gestor de Mão de Obra - OGMO "
            "ou no sindicato;\nf) Para o servidor público exercente de cargo "
            "eletivo, a data de início do mandato;\ng) Para os demais "
            "trabalhadores, a data de início das atividades.\nValidação: "
            "Informação obrigatória e exclusiva se "
            "({infoContr/tpContr}(./tpContr) = [6] e {indContr}(./indContr) = "
            "[N]) ou se o campo {matricula}(./matricula) não estiver "
            "preenchido. Deve ser posterior à data de nascimento do "
            "trabalhador. Se o campo {matricula}(./matricula) não estiver "
            "preenchido, deve ser igual à data de início informada no evento "
            "S-2300."
        ),
    )

    eso11_infoCompl = fields.Many2one(
        comodel_name="eso.11.infocompl",
        string="Informações complementares do contrato",
        help=(
            "Informações complementares do contrato de "
            "trabalho.\nCONDICAO_GRUPO: O (se {indContr}(../indContr) = [N]); "
            "N (nos demais casos)"
        ),
    )

    eso11_mudCategAtiv = fields.One2many(
        "eso.11.mudcategativ",
        "eso11_mudCategAtiv_infoContr_id",
        string="Informação do novo código",
        help=(
            "Informação do novo código de categoria e/ou da nova natureza da "
            "atividade.\nDESCRICAO_COMPLETA:Informação do novo código de "
            "categoria e/ou da nova natureza da atividade, no caso de "
            "reconhecimento judicial nesse sentido.\nCHAVE_GRUPO: "
            "{dtMudCategAtiv}\nCONDICAO_GRUPO: OC (se {indCateg}(../indCateg) "
            "= [S] ou se {indNatAtiv}(../indNatAtiv) = [S]); N (nos demais "
            "casos)"
        ),
    )

    eso11_unicContr = fields.One2many(
        "eso.11.uniccontr",
        "eso11_unicContr_infoContr_id",
        string="Informações",
        help=(
            "Informações dos vínculos/contratos "
            "incorporados.\nDESCRICAO_COMPLETA:Informações dos "
            "vínculos/contratos incorporados, no caso de reconhecimento de "
            "unicidade contratual.\nCHAVE_GRUPO: {matUnic}, {codCateg}, "
            "{dtInicio}\nCONDICAO_GRUPO: O (se "
            "{indUnic}(2500_ideTrab_infoContr_indUnic) = [S]); N (nos demais "
            "casos)"
        ),
    )

    eso11_ideEstab = fields.Many2one(
        comodel_name="eso.11.ideestab",
        string="Identificação do estabelecimento",
        xsd_required=True,
        help=(
            "Identificação do "
            "estabelecimento.\nDESCRICAO_COMPLETA:Identificação do "
            "estabelecimento responsável pelo pagamento ao trabalhador dos "
            "valores informados neste evento."
        ),
    )


class InfoCompl(models.AbstractModel):
    """Informações complementares do contrato de trabalho.
    CONDICAO_GRUPO: O (se {indContr}(../indContr) = [N]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocompl"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl"

    eso11_codCBO = fields.Char(
        string="Classificação Brasileira de Ocupações",
        xsd_type="TS_cbo",
        help=(
            "Classificação Brasileira de Ocupações - CBO.\nValidação: "
            "Preenchimento obrigatório se {infoContr/codCateg}(../codCateg) "
            "for diferente de [901, 903, 904]). Se informado, deve ser um "
            "código válido e existente na tabela de CBO, com 6 (seis) "
            "posições."
        ),
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="Natureza da atividade",
        xsd_type="TS_natAtividade",
        help=(
            "Natureza da atividade.\nValidação: Preenchimento obrigatório se "
            "{infoContr/codCateg}(../codCateg) for relativo a 'Empregado', "
            "'Agente Público', 'Avulso' ou igual a [401, 731, 734, 738]. Não "
            "deve ser preenchido se {infoContr/codCateg}(../codCateg) = [721, "
            "722, 771, 901].\nSe {infoContr/codCateg}(../codCateg) = [104], "
            "deve ser preenchido com [1]. Se {infoContr/codCateg}(../codCateg)"
            " = [102], deve ser preenchido com [2]."
        ),
    )

    eso11_remuneracao = fields.One2many(
        "eso.11.remuneracao",
        "eso11_remuneracao_infoCompl_id",
        string="Informações da remuneração",
        help=(
            "Informações da remuneração e periodicidade de "
            "pagamento.\nCHAVE_GRUPO: {dtRemun}\nCONDICAO_GRUPO: N (se "
            "({infoContr/tpContr}(../../tpContr) for diferente de [6] e "
            "{tpRegTrab}(../infoVinc_tpRegTrab) = [2]); O (se "
            "({infoContr/tpContr}(../../tpContr) for diferente de [6] e "
            "{tpRegTrab}(../infoVinc_tpRegTrab) = [1]) ou se "
            "{infoContr/codCateg}(../../codCateg) = [721, 722, 771]); OC (nos "
            "demais casos)"
        ),
    )

    eso11_infoVinc = fields.Many2one(
        comodel_name="eso.11.infovinc",
        string="Informações sobre o vínculo trabalhista",
        help=(
            "Informações sobre o vínculo trabalhista.\nCONDICAO_GRUPO: O (se "
            "{infoContr/tpContr}(2500_ideTrab_infoContr_tpContr) for diferente"
            " de [6]); N (nos demais casos)"
        ),
    )

    eso11_infoTerm = fields.Many2one(
        comodel_name="eso.11.infoterm",
        string="Informações de término de TSVE",
        help=(
            "Informações de término de TSVE.\nCONDICAO_GRUPO: OC (se "
            "{infoContr/tpContr}(2500_ideTrab_infoContr_tpContr) = [6]; N (nos"
            " demais casos)"
        ),
    )


class Remuneracao(models.AbstractModel):
    """Informações da remuneração e periodicidade de pagamento.
    CHAVE_GRUPO: {dtRemun}
    CONDICAO_GRUPO: N (se ({infoContr/tpContr}(../../tpContr) for diferente de [6]
    e {tpRegTrab}(../infoVinc_tpRegTrab) = [2]); O (se
    ({infoContr/tpContr}(../../tpContr) for diferente de [6] e
    {tpRegTrab}(../infoVinc_tpRegTrab) = [1]) ou se
    {infoContr/codCateg}(../../codCateg) = [721, 722, 771]); OC (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.remuneracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.Remuneracao"

    eso11_dtRemun = fields.Date(
        string="Data a partir da qual as informações",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data a partir da qual as informações de remuneração e "
            "periodicidade de pagamento estão vigentes.\nValidação: Deve ser "
            "igual ou posterior à data de admissão (ou de início) e igual ou "
            "anterior à data de desligamento (ou de término), se informada."
        ),
    )

    eso11_vrSalFx = fields.Float(
        string="Salário base do trabalhador",
        xsd_required=True,
        xsd_type="TS_vrSalFx",
        help=(
            "Salário base do trabalhador, correspondente à parte fixa da "
            "remuneração em {dtRemun}(./dtRemun).\nValidação: Se "
            "{undSalFixo}(./undSalFixo) for igual a [7], preencher com 0 "
            "(zero)."
        ),
    )

    eso11_undSalFixo = fields.Selection(
        TS_UNDSALFIXO, string="undSalFixo", xsd_required=True, xsd_type="TS_undSalFixo"
    )

    eso11_dscSalVar = fields.Char(
        string="Descrição do salário por tarefa",
        xsd_type="TS_texto_999",
        help=(
            "Descrição do salário por tarefa ou variável e como este é "
            "calculado. Ex.: Comissões pagas no percentual de 10% sobre as "
            "vendas.\nValidação: Preenchimento obrigatório se "
            "{undSalFixo}(./undSalFixo) for igual a [6, 7]."
        ),
    )


class InfoVinc(models.AbstractModel):
    """Informações sobre o vínculo trabalhista.
    CONDICAO_GRUPO: O (se {infoContr/tpContr}(2500_ideTrab_infoContr_tpContr) for
    diferente de [6]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.InfoVinc"

    eso11_tpRegTrab = fields.Selection(
        TS_TPREGTRAB,
        string="Tipo de regime trabalhista",
        xsd_required=True,
        xsd_type="TS_tpRegTrab",
        help=(
            "Tipo de regime trabalhista.\nValidação: Se "
            "{infoContr/codCateg}(../../codCateg) = [104], deve ser preenchido"
            " com [1]."
        ),
    )

    eso11_tpRegPrev = fields.Selection(
        TS_TPREGPREV_1_2_3,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev_1_2_3",
        help=(
            "Tipo de regime previdenciário.\nValidação: Se "
            "{infoContr/codCateg}(../../codCateg) = [104], deve ser preenchido"
            " com [1]. Se {infoContr/codCateg}(../../codCateg) = [101, 102, "
            "103, 105, 106, 107, 108, 111], não pode ser preenchido com [2]."
        ),
    )

    eso11_dtAdm = fields.Date(
        string="a data de admissão do trabalhador",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de admissão do trabalhador.\nValidação: Deve ser posterior"
            " à data de nascimento do trabalhador."
        ),
    )

    eso11_tmpParc = fields.Selection(
        TS_TMPPARC,
        string="o código relativo ao tipo de contrato",
        xsd_type="TS_tmpParc",
        help=(
            "o código relativo ao tipo de contrato em tempo parcial.\nInformar"
            " este campo apenas no caso de empregado submetido a horário de "
            "trabalho (Capítulo II do Título II da CLT).\nValidação: "
            "Informação obrigatória e exclusiva se {tpRegTrab}(./tpRegTrab) = "
            "[1]. O código [1] só é válido se "
            "{infoContr/codCateg}(../../codCateg) = [104]. Os códigos [2, 3] "
            "não são válidos se {infoContr/codCateg}(../../codCateg) = [104]."
        ),
    )

    eso11_duracao = fields.Many2one(
        comodel_name="eso.11.duracao",
        string="Duração do contrato de trabalho",
        help=(
            "Duração do contrato de trabalho.\nCONDICAO_GRUPO: O (se "
            "{tpRegTrab}(../tpRegTrab) = [1]); N (nos demais casos)"
        ),
    )

    eso11_observacoes = fields.One2many(
        "eso.11.observacoes",
        "eso11_observacoes_infoVinc_id",
        string="Observações do contrato de trabalho",
        help="Observações do contrato de trabalho.\nCONDICAO_GRUPO: OC",
    )

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.sucessaovinc",
        string="Grupo de informações da sucessão",
        help=(
            "Grupo de informações da sucessão de vínculo "
            "trabalhista/estatutário.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoDeslig = fields.Many2one(
        comodel_name="eso.11.infodeslig",
        string="Informações do desligamento",
        xsd_required=True,
        help="Informações do desligamento.\nCONDICAO_GRUPO: O",
    )


class Duracao(models.AbstractModel):
    """Duração do contrato de trabalho.
    CONDICAO_GRUPO: O (se {tpRegTrab}(../tpRegTrab) = [1]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.duracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.InfoVinc.Duracao"

    eso11_tpContr = fields.Selection(
        TS_TPCONTR, string="tpContr", xsd_required=True, xsd_type="TS_tpContr"
    )

    eso11_dtTerm = fields.Date(
        string="Data do término do contrato",
        xsd_type="TS_dtTerm",
        help=(
            "Data do término do contrato por prazo determinado.\nValidação: O "
            "preenchimento é obrigatório se {duracao/tpContr}(./tpContr) = "
            "[2]. Não informar se {duracao/tpContr}(./tpContr) = [1]. Se "
            "preenchido, deve ser igual ou posterior à data de admissão (no "
            "caso de transferência, igual ou posterior a "
            "{sucessaoVinc/dtTransf}(../sucessaoVinc_dtTransf))."
        ),
    )

    eso11_clauAssec = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se o contrato",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se o contrato por prazo determinado contém cláusula "
            "assecuratória do direito recíproco de rescisão antes da data de "
            "seu término.\nValidação: O preenchimento é obrigatório se "
            "{duracao/tpContr}(./tpContr) = [2, 3]. Não preencher se "
            "{duracao/tpContr}(./tpContr) = [1]."
        ),
    )

    eso11_objDet = fields.Char(
        string="Indicação do objeto determinante",
        xsd_type="TS_objDet",
        help=(
            "Indicação do objeto determinante da contratação por prazo "
            "determinado (obra, serviço, safra, etc.).\nValidação: O "
            "preenchimento é obrigatório e exclusivo se "
            "{duracao/tpContr}(./tpContr) = [3]."
        ),
    )


class Observacoes(models.AbstractModel):
    """Observações do contrato de trabalho.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.observacoes"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.InfoVinc.Observacoes"
    )

    eso11_observacao = fields.Char(
        string="Observação relacionada ao contrato",
        xsd_required=True,
        xsd_type="TS_observacao",
        help="Observação relacionada ao contrato de trabalho.",
    )


class SucessaoVinc(models.AbstractModel):
    """Grupo de informações da sucessão de vínculo trabalhista/estatutário.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.sucessaovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.InfoVinc.SucessaoVinc"
    )

    eso11_tpInsc = fields.Selection(
        SUCESSAOVINC_TPINSC, string="tpInsc", xsd_required=True
    )

    eso11_nrInsc = fields.Char(string="nrInsc", xsd_required=True)

    eso11_matricAnt = fields.Char(
        string="Matrícula do trabalhador",
        xsd_type="TS_codigo_esocial",
        help="Matrícula do trabalhador no empregador anterior.",
    )

    eso11_dtTransf = fields.Date(
        string="a data da transferência",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data da transferência do empregado para o empregador "
            "declarante.\nValidação: Deve ser posterior à data de admissão do "
            "trabalhador."
        ),
    )


class InfoDeslig(models.AbstractModel):
    """Informações do desligamento.
    CONDICAO_GRUPO: O"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodeslig"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.InfoVinc.InfoDeslig"
    )

    eso11_dtDeslig = fields.Date(
        string="a data de desligamento do vínculo",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de desligamento do vínculo (último dia "
            "trabalhado).\nValidação: Deve ser igual ou posterior a "
            "{dtAdm}(../dtAdm) e não superior à data atual (data do envio do "
            "evento) acrescida de 10 dias corridos."
        ),
    )

    eso11_mtvDeslig = fields.Char(string="mtvDeslig", xsd_required=True)

    eso11_dtProjFimAPI = fields.Date(
        string="Data projetada para o término",
        xsd_type="xs:date",
        help=(
            "Data projetada para o término do aviso prévio "
            "indenizado.\nValidação: Se informada, deve ser igual ou posterior"
            " a {dtDeslig}(./dtDeslig)."
        ),
    )


class InfoTerm(models.AbstractModel):
    """Informações de término de TSVE.
    CONDICAO_GRUPO: OC (se {infoContr/tpContr}(2500_ideTrab_infoContr_tpContr) =
    [6]; N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoterm"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.InfoCompl.InfoTerm"

    eso11_dtTerm = fields.Date(
        string="Data do término",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data do término.\nValidação: Deve ser igual ou posterior a "
            "{dtInicio}(../../dtInicio) e igual ou anterior à data atual "
            "acrescida de 10 (dez) dias."
        ),
    )

    eso11_mtvDesligTSV = fields.Selection(INFOTERM_MTVDESLIGTSV, string="mtvDesligTSV")


class MudCategAtiv(models.AbstractModel):
    """Informação do novo código de categoria e/ou da nova natureza da
    atividade.
    DESCRICAO_COMPLETA:Informação do novo código de categoria e/ou da nova natureza
    da atividade, no caso de reconhecimento judicial nesse sentido.
    CHAVE_GRUPO: {dtMudCategAtiv}
    CONDICAO_GRUPO: OC (se {indCateg}(../indCateg) = [S] ou se
    {indNatAtiv}(../indNatAtiv) = [S]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.mudcategativ"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.MudCategAtiv"

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador.\nValidação: Deve ser um "
            "código válido e existente na Tabela 01."
        ),
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="Natureza da atividade",
        xsd_type="TS_natAtividade",
        help=(
            "Natureza da atividade.\nValidação: Não informar se "
            "{mudCategAtiv/codCateg}(./codCateg) = [721, 722, 771, 901].\nSe "
            "{mudCategAtiv/codCateg}(./codCateg) = [104], não pode ser "
            "preenchido com [2]. Se {mudCategAtiv/codCateg}(./codCateg) = "
            "[102], não pode ser preenchido com [1]."
        ),
    )

    eso11_dtMudCategAtiv = fields.Date(
        string="Data a partir da qual foi reconhecida",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data a partir da qual foi reconhecida a nova categoria e/ou a "
            "nova natureza da atividade.\nValidação: Deve ser igual ou "
            "posterior à data de admissão (ou de início) e igual ou anterior à"
            " data de desligamento, se informada."
        ),
    )


class UnicContr(models.AbstractModel):
    """Informações dos vínculos/contratos incorporados.
    DESCRICAO_COMPLETA:Informações dos vínculos/contratos incorporados, no caso de
    reconhecimento de unicidade contratual.
    CHAVE_GRUPO: {matUnic}, {codCateg}, {dtInicio}
    CONDICAO_GRUPO: O (se {indUnic}(2500_ideTrab_infoContr_indUnic) = [S]); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.uniccontr"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.UnicContr"

    eso11_matUnic = fields.Char(
        string="matrícula incorporada",
        xsd_type="TS_codigo_esocial",
        help=(
            "matrícula incorporada (matrícula cujo vínculo/contrato passou a "
            "integrar período de unicidade contratual reconhecido "
            "judicialmente). O campo não deve ser informado somente no caso de"
            " TSVE cadastrado em versão do leiaute anterior a "
            "S-1.0.\nValidação: Deve corresponder a uma matrícula existente no"
            " RET para o respectivo trabalhador e diferente do "
            "vínculo/contrato informado em "
            "{infoContr}(2500_ideTrab_infoContr)."
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador (código de categoria cujo "
            "contrato passou a integrar período de unicidade contratual "
            "reconhecido judicialmente).\nValidação: Informação obrigatória e "
            "exclusiva se o campo {matUnic}(./matUnic) não estiver preenchido."
            " Deve ser igual a um código de categoria de contrato cadastrado "
            "no evento S-2300 e diferente do contrato informado em "
            "{infoContr}(2500_ideTrab_infoContr)."
        ),
    )

    eso11_dtInicio = fields.Date(
        string="Data de início de TSVE",
        xsd_type="xs:date",
        help=(
            "Data de início de TSVE (data de início cujo contrato passou a "
            "integrar período de unicidade contratual reconhecido "
            "judicialmente).\nValidação: Informação obrigatória e exclusiva se"
            " o campo {matUnic}(./matUnic) não estiver preenchido. Deve ser "
            "igual a uma data de início de contrato cadastrado no evento "
            "S-2300 e diferente do contrato informado em "
            "{infoContr}(2500_ideTrab_infoContr)."
        ),
    )


class IdeEstab(models.AbstractModel):
    """Identificação do estabelecimento.
    DESCRICAO_COMPLETA:Identificação do estabelecimento responsável pelo pagamento
    ao trabalhador dos valores informados neste evento."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_EstabLot",
        help=(
            "o código correspondente ao tipo de inscrição do estabelecimento, "
            "de acordo com as opções da Tabela 05.\nNo caso de empregador "
            "doméstico, informar [3] (CAEPF).\nValidação: Se "
            "{ideEmpregador/tpInsc}(2500_ideEmpregador_tpInsc) = [1], deve ser"
            " igual a [1, 4]. Se "
            "{ideEmpregador/tpInsc}(2500_ideEmpregador_tpInsc) = [2], deve ser"
            " igual a [3, 4]."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do estabelecimento",
        xsd_required=True,
        xsd_type="TS_nrInsc_EstabLot",
        help=(
            "número de inscrição do estabelecimento do contribuinte de acordo "
            "com o tipo de inscrição indicado no campo acima.\nNo caso de "
            "empregador doméstico, informar os 9 (nove) primeiros dígitos do "
            "CPF do empregador, seguidos de 5 (cinco) dígitos 0 (zero). Por "
            "exemplo, se o CPF do empregador doméstico for 111111111-99, "
            "informar 11111111100000.\nValidação: A inscrição informada deve "
            "ser compatível com {ideEstab/tpInsc}(./tpInsc) e o número deve "
            "constar na base da RFB e pertencer a "
            "{ideEmpregador/nrInsc}(2500_ideEmpregador_nrInsc).\nSe o processo"
            " for referente a empregado doméstico, a inscrição informada deve "
            "ser igual aos 9 (nove) primeiros dígitos do CPF do empregador, "
            "seguidos de 5 (cinco) dígitos 0 (zero)."
        ),
    )

    eso11_infoVlr = fields.Many2one(
        comodel_name="eso.11.infovlr",
        string="Informações dos períodos e valores",
        xsd_required=True,
        help=(
            "Informações dos períodos e "
            "valores.\nDESCRICAO_COMPLETA:Informações dos períodos e valores "
            "decorrentes de processo trabalhista e ainda não declarados no "
            "eSocial."
        ),
    )


class InfoVlr(models.AbstractModel):
    """Informações dos períodos e valores.
    DESCRICAO_COMPLETA:Informações dos períodos e valores decorrentes de processo
    trabalhista e ainda não declarados no eSocial."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infovlr"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab.InfoVlr"

    eso11_compIni = fields.Char(
        string="Competência inicial a que se refere",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "Competência inicial a que se refere o processo ou conciliação, no"
            " formato AAAA-MM.\nValidação: Devem ser obedecidas as seguintes "
            "regras:\na) Se {infoContr/tpContr}(../../tpContr) = [1, 3], deve "
            "ser igual ou posterior ao mês/ano da data de admissão;\nb) Se "
            "{infoContr/tpContr}(../../tpContr) = [2, 4, 5], deve ser igual ao"
            " mês/ano da data de admissão;\nc) Se "
            "{infoContr/tpContr}(../../tpContr) = [6], deve ser igual ou "
            "posterior ao mês/ano da data de início do TSVE."
        ),
    )

    eso11_compFim = fields.Char(
        string="Competência final a que se refere",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "Competência final a que se refere o processo ou conciliação, no "
            "formato AAAA-MM.\nValidação: Deve ser igual ou posterior a "
            "{compIni}(./compIni), igual ou anterior ao mês/ano de "
            "{dtSent}(2500_infoProcesso_dadosCompl_infoProcJud_dtSent) ou "
            "{dtCCP}(2500_infoProcesso_dadosCompl_infoCCP_dtCCP) e:\na) Se "
            "{infoContr/tpContr}(../../tpContr) = [1, 2], deve ser igual ou "
            "anterior ao mês/ano da data de desligamento, se informada;\nb) Se"
            " {infoContr/tpContr}(../../tpContr) = [3, 4, 5], deve ser igual "
            "ao mês/ano da data de desligamento, se informada;\nc) Se "
            "{infoContr/tpContr}(../../tpContr) = [6], deve ser igual ou "
            "anterior ao mês/ano da data de término do TSVE, se informada."
        ),
    )

    eso11_repercProc = fields.Selection(
        INFOVLR_REPERCPROC, string="repercProc", xsd_required=True
    )

    eso11_vrRemun = fields.Float(
        string="Valor total das verbas remuneratórias",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total das verbas remuneratórias a serem pagas ao "
            "trabalhador.\nValidação: Se {repercProc}(./repercProc) = [1], "
            "deve ser maior que 0 (zero). Se {repercProc}(./repercProc) = [2],"
            " deve ser igual a 0 (zero)."
        ),
    )

    eso11_vrAPI = fields.Float(
        string="Valor do aviso prévio indenizado pago",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor do aviso prévio indenizado pago ao empregado.\nValidação: "
            "Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_vr13API = fields.Float(
        string="Valor da projeção",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da projeção do aviso prévio indenizado sobre o 13º "
            "salário.\nValidação: Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_vrInden = fields.Float(
        string="Valor total",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor total das demais verbas indenizatórias a serem pagas ao "
            "trabalhador.\nValidação: Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_vrBaseIndenFGTS = fields.Float(
        string="Valor da base de cálculo",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo para recolhimento da indenização "
            "compensatória (multa rescisória) do FGTS, para geração de "
            "guia.\nPreencher este campo somente quando o valor da indenização"
            " compensatória (multa rescisória) do FGTS for objeto de "
            "transação.\nValidação: Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_pagDiretoResc = fields.Selection(
        TS_SIM_NAO,
        string="A indenização compensatória",
        xsd_type="TS_sim_nao",
        help=(
            "A indenização compensatória (multa rescisória) do FGTS "
            "transacionada foi paga diretamente ao trabalhador mediante "
            "decisão/autorização judicial?\nValidação: Informação obrigatória "
            "e exclusiva se {vrBaseIndenFGTS}(./vrBaseIndenFGTS) estiver "
            "preenchido."
        ),
    )

    eso11_idePeriodo = fields.One2many(
        "eso.11.ideperiodo",
        "eso11_idePeriodo_infoVlr_id",
        string="Identificação do período",
        help=(
            "Identificação do período ao qual se referem as bases de "
            "cálculo.\nCHAVE_GRUPO: {perRef}\nCONDICAO_GRUPO: O (se "
            "{repercProc}(../repercProc) = [1]); OC (nos demais casos)"
        ),
    )


class IdePeriodo(models.AbstractModel):
    """Identificação do período ao qual se referem as bases de cálculo.
    CHAVE_GRUPO: {perRef}
    CONDICAO_GRUPO: O (se {repercProc}(../repercProc) = [1]); OC (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab.InfoVlr.IdePeriodo"

    eso11_perRef = fields.Char(
        string="mês/ano",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "mês/ano (formato AAAA-MM) de referência das "
            "informações.\nValidação: Deve ser um período compreendido entre "
            "{compIni}(../compIni) e {compFim}(../compFim), informado no "
            "formato AAAA-MM."
        ),
    )

    eso11_baseCalculo = fields.Many2one(
        comodel_name="eso.11.basecalculo",
        string="Bases de cálculo",
        xsd_required=True,
        help=(
            "Bases de cálculo de contribuição previdenciária e "
            "FGTS.\nDESCRICAO_COMPLETA:Bases de cálculo de contribuição "
            "previdenciária e FGTS decorrentes de processo trabalhista e ainda"
            " não declaradas."
        ),
    )

    eso11_infoFGTS = fields.Many2one(
        comodel_name="eso.11.infofgts",
        string="Informações referentes a bases",
        help=(
            "Informações referentes a bases de cálculo de FGTS para geração de"
            " guia.\nDESCRICAO_COMPLETA:Informações referentes a bases de "
            "cálculo de FGTS para geração de guia para competências anteriores"
            " ao início do FGTS Digital.\nInformar apenas bases que ainda não "
            "foram recolhidas via SEFIP/Conectividade Social.\nCONDICAO_GRUPO:"
            " OC"
        ),
    )

    eso11_baseMudCateg = fields.Many2one(
        comodel_name="eso.11.basemudcateg",
        string="Bases de cálculo já declaradas em GFIP",
        help=(
            "Bases de cálculo já declaradas em GFIP, no caso de reconhecimento"
            " de mudança de código de categoria.\nDESCRICAO_COMPLETA:Bases de "
            "cálculo de contribuição previdenciária já declaradas "
            "anteriormente em GFIP ou no evento S-1200 (exclusivamente para "
            "remuneração de trabalhador sem cadastro no S-2300), no caso de "
            "reconhecimento de mudança de código de "
            "categoria.\nCONDICAO_GRUPO: OC (se "
            "{indCateg}(2500_ideTrab_infoContr_indCateg) = [S]); N (nos demais"
            " casos)"
        ),
    )


class BaseCalculo(models.AbstractModel):
    """Bases de cálculo de contribuição previdenciária e FGTS.
    DESCRICAO_COMPLETA:Bases de cálculo de contribuição previdenciária e FGTS
    decorrentes de processo trabalhista e ainda não declaradas."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basecalculo"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab.InfoVlr.IdePeriodo.BaseCalculo"
    )

    eso11_vrBcCpMensal = fields.Float(
        string="Valor da base de cálculo",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária sobre a "
            "remuneração mensal do trabalhador.\nValidação: Deve ser maior ou "
            "igual a 0 (zero)."
        ),
    )

    eso11_vrBcCp13 = fields.Float(
        string="Valor da base de cálculo (vrBcCp13)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo da contribuição previdenciária sobre a "
            "remuneração do trabalhador referente ao 13º salário.\nValidação: "
            "Deve ser maior ou igual a 0 (zero)."
        ),
    )

    eso11_vrBcFgts = fields.Float(
        string="Valor da base de cálculo do FGTS sobre",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo do FGTS sobre a remuneração do "
            "trabalhador (sem 13° salário).\nValidação: Deve ser maior ou "
            "igual a 0 (zero)."
        ),
    )

    eso11_vrBcFgts13 = fields.Float(
        string="vrBcFgts13",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo do FGTS sobre a remuneração do "
            "trabalhador sobre o 13º salário.\nValidação: Deve ser maior ou "
            "igual a 0 (zero)."
        ),
    )

    eso11_infoAgNocivo = fields.Many2one(
        comodel_name="eso.11.infoagnocivo",
        string="Grau de exposição a agentes nocivos",
        help=(
            "Grau de exposição a agentes nocivos\nDESCRICAO_COMPLETA:Grupo "
            "referente ao detalhamento do grau de exposição do trabalhador aos"
            " agentes nocivos que ensejam a cobrança da contribuição adicional"
            " para financiamento dos benefícios de aposentadoria "
            "especial.\nCONDICAO_GRUPO: O (se o código de categoria for igual "
            "a [1XX, 2XX, 3XX, 731, 734, 738] ou se o código de categoria for "
            "igual a [4XX] com {categOrig} em S-2300 = [1XX, 2XX, 3XX, 731, "
            "734, 738]); N (nos demais casos)"
        ),
    )


class InfoAgNocivo(models.AbstractModel):
    """Grau de exposição a agentes nocivos
    DESCRICAO_COMPLETA:Grupo referente ao detalhamento do grau de exposição do
    trabalhador aos agentes nocivos que ensejam a cobrança da contribuição
    adicional para financiamento dos benefícios de aposentadoria especial.
    CONDICAO_GRUPO: O (se o código de categoria for igual a [1XX, 2XX, 3XX, 731,
    734, 738] ou se o código de categoria for igual a [4XX] com {categOrig} em
    S-2300 = [1XX, 2XX, 3XX, 731, 734, 738]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoagnocivo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab.InfoVlr.IdePeriodo.BaseCalculo.InfoAgNocivo"

    eso11_grauExp = fields.Selection(
        TS_GRAUEXP, string="grauExp", xsd_required=True, xsd_type="TS_grauExp"
    )


class InfoFgts(models.AbstractModel):
    """Informações referentes a bases de cálculo de FGTS para geração de guia.
    DESCRICAO_COMPLETA:Informações referentes a bases de cálculo de FGTS para
    geração de guia para competências anteriores ao início do FGTS Digital.
    Informar apenas bases que ainda não foram recolhidas via SEFIP/Conectividade
    Social.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infofgts"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab.InfoVlr.IdePeriodo.InfoFgts"
    )

    eso11_vrBcFgtsGuia = fields.Float(
        string="Valor da base de cálculo do FGTS sobre",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo do FGTS sobre a remuneração do "
            "trabalhador (sem 13° salário).\nValidação: Deve ser maior ou "
            "igual a 0 (zero)."
        ),
    )

    eso11_vrBcFgts13Guia = fields.Float(
        string="vrBcFgts13Guia",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da base de cálculo do FGTS sobre a remuneração do "
            "trabalhador sobre o 13º salário.\nValidação: Deve ser maior ou "
            "igual a 0 (zero)."
        ),
    )

    eso11_pagDireto = fields.Selection(
        TS_SIM_NAO,
        string="O FGTS transacionado referente",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "O FGTS transacionado referente a {perRef}(../perRef) foi pago "
            "diretamente ao trabalhador mediante decisão/autorização judicial?"
        ),
    )


class BaseMudCateg(models.AbstractModel):
    """Bases de cálculo já declaradas em GFIP, no caso de reconhecimento de
    mudança de código de categoria.
    DESCRICAO_COMPLETA:Bases de cálculo de contribuição previdenciária já
    declaradas anteriormente em GFIP ou no evento S-1200 (exclusivamente para
    remuneração de trabalhador sem cadastro no S-2300), no caso de
    reconhecimento de mudança de código de categoria.
    CONDICAO_GRUPO: OC (se {indCateg}(2500_ideTrab_infoContr_indCateg) = [S]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.basemudcateg"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtProcTrab.IdeTrab.InfoContr.IdeEstab.InfoVlr.IdePeriodo.BaseMudCateg"
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador declarado no período de "
            "referência.\nValidação: Deve ser um código válido e existente na "
            "Tabela 01."
        ),
    )

    eso11_vrBcCPrev = fields.Float(
        string="Valor da remuneração do trabalhador",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor da remuneração do trabalhador a ser considerada para fins "
            "previdenciários declarada em GFIP ou em S-1200 de trabalhador sem"
            " cadastro no S-2300.\nValidação: Deve ser maior que 0 (zero)."
        ),
    )
