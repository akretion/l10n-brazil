# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSGRAUEXP,
    TSINDAPURIR,
    TSINDMV,
    TSINDRRA,
    TSINDSIMPLES,
    TSNATATIVIDADE,
    TSSIMNAO,
    TSTPACCONV,
    TSTPINSC12,
    TSTPINSC134,
    TIdeEmpregador,
    TIdeEventoFolha,
    TInfoInterm,
    TInfoRra,
    TProcJudTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtRemun/v_S_01_01_00"


class TInfoAgNocivo(models.AbstractModel):
    _description = "T_infoAgNocivo"
    _name = "eso.11.tinfoagnocivo"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoAgNocivo"

    eso11_grauExp = fields.Selection(
        TS_GRAUEXP, string="grauExp", xsd_required=True, xsd_type="TS_grauExp"
    )


class TItensRemun(models.AbstractModel):
    """Itens da remuneração do trabalhador
    DESCRICAO_COMPLETA:Rubricas que compõem a remuneração do trabalhador."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.titensremun"
    _inherit = "spec.mixin.eso"
    _binding_type = "TItensRemun"

    eso11_itensRemun_remunPerApur_id = fields.Many2one(
        comodel_name="eso.11.remunperapur", xsd_implicit=True, ondelete="cascade"
    )
    eso11_itensRemun_remunPerAnt_id = fields.Many2one(
        comodel_name="eso.11.remunperant", xsd_implicit=True, ondelete="cascade"
    )
    eso11_codRubr = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador que identifica a rubrica em sua "
            "folha de pagamento ou o código da rubrica constante da Tabela de "
            "Rubricas Padrão.\nValidação: Não pode ser utilizada rubrica:\na) "
            "cujo {codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) "
            "em S-1010 seja igual a [25, 26, 51] se "
            "{codCateg}(1200_dmDev_codCateg) pertencer ao grupo 'Contribuinte "
            "Individual' ou 'Bolsista' da Tabela 01;\nb) cuja "
            "{natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em "
            "S-1010 seja igual a [1801, 9220], desde que "
            "{perApur}(1200_ideEvento_perApur) &gt;= [2021-07] (se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [1]) ou "
            "{perApur}(1200_ideEvento_perApur) &gt;= [2021] (se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [2])."
        ),
    )

    eso11_ideTabRubr = fields.Char(
        string="ideTabRubr", xsd_required=True, xsd_type="TS_ideTabRubr"
    )

    eso11_qtdRubr = fields.Float(string="qtdRubr", xsd_type="TS_qtdRubr")

    eso11_fatorRubr = fields.Float(string="fatorRubr", xsd_type="TS_fator")

    eso11_vrRubr = fields.Float(
        string="vrRubr", xsd_required=True, xsd_type="TS_vrRubr"
    )

    eso11_indApurIR = fields.Selection(
        TS_INDAPURIR,
        string="Indicativo de tipo de apuração de IR",
        xsd_type="TS_indApurIR",
        help=(
            "Indicativo de tipo de apuração de IR.\nValidação: Informação "
            "obrigatória e exclusiva se {perApur}(1200_ideEvento_perApur) "
            "&gt;= [2021-07] (se {indApuracao}(1200_ideEvento_indApuracao) = "
            "[1]) ou se {perApur}(1200_ideEvento_perApur) &gt;= [2021] (se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [2])."
        ),
    )


class ESocial(models.AbstractModel):
    """S-1200 - Remuneração de Trabalhador vinculado ao Regime Geral de Previd.
    Social"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtRemun = fields.Many2one(
        comodel_name="eso.11.evtremun",
        string="Evento Remuneração",
        xsd_required=True,
        help=(
            "Evento Remuneração de Trabalhador vinculado ao "
            "RGPS\nDESCRICAO_COMPLETA:Evento Remuneração de Trabalhador "
            "vinculado ao Regime Geral de Previdência Social.\nCHAVE_GRUPO: {I"
            "d}\nREGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR\nREGRA:REGRA_COMPATIB"
            "ILIDADE_CATEGORIA_CLASSTRIB\nREGRA:REGRA_COMPATIB_REGIME_PREV\nRE"
            "GRA:REGRA_CONTROLE_DUPLICIDADE\nREGRA:REGRA_EMPREGADO_DOMESTICO\n"
            "REGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nRE"
            "GRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO\nREGRA:REGRA_EVE_FOPAG_SIMPL"
            "IFICADO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_GERAL_VA"
            "LIDA_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_REM"
            "UN_ANUAL_DEZEMBRO\nREGRA:REGRA_REMUN_CATEG_COMPATIVEL_TPLOTACAO\n"
            "REGRA:REGRA_REMUN_CATEG_EXISTENTE_RET\nREGRA:REGRA_REMUN_FGTS_ANT"
            "ERIOR_ESOCIAL\nREGRA:REGRA_REMUN_IND_RETIFICACAO\nREGRA:REGRA_REM"
            "UN_JA_EXISTE_DESLIGAMENTO\nREGRA:REGRA_REMUN_PERMITE_EXCLUSAO\nRE"
            "GRA:REGRA_REMUN_TRAB_EXISTENTE_RET\nREGRA:REGRA_REMUN_VALIDA_INFO"
            "_COMPLEMENTAR\nREGRA:REGRA_RUBRICA_COMPATIVEL_CATEGORIA\nREGRA:RE"
            "GRA_RUBRICA_COMPATIVEL_DECTERCEIRO\nREGRA:REGRA_RUBRICA_COMPATIVE"
            "L_RESC\nREGRA:REGRA_TSV_ATIVO_NA_DTEVENTO\nREGRA:REGRA_VALIDA_EMP"
            "REGADOR\nREGRA:REGRA_VALIDA_PERIODO_APURACAO"
        ),
    )


class EvtRemun(models.AbstractModel):
    """Evento Remuneração de Trabalhador vinculado ao RGPS
    DESCRICAO_COMPLETA:Evento Remuneração de Trabalhador vinculado ao Regime Geral
    de Previdência Social.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_BLOQUEIA_USO_CPF_EMPREGADOR
    REGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB
    REGRA:REGRA_COMPATIB_REGIME_PREV
    REGRA:REGRA_CONTROLE_DUPLICIDADE
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EVE_FOPAG_SIMPLIFICADO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_REMUN_ANUAL_DEZEMBRO
    REGRA:REGRA_REMUN_CATEG_COMPATIVEL_TPLOTACAO
    REGRA:REGRA_REMUN_CATEG_EXISTENTE_RET
    REGRA:REGRA_REMUN_FGTS_ANTERIOR_ESOCIAL
    REGRA:REGRA_REMUN_IND_RETIFICACAO
    REGRA:REGRA_REMUN_JA_EXISTE_DESLIGAMENTO
    REGRA:REGRA_REMUN_PERMITE_EXCLUSAO
    REGRA:REGRA_REMUN_TRAB_EXISTENTE_RET
    REGRA:REGRA_REMUN_VALIDA_INFO_COMPLEMENTAR
    REGRA:REGRA_RUBRICA_COMPATIVEL_CATEGORIA
    REGRA:REGRA_RUBRICA_COMPATIVEL_DECTERCEIRO
    REGRA:REGRA_RUBRICA_COMPATIVEL_RESC
    REGRA:REGRA_TSV_ATIVO_NA_DTEVENTO
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_PERIODO_APURACAO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtremun"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventofolha",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_folha",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideTrabalhador = fields.Many2one(
        comodel_name="eso.11.idetrabalhador",
        string="Identificação do trabalhador",
        xsd_required=True,
        help="Identificação do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}",
    )

    eso11_dmDev = fields.One2many(
        "eso.11.dmdev",
        "eso11_dmDev_evtRemun_id",
        string="Demonstrativo de valores devidos",
        help=(
            "Demonstrativo de valores devidos ao "
            "trabalhador\nDESCRICAO_COMPLETA:Identificação de cada um dos "
            "demonstrativos de valores devidos ao trabalhador.\nCHAVE_GRUPO: "
            "{ideDmDev}\nREGRA:REGRA_DEMONSTRATIVO"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeTrabalhador(models.AbstractModel):
    """Identificação do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.IdeTrabalhador"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfRemun"
    )

    eso11_infoMV = fields.Many2one(
        comodel_name="eso.11.infomv",
        string="Informação de múltiplos vínculos",
        help=(
            "Informação de múltiplos vínculos\nDESCRICAO_COMPLETA:Grupo "
            "preenchido exclusivamente em caso de trabalhador que possua "
            "outros vínculos/atividades nos quais já tenha ocorrido desconto "
            "de contribuição previdenciária.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoComplem = fields.Many2one(
        comodel_name="eso.11.infocomplem",
        string="Informações complementares",
        help=(
            "Informações complementares de identificação do "
            "trabalhador\nDESCRICAO_COMPLETA:Grupo preenchido quando o evento "
            "de remuneração se referir a trabalhador cuja categoria não está "
            "sujeita ao evento de admissão ou ao evento TSVE - Início, bem "
            "como para informar remuneração devida pela empresa sucessora a "
            "empregado desligado ainda na sucedida. No caso das categorias em "
            "que o envio do evento TSVE - Início for opcional, o preenchimento"
            " do grupo somente é exigido se não houver o respectivo evento. As"
            " informações complementares são necessárias para correta "
            "identificação do trabalhador.\nCONDICAO_GRUPO: O ((se o "
            "trabalhador não tiver nenhum cadastro no RET) OU (se "
            "{remunSuc}(1200_dmDev_infoPerAnt_ideADC_remunSuc) = [S])); N (se "
            "o trabalhador tiver cadastro ativo no RET); OC (nos demais casos)"
        ),
    )

    eso11_procJudTrab = fields.One2many(
        "eso.11.tprocjudtrab",
        "eso11_procJudTrab_ideTrabalhador_id",
        string="procJudTrab",
        xsd_type="T_procJudTrab",
    )

    eso11_infoInterm = fields.One2many(
        "eso.11.tinfointerm",
        "eso11_infoInterm_ideTrabalhador_id",
        string="Informações relativas",
        xsd_type="T_infoInterm",
        help=(
            "Informações relativas ao trabalho intermitente.\nCHAVE_GRUPO: "
            "{dia}\nCONDICAO_GRUPO: O (se {codCateg}(1200_dmDev_codCateg) = "
            "[111] em {perApur}(1200_ideEvento_perApur), "
            "{indApuracao}(1200_ideEvento_indApuracao) = [1] e existir o grupo"
            " {infoPerApur}(1200_dmDev_infoPerApur)); N (nos demais casos)"
        ),
    )


class InfoMv(models.AbstractModel):
    """Informação de múltiplos vínculos
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente em caso de trabalhador que
    possua outros vínculos/atividades nos quais já tenha ocorrido desconto de
    contribuição previdenciária.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infomv"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.IdeTrabalhador.InfoMv"

    eso11_indMV = fields.Selection(
        TS_INDMV, string="indMV", xsd_required=True, xsd_type="TS_indMV"
    )

    eso11_remunOutrEmpr = fields.One2many(
        "eso.11.infomv_remunoutrempr",
        "eso11_remunOutrEmpr_infoMV_id",
        string="Remuneração recebida pelo trabalhador",
        help=(
            "Remuneração recebida pelo trabalhador em outras empresas ou "
            "atividades\nDESCRICAO_COMPLETA:Informações relativas ao "
            "trabalhador que possui vínculo empregatício com outra(s) "
            "empresa(s) e/ou que exerce outras atividades como contribuinte "
            "individual, detalhando as empresas que efetuaram (ou efetuarão) "
            "desconto da contribuição.\nCHAVE_GRUPO: {tpInsc}, {nrInsc}, "
            "{codCateg}"
        ),
    )


class InfoMvRemunOutrEmpr(models.AbstractModel):
    """Remuneração recebida pelo trabalhador em outras empresas ou atividades
    DESCRICAO_COMPLETA:Informações relativas ao trabalhador que possui vínculo
    empregatício com outra(s) empresa(s) e/ou que exerce outras atividades como
    contribuinte individual, detalhando as empresas que efetuaram (ou
    efetuarão) desconto da contribuição.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codCateg}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infomv_remunoutrempr"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.IdeTrabalhador.InfoMv.RemunOutrEmpr"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo "
            "{remunOutrEmpr/tpInsc}(./tpInsc).\nValidação: a) Se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [1] e "
            "{remunOutrEmpr/tpInsc}(./tpInsc) = [1], deve ser um CNPJ válido, "
            "diferente do CNPJ base indicado no evento de Informações do "
            "Empregador (S-1000) e dos estabelecimentos informados através do "
            "evento S-1005.\nb) Se {indApuracao}(1200_ideEvento_indApuracao) ="
            " [1] e {remunOutrEmpr/tpInsc}(./tpInsc) = [2], deve ser um CPF "
            "válido e diferente do CPF do trabalhador e ainda, caso o "
            "empregador seja pessoa física, diferente do CPF do "
            "empregador.\nc) Se {indApuracao}(1200_ideEvento_indApuracao) = "
            "[2] e {remunOutrEmpr/tpInsc}(./tpInsc) = [1], é permitido "
            "informar número de inscrição igual ao CNPJ base indicado no "
            "evento de Informações do Empregador (S-1000) e aos "
            "estabelecimentos informados através do evento S-1005.\nd) Se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [2] e "
            "{remunOutrEmpr/tpInsc}(./tpInsc) = [2], deve ser um CPF válido e "
            "diferente do CPF do trabalhador, mas é permitido informar número "
            "de inscrição igual ao CPF do empregador."
        ),
    )

    eso11_codCateg = fields.Char(
        string="codCateg", xsd_required=True, xsd_type="TS_codCategOE"
    )

    eso11_vlrRemunOE = fields.Float(
        string="vlrRemunOE", xsd_required=True, xsd_type="TS_vlrRemunOE"
    )


class InfoComplem(models.AbstractModel):
    """Informações complementares de identificação do trabalhador
    DESCRICAO_COMPLETA:Grupo preenchido quando o evento de remuneração se referir a
    trabalhador cuja categoria não está sujeita ao evento de admissão ou ao
    evento TSVE - Início, bem como para informar remuneração devida pela
    empresa sucessora a empregado desligado ainda na sucedida. No caso das
    categorias em que o envio do evento TSVE - Início for opcional, o
    preenchimento do grupo somente é exigido se não houver o respectivo evento.
    As informações complementares são necessárias para correta identificação do
    trabalhador.
    CONDICAO_GRUPO: O ((se o trabalhador não tiver nenhum cadastro no RET) OU (se
    {remunSuc}(1200_dmDev_infoPerAnt_ideADC_remunSuc) = [S])); N (se o
    trabalhador tiver cadastro ativo no RET); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplem"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.IdeTrabalhador.InfoComplem"

    eso11_nmTrab = fields.Char(string="nmTrab", xsd_required=True, xsd_type="TS_nmTrab")

    eso11_dtNascto = fields.Date(
        string="dtNascto", xsd_required=True, xsd_type="TS_dtNascto"
    )

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.sucessaovinc",
        string="Grupo de informações da sucessão",
        help=(
            "Grupo de informações da sucessão de vínculo "
            "trabalhista.\nCONDICAO_GRUPO: O (se "
            "{remunSuc}(1200_dmDev_infoPerAnt_ideADC_remunSuc) = [S]); N (nos "
            "demais casos)"
        ),
    )


class SucessaoVinc(models.AbstractModel):
    """Grupo de informações da sucessão de vínculo trabalhista.
    CONDICAO_GRUPO: O (se {remunSuc}(1200_dmDev_infoPerAnt_ideADC_remunSuc) = [S]);
    N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.sucessaovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.IdeTrabalhador.InfoComplem.SucessaoVinc"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do empregador anterior, de acordo com o tipo "
            "de inscrição indicado no campo "
            "{sucessaoVinc/tpInsc}(./tpInsc).\nValidação: Deve ser um número "
            "de inscrição válido e diferente da inscrição do declarante, "
            "considerando as particularidades aplicadas à informação de CNPJ "
            "de órgão público em S-1000.\nSe {sucessaoVinc/tpInsc}(./tpInsc) ="
            " [1], deve possuir 14 (catorze) algarismos e ser diferente do "
            "CNPJ base do empregador (exceto se "
            "{ideEmpregador/nrInsc}(1200_ideEmpregador_nrInsc) tiver 14 "
            "(catorze) algarismos) e dos estabelecimentos informados através "
            "do evento S-1005.\nSe {sucessaoVinc/tpInsc}(./tpInsc) = [2], deve"
            " possuir 11 (onze) algarismos."
        ),
    )

    eso11_matricAnt = fields.Char(string="matricAnt", xsd_type="TS_matricAnt")

    eso11_dtAdm = fields.Date(string="dtAdm", xsd_required=True, xsd_type="TS_dtAdm")

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")


class DmDev(models.AbstractModel):
    """Demonstrativo de valores devidos ao trabalhador
    DESCRICAO_COMPLETA:Identificação de cada um dos demonstrativos de valores
    devidos ao trabalhador.
    CHAVE_GRUPO: {ideDmDev}
    REGRA:REGRA_DEMONSTRATIVO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dmdev"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev"

    eso11_ideDmDev = fields.Char(
        string="Identificador atribuído",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Identificador atribuído pela empresa para o demonstrativo de "
            "valores devidos ao trabalhador. O empregador pode preencher este "
            "campo utilizando-se de um identificador padrão para todos os "
            "trabalhadores; no entanto, havendo mais de um demonstrativo "
            "relativo a uma mesma competência, devem ser utilizados "
            "identificadores diferentes para cada um dos "
            "demonstrativos.\nValidação: Deve ser um identificador único "
            "dentro do mesmo {perApur}(1200_ideEvento_perApur) para cada um "
            "dos demonstrativos do "
            "trabalhador.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_codCateg = fields.Char(
        string="codCateg", xsd_required=True, xsd_type="TS_codCateg"
    )

    eso11_indRRA = fields.Selection(TS_INDRRA, string="indRRA", xsd_type="TS_indRRA")

    eso11_infoRRA = fields.Many2one(
        comodel_name="eso.11.tinforra", string="infoRRA", xsd_type="T_infoRRA"
    )

    eso11_infoPerApur = fields.Many2one(
        comodel_name="eso.11.infoperapur",
        string="Informações relativas ao período",
        help=(
            "Informações relativas ao período de apuração.\nCONDICAO_GRUPO: O "
            "(se não existir o grupo {infoPerAnt}(1200_dmDev_infoPerAnt)); OC "
            "(nos demais casos)"
        ),
    )

    eso11_infoPerAnt = fields.Many2one(
        comodel_name="eso.11.infoperant",
        string="Informações relativas",
        help=(
            "Informações relativas a períodos "
            "anteriores\nDESCRICAO_COMPLETA:Grupo destinado às informações "
            "de:\na) remuneração relativa a diferenças salariais provenientes "
            "de acordo coletivo, convenção coletiva e dissídio;\nb) "
            "remuneração relativa a diferenças de vencimento provenientes de "
            "disposições legais;\nc) bases de cálculo para efeitos de apuração"
            " de FGTS resultantes de conversão de licença saúde em acidente de"
            " trabalho;\nd) verbas de natureza salarial ou não salarial "
            "devidas após o desligamento.\nOBS.: As informações previstas "
            "acima podem se referir ao período de apuração definido em "
            "{perApur}(1200_ideEvento_perApur) ou a períodos anteriores a "
            "{perApur}(1200_ideEvento_perApur).\nCONDICAO_GRUPO: N (se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [2] ou "
            "{codCateg}(1200_dmDev_codCateg) for diferente de [1XX, 2XX, 3XX, "
            "4XX, 721, 722, 901]); O (se não existir o grupo "
            "{infoPerApur}(1200_dmDev_infoPerApur) e "
            "{indApuracao}(1200_ideEvento_indApuracao) = [1]); OC (nos demais "
            "casos)"
        ),
    )

    eso11_infoComplCont = fields.Many2one(
        comodel_name="eso.11.infocomplcont",
        string="Informações complementares contratuais",
        help=(
            "Informações complementares contratuais do "
            "trabalhador\nDESCRICAO_COMPLETA:Grupo preenchido exclusivamente "
            "quando o evento de remuneração se referir a trabalhador cuja "
            "categoria não estiver obrigada ao evento de início de TSVE e se "
            "não houver evento S-2300 correspondente.\nCONDICAO_GRUPO: O ((se "
            "{codCateg}(1200_dmDev_codCateg) = [2XX, 304, 305, 4XX, 5XX, 7XX, "
            "902]) E (se para o trabalhador não houver evento S-2300 ativo) E "
            "(se não for informado {remunPerApur/matricula}(1200_dmDev_infoPer"
            "Apur_ideEstabLot_remunPerApur_matricula) ou {remunPerAnt/matricul"
            "a}(1200_dmDev_infoPerAnt_ideADC_idePeriodo_ideEstabLot_remunPerAn"
            "t_matricula))); OC ((se {codCateg}(1200_dmDev_codCateg) = [901, "
            "903, 904]) E (se para o trabalhador não houver evento S-2300 "
            "ativo) E (se não for informado {remunPerApur/matricula}(1200_dmDe"
            "v_infoPerApur_ideEstabLot_remunPerApur_matricula) ou {remunPerAnt"
            "/matricula}(1200_dmDev_infoPerAnt_ideADC_idePeriodo_ideEstabLot_r"
            "emunPerAnt_matricula))); N (nos demais casos)"
        ),
    )


class InfoPerApur(models.AbstractModel):
    """Informações relativas ao período de apuração.
    CONDICAO_GRUPO: O (se não existir o grupo {infoPerAnt}(1200_dmDev_infoPerAnt));
    OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerApur"

    eso11_ideEstabLot = fields.One2many(
        "eso.11.infoperapur_ideestablot",
        "eso11_ideEstabLot_infoPerApur_id",
        string="Identificação do estabelecimento",
        help=(
            "Identificação do estabelecimento e "
            "lotação\nDESCRICAO_COMPLETA:Identificação do estabelecimento e da"
            " lotação nos quais o trabalhador possui remuneração no período de"
            " apuração. O estabelecimento identificado no grupo pode ser: o "
            "número do CNPJ do estabelecimento da própria empresa "
            "(matriz/filial), o número da obra (própria) no CNO, ou o número "
            "do CAEPF (no caso de pessoa física obrigada a inscrição no "
            "Cadastro de Atividade Econômica da Pessoa Física).\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}, {codLotacao}"
        ),
    )


class InfoPerApurIdeEstabLot(models.AbstractModel):
    """Identificação do estabelecimento e lotação
    DESCRICAO_COMPLETA:Identificação do estabelecimento e da lotação nos quais o
    trabalhador possui remuneração no período de apuração. O estabelecimento
    identificado no grupo pode ser: o número do CNPJ do estabelecimento da
    própria empresa (matriz/filial), o número da obra (própria) no CNO, ou o
    número do CAEPF (no caso de pessoa física obrigada a inscrição no Cadastro
    de Atividade Econômica da Pessoa Física).
    CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codLotacao}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperapur_ideestablot"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerApur.IdeEstabLot"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_EstabLot",
    )

    eso11_nrInsc = fields.Char(
        string="nrInsc", xsd_required=True, xsd_type="TS_nrInsc_EstabLot"
    )

    eso11_codLotacao = fields.Char(
        string="codLotacao", xsd_required=True, xsd_type="TS_codLotacao"
    )

    eso11_qtdDiasAv = fields.Char(
        string="Quantidade de dias trabalhados no mês",
        xsd_type="TS_dia",
        help=(
            "Quantidade de dias trabalhados no mês pelo trabalhador avulso no "
            "tomador de serviços identificado em {ideEstabLot/codLotacao}(1200"
            "_dmDev_infoPerApur_ideEstabLot_codLotacao). Cada dia, total ou "
            "parcial, em que o trabalhador tenha prestado serviços ao tomador "
            "deve ser considerado. Ex.: Se, em um mesmo mês, o trabalhador "
            "prestou serviços durante uma hora em um dia e durante mais uma "
            "hora em outro dia, deve-se informar a quantidade de 2 dias.\nCaso"
            " não tenha havido trabalho no mês, informar 0 (zero).\nValidação:"
            " Informação obrigatória e exclusiva se "
            "{ideEstabLot/codLotacao}(./codLotacao) possuir "
            "{tpLotacao}(1020_infoLotacao_inclusao_dadosLotacao_tpLotacao) em "
            "S-1020 = [08, 09] em {perApur}(1200_ideEvento_perApur) e se "
            "{indApuracao}(1200_ideEvento_indApuracao) = [1].\nSe informado, "
            "deve ser um número entre 0 e 31, de acordo com o calendário "
            "anual."
        ),
    )

    eso11_remunPerApur = fields.One2many(
        "eso.11.remunperapur",
        "eso11_remunPerApur_ideEstabLot_id",
        string="Remuneração do trabalhador",
        help=(
            "Remuneração do trabalhador\nDESCRICAO_COMPLETA:Informações "
            "relativas à remuneração do trabalhador no período de "
            "apuração.\nCHAVE_GRUPO: {matricula}"
        ),
    )


class RemunPerApur(models.AbstractModel):
    """Remuneração do trabalhador
    DESCRICAO_COMPLETA:Informações relativas à remuneração do trabalhador no
    período de apuração.
    CHAVE_GRUPO: {matricula}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.remunperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerApur.IdeEstabLot.RemunPerApur"

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2190, S-2200 ou S-2300 do respectivo contrato. Não preencher no"
            " caso de Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE "
            "sem informação de matrícula no evento S-2300."
        ),
    )

    eso11_indSimples = fields.Selection(
        TS_INDSIMPLES, string="indSimples", xsd_type="TS_indSimples"
    )

    eso11_itensRemun = fields.One2many(
        "eso.11.titensremun",
        "eso11_itensRemun_remunPerApur_id",
        string="itensRemun",
        xsd_type="T_itensRemun",
    )

    eso11_infoAgNocivo = fields.Many2one(
        comodel_name="eso.11.tinfoagnocivo",
        string="Grau de exposição a agentes nocivos",
        xsd_type="T_infoAgNocivo",
        help=(
            "Grau de exposição a agentes nocivos\nDESCRICAO_COMPLETA:Grupo "
            "referente ao detalhamento do grau de exposição do trabalhador aos"
            " agentes nocivos que ensejam a cobrança da contribuição adicional"
            " para financiamento dos benefícios de aposentadoria "
            "especial.\nCONDICAO_GRUPO: O (se {codCateg}(1200_dmDev_codCateg) "
            "= [1XX, 2XX, 3XX, 731, 734, 738] ou se "
            "{codCateg}(1200_dmDev_codCateg) = [4XX] com {categOrig} em S-2300"
            " = [1XX, 2XX, 3XX, 731, 734, 738]); N (nos demais casos)"
        ),
    )


class InfoPerAnt(models.AbstractModel):
    """Informações relativas a períodos anteriores
    DESCRICAO_COMPLETA:Grupo destinado às informações de:
    a) remuneração relativa a diferenças salariais provenientes de acordo coletivo,
    convenção coletiva e dissídio;
    b) remuneração relativa a diferenças de vencimento provenientes de disposições
    legais;
    c) bases de cálculo para efeitos de apuração de FGTS resultantes de conversão
    de licença saúde em acidente de trabalho;
    d) verbas de natureza salarial ou não salarial devidas após o desligamento.
    OBS.: As informações previstas acima podem se referir ao período de apuração
    definido em {perApur}(1200_ideEvento_perApur) ou a períodos anteriores a
    {perApur}(1200_ideEvento_perApur).
    CONDICAO_GRUPO: N (se {indApuracao}(1200_ideEvento_indApuracao) = [2] ou
    {codCateg}(1200_dmDev_codCateg) for diferente de [1XX, 2XX, 3XX, 4XX, 721,
    722, 901]); O (se não existir o grupo {infoPerApur}(1200_dmDev_infoPerApur)
    e {indApuracao}(1200_ideEvento_indApuracao) = [1]); OC (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperant"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerAnt"

    eso11_ideADC = fields.One2many(
        "eso.11.ideadc",
        "eso11_ideADC_infoPerAnt_id",
        string="Instrumento ou situação ensejadora",
        help=(
            "Instrumento ou situação ensejadora da remuneração em períodos "
            "anteriores\nDESCRICAO_COMPLETA:Identificação do instrumento ou "
            "situação ensejadora da remuneração relativa a períodos de "
            "apuração anteriores.\nCHAVE_GRUPO: {dtAcConv}, {tpAcConv}"
        ),
    )


class IdeAdc(models.AbstractModel):
    """Instrumento ou situação ensejadora da remuneração em períodos anteriores
    DESCRICAO_COMPLETA:Identificação do instrumento ou situação ensejadora da
    remuneração relativa a períodos de apuração anteriores.
    CHAVE_GRUPO: {dtAcConv}, {tpAcConv}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideadc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerAnt.IdeAdc"

    eso11_dtAcConv = fields.Date(string="dtAcConv")

    eso11_tpAcConv = fields.Selection(
        TS_TPACCONV,
        string="Tipo do instrumento",
        xsd_required=True,
        xsd_type="TS_tpAcConv",
        help=(
            "Tipo do instrumento ou situação ensejadora da remuneração "
            "relativa a períodos de apuração anteriores.\nValidação: Se "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [04, 22], não pode ser informado [E, H]."
        ),
    )

    eso11_dsc = fields.Char(string="dsc", xsd_required=True, xsd_type="TS_dsc")

    eso11_remunSuc = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se a remuneração é relativa",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se a remuneração é relativa a verbas de natureza salarial"
            " ou não salarial devidas pela empresa sucessora a empregados "
            "desligados ainda na sucedida."
        ),
    )

    eso11_idePeriodo = fields.One2many(
        "eso.11.ideperiodo",
        "eso11_idePeriodo_ideADC_id",
        string="Identificação do período de referência",
        help=(
            "Identificação do período de referência da "
            "remuneração\nDESCRICAO_COMPLETA:Identificação do período ao qual "
            "se referem as diferenças de remuneração.\nCHAVE_GRUPO: {perRef}"
        ),
    )


class IdePeriodo(models.AbstractModel):
    """Identificação do período de referência da remuneração
    DESCRICAO_COMPLETA:Identificação do período ao qual se referem as diferenças de
    remuneração.
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerAnt.IdeAdc.IdePeriodo"

    eso11_perRef = fields.Char(
        string="período ao qual se refere o complemento",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "período ao qual se refere o complemento de remuneração, no "
            "formato AAAA-MM.\nValidação: Deve ser igual ou anterior ao "
            "período de apuração informado em "
            "{perApur}(/ideEvento_perApur).\nDeve ser informado no formato "
            "AAAA-MM.\nSe {tpAcConv}(../tpAcConv) = [H], deve ser anterior ao "
            "início dos eventos periódicos para o empregador no eSocial."
        ),
    )

    eso11_ideEstabLot = fields.One2many(
        "eso.11.ideperiodo_ideestablot",
        "eso11_ideEstabLot_idePeriodo_id",
        string="Identificação do estabelecimento",
        help=(
            "Identificação do estabelecimento e "
            "lotação\nDESCRICAO_COMPLETA:Identificação do estabelecimento e da"
            " lotação ao qual se referem as diferenças de remuneração do mês "
            "identificado no grupo superior.\nCHAVE_GRUPO: {tpInsc}, {nrInsc},"
            " {codLotacao}"
        ),
    )


class IdePeriodoIdeEstabLot(models.AbstractModel):
    """Identificação do estabelecimento e lotação
    DESCRICAO_COMPLETA:Identificação do estabelecimento e da lotação nos quais o
    trabalhador possui remuneração no período de apuração. O estabelecimento
    identificado no grupo pode ser: o número do CNPJ do estabelecimento da
    própria empresa (matriz/filial), o número da obra (própria) no CNO, ou o
    número do CAEPF (no caso de pessoa física obrigada a inscrição no Cadastro
    de Atividade Econômica da Pessoa Física).
    CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codLotacao}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo_ideestablot"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoPerAnt.IdeAdc.IdePeriodo.IdeEstabLot"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_EstabLot",
    )

    eso11_nrInsc = fields.Char(
        string="nrInsc", xsd_required=True, xsd_type="TS_nrInsc_EstabLot"
    )

    eso11_codLotacao = fields.Char(
        string="codLotacao", xsd_required=True, xsd_type="TS_codLotacao"
    )

    eso11_remunPerAnt = fields.One2many(
        "eso.11.remunperant",
        "eso11_remunPerAnt_ideEstabLot_id",
        string="Remuneração do trabalhador",
        help=(
            "Remuneração do trabalhador\nDESCRICAO_COMPLETA:Informações "
            "relativas à remuneração do trabalhador em períodos "
            "anteriores.\nCHAVE_GRUPO: {matricula}"
        ),
    )


class RemunPerAnt(models.AbstractModel):
    """Remuneração do trabalhador
    DESCRICAO_COMPLETA:Informações relativas à remuneração do trabalhador em
    períodos anteriores.
    CHAVE_GRUPO: {matricula}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.remunperant"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtRemun.DmDev.InfoPerAnt.IdeAdc.IdePeriodo.IdeEstabLot.RemunPerAnt"
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2190, S-2200 ou S-2300 do respectivo contrato. Não preencher no"
            " caso de TSVE sem informação de matrícula no evento S-2300 ou se "
            "{remunSuc}(1200_dmDev_infoPerAnt_ideADC_remunSuc) = [S]."
        ),
    )

    eso11_indSimples = fields.Selection(
        TS_INDSIMPLES, string="indSimples", xsd_type="TS_indSimples"
    )

    eso11_itensRemun = fields.One2many(
        "eso.11.titensremun",
        "eso11_itensRemun_remunPerAnt_id",
        string="itensRemun",
        xsd_type="T_itensRemun",
    )

    eso11_infoAgNocivo = fields.Many2one(
        comodel_name="eso.11.tinfoagnocivo",
        string="Grau de exposição a agentes nocivos",
        xsd_type="T_infoAgNocivo",
        help=(
            "Grau de exposição a agentes nocivos\nDESCRICAO_COMPLETA:Grupo "
            "referente ao detalhamento do grau de exposição do trabalhador aos"
            " agentes nocivos que ensejam a cobrança da contribuição adicional"
            " para financiamento dos benefícios de aposentadoria "
            "especial.\nCONDICAO_GRUPO: O (se {codCateg}(1200_dmDev_codCateg) "
            "= [1XX, 2XX, 3XX] ou se {codCateg}(1200_dmDev_codCateg) = [4XX] "
            "com {categOrig} em S-2300 = [1XX, 2XX, 3XX]); N (nos demais "
            "casos)"
        ),
    )


class InfoComplCont(models.AbstractModel):
    """Informações complementares contratuais do trabalhador
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente quando o evento de
    remuneração se referir a trabalhador cuja categoria não estiver obrigada ao
    evento de início de TSVE e se não houver evento S-2300 correspondente.
    CONDICAO_GRUPO: O ((se {codCateg}(1200_dmDev_codCateg) = [2XX, 304, 305, 4XX,
    5XX, 7XX, 902]) E (se para o trabalhador não houver evento S-2300 ativo) E
    (se não for informado {remunPerApur/matricula}(1200_dmDev_infoPerApur_ideEs
    tabLot_remunPerApur_matricula) ou {remunPerAnt/matricula}(1200_dmDev_infoPe
    rAnt_ideADC_idePeriodo_ideEstabLot_remunPerAnt_matricula))); OC ((se
    {codCateg}(1200_dmDev_codCateg) = [901, 903, 904]) E (se para o trabalhador
    não houver evento S-2300 ativo) E (se não for informado {remunPerApur/matri
    cula}(1200_dmDev_infoPerApur_ideEstabLot_remunPerApur_matricula) ou {remunP
    erAnt/matricula}(1200_dmDev_infoPerAnt_ideADC_idePeriodo_ideEstabLot_remunP
    erAnt_matricula))); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplcont"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRemun.DmDev.InfoComplCont"

    eso11_codCBO = fields.Char(
        string="Classificação Brasileira de Ocupações",
        xsd_required=True,
        xsd_type="TS_cbo",
        help=(
            "Classificação Brasileira de Ocupações - CBO.\nValidação: Deve ser"
            " um código válido e existente na tabela de CBO, com 6 (seis) "
            "posições."
        ),
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="Natureza da atividade",
        xsd_type="TS_natAtividade",
        help=(
            "Natureza da atividade.\nValidação: O campo deve ser preenchido "
            "apenas se atendida uma das condições a seguir apresentadas:\na) "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [06, 07];\nb) "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [21, 22] e existir remuneração para o trabalhador "
            "vinculada a um tipo de CAEPF informado em S-1005 como produtor "
            "rural ou segurado especial."
        ),
    )

    eso11_qtdDiasTrab = fields.Char(
        string="Informação prestada exclusivamente",
        xsd_type="TS_dia",
        help=(
            "Informação prestada exclusivamente pelo segurado especial em caso"
            " de contratação de contribuinte individual, indicando a "
            "quantidade de dias trabalhados pelo mesmo.\nCaso não tenha havido"
            " trabalho no mês, informar 0 (zero).\nValidação: Preenchimento "
            "obrigatório e exclusivo se "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], {natAtividade}(./natAtividade) = [2] e "
            "{indApuracao}(1200_ideEvento_indApuracao) = [1]. Neste caso, "
            "preencher com um número entre 0 e 31, de acordo com o calendário "
            "anual."
        ),
    )
