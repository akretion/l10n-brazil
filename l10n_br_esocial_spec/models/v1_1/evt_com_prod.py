# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDCOMERC,
    TSTPINSC12,
    TSTPINSC2,
    TSTPPROC12,
    TIdeEventoFolhaMensalPf,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtComProd/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-1260 - Comercialização da Produção Rural Pessoa Física"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtComProd = fields.Many2one(
        comodel_name="eso.11.evtcomprod",
        string="Evento Comercialização",
        xsd_required=True,
        help=(
            "Evento Comercialização da Produção Rural Pessoa "
            "Física.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nRE"
            "GRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVE_FOPAG_COMERC_PROD\nREGR"
            "A:REGRA_EVE_FOPAG_IND_RETIFICACAO\nREGRA:REGRA_EVE_FOPAG_INFO_COM"
            "PAT_CLASSTRIB\nREGRA:REGRA_EVE_FOPAG_PERMITE_EXCLUSAO\nREGRA:REGR"
            "A_EVE_FOPAG_SIMPLIFICADO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREG"
            "RA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_VALIDA_EMPREGADOR"
        ),
    )


class EvtComProd(models.AbstractModel):
    """Evento Comercialização da Produção Rural Pessoa Física.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVE_FOPAG_COMERC_PROD
    REGRA:REGRA_EVE_FOPAG_IND_RETIFICACAO
    REGRA:REGRA_EVE_FOPAG_INFO_COMPAT_CLASSTRIB
    REGRA:REGRA_EVE_FOPAG_PERMITE_EXCLUSAO
    REGRA:REGRA_EVE_FOPAG_SIMPLIFICADO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_VALIDA_EMPREGADOR"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcomprod"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventofolhamensalpf",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_folha_mensal_PF",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.ideempregador",
        string="Informações de identificação",
        xsd_required=True,
        help=(
            "Informações de identificação do empregador.\nCHAVE_GRUPO: "
            "{tpInsc*}, {nrInsc*}"
        ),
    )

    eso11_infoComProd = fields.Many2one(
        comodel_name="eso.11.infocomprod",
        string="Informação da comercialização",
        xsd_required=True,
        help="Informação da comercialização de produção.",
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.IdeEmpregador"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e "
            "conforme informado em S-1000."
        ),
    )


class InfoComProd(models.AbstractModel):
    "Informação da comercialização de produção."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomprod"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.InfoComProd"

    eso11_ideEstabel = fields.Many2one(
        comodel_name="eso.11.ideestabel",
        string="Identificação do estabelecimento",
        xsd_required=True,
        help=(
            "Identificação do estabelecimento que comercializou a "
            "produção.\nCHAVE_GRUPO: {nrInscEstabRural*}"
        ),
    )


class IdeEstabel(models.AbstractModel):
    """Identificação do estabelecimento que comercializou a produção.
    CHAVE_GRUPO: {nrInscEstabRural*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestabel"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.InfoComProd.IdeEstabel"

    eso11_nrInscEstabRural = fields.Char(string="nrInscEstabRural", xsd_required=True)

    eso11_tpComerc = fields.One2many(
        "eso.11.tpcomerc",
        "eso11_tpComerc_ideEstabel_id",
        string="Valor total da comercialização",
        help=(
            "Valor total da comercialização por 'tipo' de "
            "comercialização.\nCHAVE_GRUPO: {indComerc}"
        ),
    )


class TpComerc(models.AbstractModel):
    """Valor total da comercialização por "tipo" de comercialização.
    CHAVE_GRUPO: {indComerc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tpcomerc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.InfoComProd.IdeEstabel.TpComerc"

    eso11_indComerc = fields.Selection(
        TS_INDCOMERC,
        string="Indicativo de comercialização",
        xsd_required=True,
        xsd_type="TS_indComerc",
    )

    eso11_vrTotCom = fields.Float(
        string="o valor total da comercialização",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "o valor total da comercialização.\nValidação: Deve ser maior que "
            "0 (zero)."
        ),
    )

    eso11_ideAdquir = fields.One2many(
        "eso.11.ideadquir",
        "eso11_ideAdquir_tpComerc_id",
        string="Identificação dos adquirentes",
        help=(
            "Identificação dos adquirentes da produção.\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}\nCONDICAO_GRUPO: F (se "
            "{indComerc}(../indComerc) = [3, 7, 8]); N (nos demais casos)"
        ),
    )

    eso11_infoProcJud = fields.One2many(
        "eso.11.infoprocjud",
        "eso11_infoProcJud_tpComerc_id",
        string="Informação de processos judiciais",
        help=(
            "Informação de processos judiciais\nDESCRICAO_COMPLETA:Informações"
            " de processos judiciais com decisão/sentença favorável ao "
            "contribuinte e relativos à contribuição incidente sobre a "
            "comercialização.\nCHAVE_GRUPO: {tpProc}, {nrProc}, "
            "{codSusp}\nCONDICAO_GRUPO: OC"
        ),
    )


class IdeAdquir(models.AbstractModel):
    """Identificação dos adquirentes da produção.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}
    CONDICAO_GRUPO: F (se {indComerc}(../indComerc) = [3, 7, 8]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideadquir"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.InfoComProd.IdeEstabel.TpComerc.IdeAdquir"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nValidação: Se {indComerc}(../indComerc) for igual a [3, 7], "
            "deve ser igual a [1, 2]. Se {indComerc}(../indComerc) for igual a"
            " [8], deve ser igual a [1]."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo "
            "{ideAdquir/tpInsc}(./tpInsc).\nValidação: A inscrição informada "
            "deve ser compatível com o {ideAdquir/tpInsc}(./tpInsc) e "
            "diferente da inscrição do declarante."
        ),
    )

    eso11_vrComerc = fields.Float(
        string="Valor bruto da comercialização",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor bruto da comercialização da produção.\nValidação: Deve ser "
            "maior que 0 (zero)."
        ),
    )

    eso11_nfs = fields.One2many(
        "eso.11.nfs",
        "eso11_nfs_ideAdquir_id",
        string="Notas fiscais da aquisição de produção",
        help=(
            "Notas fiscais da aquisição de "
            "produção\nDESCRICAO_COMPLETA:Detalhamento das notas fiscais "
            "relativas à comercialização de produção com o adquirente "
            "identificado no grupo superior.\nCHAVE_GRUPO: {serie}, "
            "{nrDocto}\nCONDICAO_GRUPO: F"
        ),
    )


class Nfs(models.AbstractModel):
    """Notas fiscais da aquisição de produção
    DESCRICAO_COMPLETA:Detalhamento das notas fiscais relativas à comercialização
    de produção com o adquirente identificado no grupo superior.
    CHAVE_GRUPO: {serie}, {nrDocto}
    CONDICAO_GRUPO: F"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.nfs"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.InfoComProd.IdeEstabel.TpComerc.IdeAdquir.Nfs"

    eso11_serie = fields.Char(string="serie")

    eso11_nrDocto = fields.Char(string="nrDocto", xsd_required=True)

    eso11_dtEmisNF = fields.Date(
        string="Data de emissão da nota fiscal/fatura",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de emissão da nota fiscal/fatura.\nValidação: O mês/ano da "
            "emissão da nota fiscal deve ser igual ao mês/ano indicado no "
            "registro de abertura do arquivo."
        ),
    )

    eso11_vlrBruto = fields.Float(
        string="o valor bruto da(s) nota(s) fiscal(is)",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
    )

    eso11_vrCPDescPR = fields.Float(
        string="o valor",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "o valor da contribuição previdenciária descontada pelo adquirente"
            " na comercialização de produção. Se não houver informação, "
            "preencher com 0 (zero)."
        ),
    )

    eso11_vrRatDescPR = fields.Float(
        string="Valor da contribuição destinada",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição destinada ao financiamento dos benefícios "
            "concedidos em razão do grau de incidência da incapacidade "
            "laborativa decorrente dos riscos ambientais do trabalho, "
            "incidente sobre a comercialização de produção rural de produtor "
            "rural. Se não houver informação, preencher com 0 (zero)."
        ),
    )

    eso11_vrSenarDesc = fields.Float(
        string="Valor da contribuição destinada ao SENAR",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help=(
            "Valor da contribuição destinada ao SENAR, incidente sobre a "
            "comercialização de produção rural de produtor rural pessoa "
            "física/segurado especial. Se não houver informação, preencher com"
            " 0 (zero)."
        ),
    )


class InfoProcJud(models.AbstractModel):
    """Informação de processos judiciais
    DESCRICAO_COMPLETA:Informações de processos judiciais com decisão/sentença
    favorável ao contribuinte e relativos à contribuição incidente sobre a
    comercialização.
    CHAVE_GRUPO: {tpProc}, {nrProc}, {codSusp}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoprocjud"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtComProd.InfoComProd.IdeEstabel.TpComerc.InfoProcJud"

    eso11_tpProc = fields.Selection(
        TS_TPPROC_1_2, string="tpProc", xsd_required=True, xsd_type="TS_tpProc_1_2"
    )

    eso11_nrProc = fields.Char(
        string="Informar um número",
        xsd_required=True,
        xsd_type="TS_nrProc_17_20_21",
        help=(
            "Informar um número de processo cadastrado através do evento "
            "S-1070, cujo "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) "
            "seja igual a [1].\nValidação: Deve ser um número de processo "
            "administrativo ou judicial válido e existente na Tabela de "
            "Processos (S-1070), com "
            "{indMatProc}(1070_infoProcesso_inclusao_dadosProc_indMatProc) = "
            "[1]."
        ),
    )

    eso11_codSusp = fields.Char(
        string="codSusp", xsd_required=True, xsd_type="TS_codSusp"
    )

    eso11_vrCPSusp = fields.Float(
        string="Valor da contribuição previdenciária",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor da contribuição previdenciária com exigibilidade "
            "suspensa.\nValidação: Preenchimento obrigatório se "
            "{vrRatSusp}(./vrRatSusp) e {vrSenarSusp}(./vrSenarSusp) não "
            "tiverem sido preenchidos.\nDeve ser um valor maior que 0 (zero)."
        ),
    )

    eso11_vrRatSusp = fields.Float(
        string="Valor da contribuição para GILRAT",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor da contribuição para GILRAT com exigibilidade "
            "suspensa.\nValidação: Preenchimento obrigatório se "
            "{vrCPSusp}(./vrCPSusp) e {vrSenarSusp}(./vrSenarSusp) não tiverem"
            " sido preenchidos.\nDeve ser um valor maior que 0 (zero)."
        ),
    )

    eso11_vrSenarSusp = fields.Float(
        string="Valor da contribuição para o SENAR",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor da contribuição para o SENAR com exigibilidade "
            "suspensa.\nValidação: Preenchimento obrigatório se "
            "{vrCPSusp}(./vrCPSusp) e {vrRatSusp}(./vrRatSusp) não tiverem "
            "sido preenchidos.\nDeve ser um valor maior que 0 (zero)."
        ),
    )
