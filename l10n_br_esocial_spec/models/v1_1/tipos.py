# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models


TS_INDAPURIR = [
    ("0", "Normal (apuração sob a folha de pagamento declarada no eSocial)"),
    ("1", "Situação especial de apuração de IR"),
]

"Indicativo de período de apuração."
TS_INDAPURACAO = [
    ("1", "Mensal"),
    ("2", "Anual (13° salário)"),
]

"Indicativo do tipo de guia."
TS_INDGUIA = [
    ("1", "Documento de Arrecadação do eSocial - DAE"),
]

"""Indicador de desconto da contribuição previdenciária do trabalhador."""
TS_INDMV = [
    (
        "1",
        "O declarante aplica a(s) alíquota(s) de desconto do segurado sobre a remuneração por ele informada (o percentual da(s) alíquota(s) será(ão) obtido(s) considerando a remuneração total do trabalhador)",
    ),
    (
        "2",
        "O declarante aplica a(s) alíquota(s) de desconto do segurado sobre a diferença entre o limite máximo do salário de contribuição e a remuneração de outra(s) empresa(s) para as quais o trabalhador informou que houve o desconto",
    ),
    (
        "3",
        "O declarante não realiza desconto do segurado, uma vez que houve desconto sobre o limite máximo de salário de contribuição em outra(s) empresa(s)",
    ),
]

"""Informe [1] para arquivo original ou [2] para arquivo de retificação."""
TS_INDRETIF = [
    ("1", "Original"),
    ("2", "Retificação"),
]

"""Indicador de contribuição substituída.
    Validação: O preenchimento do campo é obrigatório apenas no caso das empresas
    enquadradas no regime de tributação Simples Nacional, com tributação
    previdenciária substituída e não substituída
    ({classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000
    = [03]). Para os demais empregadores, não deve ser informado."""
TS_INDSIMPLES = [
    ("1", "Contribuição substituída integralmente"),
    ("2", "Contribuição não substituída"),
    ("3", "Contribuição não substituída concomitante com contribuição substituída"),
]

"Processo de emissão do evento."
TS_PROCEMI = [
    ("1", "Aplicativo do empregador"),
    ("2", "Aplicativo governamental - Simplificado Pessoa Física"),
    ("3", "Aplicativo governamental - Web Geral"),
    ("4", "Aplicativo governamental - Simplificado Pessoa Jurídica"),
    ("22", "Aplicativo governamental para dispositivos móveis - Empregador Doméstico"),
]

"Processo de emissão do evento."
TS_PROCEMI_8 = [
    ("8", "Aplicativo governamental para envio de eventos pelo Judiciário"),
]

"Processo de emissão do evento."
TS_PROCEMI_PF = [
    ("1", "Aplicativo do empregador"),
    ("2", "Aplicativo governamental - Simplificado Pessoa Física"),
    ("3", "Aplicativo governamental - Web Geral"),
    ("22", "Aplicativo governamental para dispositivos móveis - Empregador Doméstico"),
]

"Processo de emissão do evento."
TS_PROCEMI_PJ = [
    ("1", "Aplicativo do empregador"),
    ("3", "Aplicativo governamental - Web Geral"),
    ("4", "Aplicativo governamental - Simplificado Pessoa Jurídica"),
]

"Processo de emissão do evento."
TS_PROCEMI_SEM_8 = [
    ("1", "Aplicativo do empregador"),
    ("2", "Aplicativo governamental - Simplificado Pessoa Física"),
    ("3", "Aplicativo governamental - Web Geral"),
    ("4", "Aplicativo governamental - Simplificado Pessoa Jurídica"),
    ("9", "Aplicativo governamental - Integração com a Junta Comercial"),
    ("22", "Aplicativo governamental para dispositivos móveis - Empregador Doméstico"),
]

"Processo de emissão do evento."
TS_PROCEMI_TODOS = [
    ("1", "Aplicativo do empregador"),
    ("2", "Aplicativo governamental - Simplificado Pessoa Física"),
    ("3", "Aplicativo governamental - Web Geral"),
    ("4", "Aplicativo governamental - Simplificado Pessoa Jurídica"),
    ("8", "Aplicativo governamental para envio de eventos pelo Judiciário"),
    ("9", "Aplicativo governamental - Integração com a Junta Comercial"),
    ("22", "Aplicativo governamental para dispositivos móveis - Empregador Doméstico"),
]

TS_SIM_NAO = [
    ("S", "Sim"),
    ("N", "Não"),
]

"""Preencher com o código relativo ao tipo de contrato em tempo parcial.
    Validação: O código [1] só é válido se {codCateg}(../codCateg) = [104]. Os
    códigos [2, 3] não são válidos se {codCateg}(../codCateg) = [104]."""
TS_TMPPARC = [
    ("0", "Não é contrato em tempo parcial"),
    ("1", "Limitado a 25 horas semanais"),
    ("2", "Limitado a 30 horas semanais"),
    ("3", "Limitado a 26 horas semanais"),
]

"Identificação do ambiente."
TS_TPAMB = [
    ("1", "Produção"),
    ("2", "Produção restrita"),
    ("7", "Validação (uso interno)"),
    ("8", "Teste (uso interno)"),
    ("9", "Desenvolvimento (uso interno)"),
]

"""Preencher com o código correspondente ao tipo de inscrição, conforme
    Tabela 05."""
TS_TPINSC_1 = [
    ("1", "CNPJ"),
]

"""Preencher com o código correspondente ao tipo de inscrição, conforme
    Tabela 05."""
TS_TPINSC_1_2 = [
    ("1", "CNPJ"),
    ("2", "CPF"),
]

"""Preencher com o código correspondente ao tipo de inscrição, conforme
    Tabela 05."""
TS_TPINSC_1_3_4 = [
    ("1", "CNPJ"),
    ("3", "CAEPF"),
    ("4", "CNO"),
]

"Preencher com o código correspondente ao tipo de processo."
TS_TPPROC_1_2 = [
    ("1", "Administrativo"),
    ("2", "Judicial"),
]

"Abrangência da decisão."
TS_TPTRIB = [
    ("1", "IRRF"),
    ("2", "Contribuições sociais do trabalhador"),
]

TS_UF = [
    ("AC", "AC"),
    ("AL", "AL"),
    ("AP", "AP"),
    ("AM", "AM"),
    ("BA", "BA"),
    ("CE", "CE"),
    ("DF", "DF"),
    ("ES", "ES"),
    ("GO", "GO"),
    ("MA", "MA"),
    ("MT", "MT"),
    ("MS", "MS"),
    ("MG", "MG"),
    ("PA", "PA"),
    ("PB", "PB"),
    ("PR", "PR"),
    ("PE", "PE"),
    ("PI", "PI"),
    ("RJ", "RJ"),
    ("RN", "RN"),
    ("RS", "RS"),
    ("RO", "RO"),
    ("RR", "RR"),
    ("SC", "SC"),
    ("SP", "SP"),
    ("SE", "SE"),
    ("TO", "TO"),
]

"Unidade de pagamento da parte fixa da remuneração."
TS_UNDSALFIXO = [
    ("1", "Por hora"),
    ("2", "Por dia"),
    ("3", "Por semana"),
    ("4", "Por quinzena"),
    ("5", "Por mês"),
    ("6", "Por tarefa"),
    ("7", "Não aplicável - Salário exclusivamente variável"),
]

"Tipo de jornada."
T_HORCONTRATUAL_TPJORNADA = [
    (
        "2",
        "Jornada 12 x 36 (12 horas de trabalho seguidas de 36 horas ininterruptas de descanso)",
    ),
    ("3", "Jornada com horário diário fixo e folga variável"),
    ("4", "Jornada com horário diário fixo e folga fixa (no domingo)"),
    ("5", "Jornada com horário diário fixo e folga fixa (exceto no domingo)"),
    (
        "6",
        "Jornada com horário diário fixo e folga fixa (em outro dia da semana), com folga adicional periódica no domingo",
    ),
    ("7", "Turno ininterrupto de revezamento"),
    ("9", "Demais tipos de jornada"),
]

"""Natureza do estágio ou da prestação de serviço civil voluntário.
    Validação: Se o código de categoria for igual a [906], deve ser preenchido com
    [N]."""
T_INFOESTAGIARIO_NATESTAGIO = [
    ("O", "Obrigatório"),
    ("N", "Não obrigatório"),
]

"""Informar o nível do estágio ou da prestação de serviço civil voluntário.
    Validação: Preenchimento obrigatório se o código de categoria for igual a
    [901]. Se o código de categoria for igual a [906], não pode ser informado
    [9]."""
T_INFOESTAGIARIO_NIVESTAGIO = [
    ("1", "Fundamental"),
    ("2", "Médio"),
    ("3", "Formação profissional"),
    ("4", "Superior"),
    ("8", "Especial"),
    ("9", "Mãe social (Lei 7.644/1987)"),
]


class TAlvaraJudicial(models.AbstractModel):
    _description = "T_alvaraJudicial"
    _name = "eso.11.talvarajudicial"
    _inherit = "spec.mixin.eso"
    _binding_type = "TAlvaraJudicial"

    eso11_nrProcJud = fields.Char(
        string="o número do processo judicial",
        xsd_required=True,
        xsd_type="TS_nrProcJud",
        help=(
            "o número do processo judicial.\nValidação: Deve ser um número de "
            "processo judicial válido."
        ),
    )


class TContato(models.AbstractModel):
    _description = "T_contato"
    _name = "eso.11.tcontato"
    _inherit = "spec.mixin.eso"
    _binding_type = "TContato"

    eso11_fonePrinc = fields.Char(string="fonePrinc")

    eso11_emailPrinc = fields.Char(string="emailPrinc")


class TEnderecoExterior(models.AbstractModel):
    """Endereço no exterior.
    CONDICAO_GRUPO: O (se não informado o grupo {brasil}(../brasil)); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tenderecoexterior"
    _inherit = "spec.mixin.eso"
    _binding_type = "TEnderecoExterior"

    eso11_paisResid = fields.Char(
        string="o código do país",
        xsd_required=True,
        xsd_type="TS_pais",
        help=(
            "o código do país.\nValidação: Deve ser um código válido e "
            "existente na Tabela 06."
        ),
    )

    eso11_dscLograd = fields.Char(
        string="dscLograd", xsd_required=True, xsd_type="TS_dscLograd"
    )

    eso11_nrLograd = fields.Char(
        string="nrLograd", xsd_required=True, xsd_type="TS_nrLograd"
    )

    eso11_complemento = fields.Char(string="complemento", xsd_type="TS_complemento")

    eso11_bairro = fields.Char(string="bairro", xsd_type="TS_bairro")

    eso11_nmCid = fields.Char(string="nmCid", xsd_required=True)

    eso11_codPostal = fields.Char(string="codPostal", xsd_type="TS_codPostal")


class TIdeBeneficio(models.AbstractModel):
    """Identificação do beneficiário e do benefício.
    CHAVE_GRUPO: {cpfBenef*}, {nrBeneficio*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tidebeneficio"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeBeneficio"

    eso11_cpfBenef = fields.Char(
        string="CPF do beneficiário", xsd_required=True, xsd_type="TS_cpf"
    )

    eso11_nrBeneficio = fields.Char(
        string="Número do benefício", xsd_required=True, xsd_type="TS_nrBeneficio"
    )


class TIdeEventoRetornoMensal(models.AbstractModel):
    """Identificação do evento de retorno.
    Evento de origem: S-1299.
    CHAVE_GRUPO: {perApur*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoretornomensal"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoRetornoMensal"

    eso11_perApur = fields.Char(
        string="mês/ano",
        xsd_required=True,
        xsd_type="TS_perApur_mensal",
        help="mês/ano (formato AAAA-MM) de referência das informações.",
    )


class TIdeTrabSemVinculo(models.AbstractModel):
    """Identificação do TSVE
    DESCRICAO_COMPLETA:Identificação do Trabalhador Sem Vínculo de
    Emprego/Estatutário - TSVE.
    CHAVE_GRUPO: {cpfTrab*}, {matricula*}, {codCateg*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tidetrabsemvinculo"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeTrabSemVinculo"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa.\nValidação: Deve"
            " corresponder à matrícula informada pelo empregador no evento "
            "S-2300 do respectivo contrato. Não preencher no caso de TSVE sem "
            "informação de matrícula no evento S-2300."
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador.\nInformar somente no caso "
            "de TSVE sem informação de matrícula no evento S-2300.\nValidação:"
            " Informação obrigatória e exclusiva se não houver preenchimento "
            "de {matricula}(./matricula). Se informado, deve ser um código "
            "válido e existente na Tabela 01."
        ),
    )


class TIdeVinculo(models.AbstractModel):
    """Informações de identificação do trabalhador e do vínculo.
    CHAVE_GRUPO: {cpfTrab*}, {matricula*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tidevinculo"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeVinculo"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2200 do respectivo vínculo trabalhista."
        ),
    )


class TIdeVinculoBaixa(models.AbstractModel):
    """Informações de identificação do trabalhador e do vínculo.
    CHAVE_GRUPO: {cpfTrab*}, {matricula*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tidevinculobaixa"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeVinculoBaixa"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2190 ou S-2200 do respectivo vínculo trabalhista."
        ),
    )


class TIdeVinculoSst(models.AbstractModel):
    """Informações de identificação do trabalhador e do vínculo.
    CHAVE_GRUPO: {cpfTrab*}, {matricula*}, {codCateg*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tidevinculosst"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeVinculoSst"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfTrab"
    )

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2190, S-2200 ou S-2300 do respectivo contrato. Não preencher no"
            " caso de Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE "
            "sem informação de matrícula no evento S-2300."
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador.\nInformar somente no caso "
            "de TSVE sem informação de matrícula no evento S-2300.\nValidação:"
            " Informação obrigatória e exclusiva se não houver preenchimento "
            "de {matricula}(./matricula). Se informado, deve ser um código "
            "válido e existente na Tabela 01."
        ),
    )


class TInfoInterm(models.AbstractModel):
    _description = "T_infoInterm"
    _name = "eso.11.tinfointerm"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoInterm"

    eso11_dia = fields.Char(string="dia", xsd_required=True, xsd_type="TS_dia")


class TNascimento(models.AbstractModel):
    "Grupo de informações do nascimento do trabalhador."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tnascimento"
    _inherit = "spec.mixin.eso"
    _binding_type = "TNascimento"

    eso11_dtNascto = fields.Date(
        string="a data de nascimento", xsd_required=True, xsd_type="xs:date"
    )

    eso11_paisNascto = fields.Char(
        string="o código do país de nascimento",
        xsd_required=True,
        xsd_type="TS_pais",
        help=(
            "o código do país de nascimento do trabalhador.\nValidação: Deve "
            "ser um código válido e existente na Tabela 06."
        ),
    )

    eso11_paisNac = fields.Char(
        string="paisNac", xsd_required=True, xsd_type="TS_paisNac"
    )


class TNovaValidade(models.AbstractModel):
    """Novo período de validade das informações.
    DESCRICAO_COMPLETA:Informação preenchida exclusivamente em caso de alteração do
    período de validade das informações, apresentando o novo período de
    validade.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tnovavalidade"
    _inherit = "spec.mixin.eso"
    _binding_type = "TNovaValidade"

    eso11_iniValid = fields.Char(
        string="iniValid", xsd_required=True, xsd_type="TS_iniValid"
    )

    eso11_fimValid = fields.Char(string="fimValid", xsd_type="TS_fimValid")


class TTreiCap(models.AbstractModel):
    _description = "T_treiCap"
    _name = "eso.11.ttreicap"
    _inherit = "spec.mixin.eso"
    _binding_type = "TTreiCap"

    eso11_codTreiCap = fields.Char(string="codTreiCap", xsd_required=True)


class TAprend(models.AbstractModel):
    _description = "T_aprend"
    _name = "eso.11.taprend"
    _inherit = "spec.mixin.eso"
    _binding_type = "TAprend"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do estabelecimento para o qual a contratação "
            "de aprendiz foi efetivada, de acordo com o tipo de inscrição "
            "indicado no campo {aprend/tpInsc}(./tpInsc).\nValidação: Deve ser"
            " um identificador válido e:\na) Se {aprend/tpInsc}(./tpInsc) = "
            "[1], deve ser informado com 14 (catorze) algarismos. Se o "
            "empregador for pessoa jurídica, a raiz do CNPJ informado deve ser"
            " diferente de {ideEmpregador/nrInsc}(/ideEmpregador_nrInsc).\nb) "
            "Se {aprend/tpInsc}(./tpInsc) = [2], deve ser diferente do CPF do "
            "empregado. Se o empregador for pessoa física, também deve ser "
            "diferente do CPF do empregador."
        ),
    )


class TEnderecoBrasil(models.AbstractModel):
    """Endereço no Brasil.
    CONDICAO_GRUPO: O (se não informado o grupo {exterior}(../exterior)); N (nos
    demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tenderecobrasil"
    _inherit = "spec.mixin.eso"
    _binding_type = "TEnderecoBrasil"

    eso11_tpLograd = fields.Char(string="tpLograd", xsd_type="TS_tpLograd")

    eso11_dscLograd = fields.Char(
        string="dscLograd", xsd_required=True, xsd_type="TS_dscLograd"
    )

    eso11_nrLograd = fields.Char(
        string="nrLograd", xsd_required=True, xsd_type="TS_nrLograd"
    )

    eso11_complemento = fields.Char(string="complemento", xsd_type="TS_complemento")

    eso11_bairro = fields.Char(string="bairro", xsd_type="TS_bairro")

    eso11_cep = fields.Char(string="cep", xsd_required=True, xsd_type="TS_cep")

    eso11_codMunic = fields.Char(
        string="codMunic", xsd_required=True, xsd_type="TS_codMunic"
    )

    eso11_uf = fields.Selection(
        TS_UF,
        string="a sigla da Unidade da Federação",
        xsd_required=True,
        xsd_type="TS_uf",
        help="a sigla da Unidade da Federação - UF.",
    )


class THorContratual(models.AbstractModel):
    _description = "T_horContratual"
    _name = "eso.11.thorcontratual"
    _inherit = "spec.mixin.eso"
    _binding_type = "THorContratual"

    eso11_qtdHrsSem = fields.Float(string="qtdHrsSem")

    eso11_tpJornada = fields.Selection(
        T_HORCONTRATUAL_TPJORNADA, string="tpJornada", xsd_required=True
    )

    eso11_tmpParc = fields.Selection(
        TS_TMPPARC, string="tmpParc", xsd_required=True, xsd_type="TS_tmpParc"
    )

    eso11_horNoturno = fields.Selection(
        TS_SIM_NAO,
        string="Indicar",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se a jornada semanal possui horário noturno (no todo ou "
            "em parte).\nValidação: Informação obrigatória se "
            "{codCateg}(../codCateg) for diferente de [111]."
        ),
    )

    eso11_dscJorn = fields.Char(
        string="Descrição da jornada semanal contratual",
        xsd_required=True,
        xsd_type="TS_texto_999",
        help=(
            "Descrição da jornada semanal contratual, contendo os dias da "
            "semana e os respectivos horários contratuais (entrada, saída e "
            "intervalos)."
        ),
    )


class TIdeEmpregador(models.AbstractModel):
    """Informações de identificação do empregador.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideempregador"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEmpregador"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_8_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e "
            "conforme informado em S-1000."
        ),
    )


class TIdeEmpregadorCnpj(models.AbstractModel):
    """Informações de identificação do empregador.
    CHAVE_GRUPO: {tpInsc*}, {nrInsc*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideempregadorcnpj"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEmpregadorCnpj"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1"
    )

    eso11_nrInsc = fields.Char(string="nrInsc", xsd_required=True)


class TIdeEmpregadorExclusao(models.AbstractModel):
    """Informações de identificação do empregador.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideempregadorexclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEmpregadorExclusao"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_8_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {ideEmpregador/tpInsc}(./tpInsc) e "
            "conforme informado em S-1000."
        ),
    )


class TIdeEventoEvtTab(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoevttab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoEvtTab"

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoEvtTabInicial(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoevttabinicial"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoEvtTabInicial"

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_SEM_8,
        string="procEmi",
        xsd_required=True,
        xsd_type="TS_procEmi_sem_8",
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoExclusao(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoexclusao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoExclusao"

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_TODOS,
        string="procEmi",
        xsd_required=True,
        xsd_type="TS_procEmi_todos",
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoExclusaoProcTrab(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoexclusaoproctrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoExclusaoProcTrab"

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoFolha(models.AbstractModel):
    """Informações de identificação do evento.
    CHAVE_GRUPO: {indApuracao*}, {perApur*}, {indGuia*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventofolha"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoFolha"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_indApuracao = fields.Selection(
        TS_INDAPURACAO,
        string="indApuracao",
        xsd_required=True,
        xsd_type="TS_indApuracao",
    )

    eso11_perApur = fields.Char(
        string="perApur", xsd_required=True, xsd_type="TS_perApur"
    )

    eso11_indGuia = fields.Selection(
        TS_INDGUIA, string="indGuia", xsd_type="TS_indGuia"
    )

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoFolhaMensal(models.AbstractModel):
    """Informações de identificação do evento.
    CHAVE_GRUPO: {perApur*}, {indGuia*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventofolhamensal"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoFolhaMensal"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_perApur = fields.Char(
        string="perApur", xsd_required=True, xsd_type="TS_perApur_mensal"
    )

    eso11_indGuia = fields.Selection(
        TS_INDGUIA, string="indGuia", xsd_type="TS_indGuia"
    )

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoFolhaMensalPf(models.AbstractModel):
    """Informações de identificação do evento.
    CHAVE_GRUPO: {perApur*}, {indGuia*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventofolhamensalpf"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoFolhaMensalPf"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_perApur = fields.Char(
        string="perApur", xsd_required=True, xsd_type="TS_perApur_mensal"
    )

    eso11_indGuia = fields.Selection(
        TS_INDGUIA, string="indGuia", xsd_type="TS_indGuia"
    )

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_PF, string="procEmi", xsd_required=True, xsd_type="TS_procEmi_PF"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoFolhaOpp(models.AbstractModel):
    """Informações de identificação do evento.
    CHAVE_GRUPO: {indApuracao*}, {perApur*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventofolhaopp"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoFolhaOpp"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_indApuracao = fields.Selection(
        TS_INDAPURACAO,
        string="indApuracao",
        xsd_required=True,
        xsd_type="TS_indApuracao",
    )

    eso11_perApur = fields.Char(
        string="perApur", xsd_required=True, xsd_type="TS_perApur"
    )

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_PJ, string="procEmi", xsd_required=True, xsd_type="TS_procEmi_PJ"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoFolhaSemRetificacao(models.AbstractModel):
    """Informações de identificação do evento.
    CHAVE_GRUPO: {indApuracao*}, {perApur*}, {indGuia*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventofolhasemretificacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoFolhaSemRetificacao"

    eso11_indApuracao = fields.Selection(
        TS_INDAPURACAO,
        string="indApuracao",
        xsd_required=True,
        xsd_type="TS_indApuracao",
    )

    eso11_perApur = fields.Char(
        string="perApur", xsd_required=True, xsd_type="TS_perApur"
    )

    eso11_indGuia = fields.Selection(
        TS_INDGUIA, string="indGuia", xsd_type="TS_indGuia"
    )

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoRetornoContrib(models.AbstractModel):
    """Identificação do evento de retorno.
    Evento de origem: S-1299.
    CHAVE_GRUPO: {indApuracao*}, {perApur*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoretornocontrib"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoRetornoContrib"

    eso11_indApuracao = fields.Selection(
        TS_INDAPURACAO,
        string="indApuracao",
        xsd_required=True,
        xsd_type="TS_indApuracao",
    )

    eso11_perApur = fields.Char(
        string="mês/ano",
        xsd_required=True,
        xsd_type="TS_perApur",
        help=(
            "mês/ano (formato AAAA-MM) de referência das informações, se "
            "{indApuracao}(./indApuracao) for igual a [1], ou apenas o ano "
            "(formato AAAA), se {indApuracao}(./indApuracao) for igual a [2]."
        ),
    )


class TIdeEventoRetornoTrab(models.AbstractModel):
    """Identificação do evento de retorno.
    CHAVE_GRUPO: {indApuracao*}, {perApur*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventoretornotrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoRetornoTrab"

    eso11_nrRecArqBase = fields.Char(
        string="o número do recibo do arquivo",
        xsd_required=True,
        xsd_type="TS_nrRecibo",
        help=(
            "o número do recibo do arquivo que deu origem ao presente arquivo "
            "de retorno ao empregador.\nValidação: Deve ser um recibo de "
            "entrega válido, correspondente ao arquivo que deu origem ao "
            "presente arquivo de retorno (S-1200, S-2299, S-2399 ou S-3000)."
        ),
    )

    eso11_indApuracao = fields.Selection(
        TS_INDAPURACAO,
        string="indApuracao",
        xsd_required=True,
        xsd_type="TS_indApuracao",
    )

    eso11_perApur = fields.Char(
        string="mês/ano",
        xsd_required=True,
        xsd_type="TS_perApur",
        help=(
            "mês/ano (formato AAAA-MM) de referência das informações, se "
            "{indApuracao}(./indApuracao) for igual a [1], ou apenas o ano "
            "(formato AAAA), se {indApuracao}(./indApuracao) for igual a [2]."
        ),
    )


class TIdeEventoTrab(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventotrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoTrab"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoTrabPj(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventotrabpj"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoTrabPj"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_PJ, string="procEmi", xsd_required=True, xsd_type="TS_procEmi_PJ"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoTrabAdmissao(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventotrabadmissao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoTrabAdmissao"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_SEM_8,
        string="procEmi",
        xsd_required=True,
        xsd_type="TS_procEmi_sem_8",
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoTrabIndGuia(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventotrabindguia"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoTrabIndGuia"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_indGuia = fields.Selection(
        TS_INDGUIA, string="indGuia", xsd_type="TS_indGuia"
    )

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI, string="procEmi", xsd_required=True, xsd_type="TS_procEmi"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TIdeEventoTrabJud(models.AbstractModel):
    "Informações de identificação do evento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tideeventotrabjud"
    _inherit = "spec.mixin.eso"
    _binding_type = "TIdeEventoTrabJud"

    eso11_indRetif = fields.Selection(
        TS_INDRETIF, string="indRetif", xsd_required=True, xsd_type="TS_indRetif"
    )

    eso11_nrRecibo = fields.Char(string="nrRecibo", xsd_type="TS_nrRecibo")

    eso11_tpAmb = fields.Selection(
        TS_TPAMB, string="tpAmb", xsd_required=True, xsd_type="TS_tpAmb"
    )

    eso11_procEmi = fields.Selection(
        TS_PROCEMI_8, string="procEmi", xsd_required=True, xsd_type="TS_procEmi_8"
    )

    eso11_verProc = fields.Char(
        string="verProc", xsd_required=True, xsd_type="TS_verProc"
    )


class TInfoEstagiario(models.AbstractModel):
    _description = "T_infoEstagiario"
    _name = "eso.11.tinfoestagiario"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoEstagiario"

    eso11_natEstagio = fields.Selection(
        T_INFOESTAGIARIO_NATESTAGIO, string="natEstagio", xsd_required=True
    )

    eso11_nivEstagio = fields.Selection(
        T_INFOESTAGIARIO_NIVESTAGIO, string="nivEstagio"
    )

    eso11_areaAtuacao = fields.Char(
        string="Área de atuação do estagiário",
        xsd_type="TS_texto_100",
        help=(
            "Área de atuação do estagiário ou, no caso de prestação de serviço"
            " civil voluntário, jornada semanal do desempenho de atividades em"
            " formato decimal."
        ),
    )

    eso11_nrApol = fields.Char(
        string="Número da apólice de seguro", xsd_type="TS_codigo_esocial"
    )

    eso11_dtPrevTerm = fields.Date(
        string="Data prevista para o término",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data prevista para o término do estágio ou da prestação de "
            "serviço civil voluntário.\nValidação: Deve ser uma data posterior"
            " à data de início do estágio ou da prestação de serviço civil "
            "voluntário."
        ),
    )

    eso11_instEnsino = fields.Many2one(
        comodel_name="eso.11.instensino",
        string="Instituição de ensino ou entidade",
        xsd_required=True,
        help="Instituição de ensino ou entidade de formação/qualificação.",
    )

    eso11_ageIntegracao = fields.Many2one(
        comodel_name="eso.11.ageintegracao",
        string="Agente de integração",
        help=(
            "Agente de integração.\nCONDICAO_GRUPO: OC (se o código de "
            "categoria for igual a [901]); N (nos demais casos)"
        ),
    )

    eso11_supervisorEstagio = fields.Many2one(
        comodel_name="eso.11.supervisorestagio",
        string="Supervisor do estágio",
        help=(
            "Supervisor do estágio.\nCONDICAO_GRUPO: OC (se o código de "
            "categoria for igual a [901]); N (nos demais casos)"
        ),
    )


class InstEnsino(models.AbstractModel):
    "Instituição de ensino ou entidade de formação/qualificação."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.instensino"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoEstagiario.InstEnsino"

    eso11_cnpjInstEnsino = fields.Char(
        string="o CNPJ da instituição de ensino",
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ da instituição de ensino, no caso de estágio, ou da "
            "entidade de formação/qualificação, no caso de prestação de "
            "serviço civil voluntário. Deve ser preenchido apenas se a "
            "instituição/entidade for brasileira.\nValidação: Se informado, "
            "deve ser um CNPJ válido, com 14 (catorze) algarismos."
        ),
    )

    eso11_nmRazao = fields.Char(
        string="razão social",
        xsd_type="TS_texto_100",
        help=(
            "razão social.\nValidação: Preenchimento obrigatório e exclusivo "
            "se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não estiver "
            "preenchido."
        ),
    )

    eso11_dscLograd = fields.Char(
        string="Descrição do logradouro",
        xsd_type="TS_dscLograd",
        help=(
            "Descrição do logradouro.\nValidação: Preenchimento obrigatório e "
            "exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não "
            "estiver preenchido."
        ),
    )

    eso11_nrLograd = fields.Char(
        string="Número do logradouro",
        xsd_type="TS_nrLograd",
        help=(
            "Número do logradouro.\nSe não houver número a ser informado, "
            "preencher com 'S/N'.\nValidação: Preenchimento obrigatório e "
            "exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não "
            "estiver preenchido."
        ),
    )

    eso11_bairro = fields.Char(
        string="Nome do bairro/distrito",
        xsd_type="TS_bairro",
        help=(
            "Nome do bairro/distrito.\nValidação: Preenchimento obrigatório e "
            "exclusivo se o campo {cnpjInstEnsino}(./cnpjInstEnsino) não "
            "estiver preenchido."
        ),
    )

    eso11_cep = fields.Char(
        string="Código de Endereçamento Postal",
        xsd_type="TS_cep",
        help=(
            "Código de Endereçamento Postal - CEP.\nValidação: Não informar se"
            " o campo {cnpjInstEnsino}(./cnpjInstEnsino) estiver preenchido. "
            "Se informado, deve ser preenchido apenas com números, com 8 "
            "(oito) posições."
        ),
    )

    eso11_codMunic = fields.Char(
        string="o código do município",
        xsd_type="TS_codMunic",
        help=(
            "o código do município, conforme tabela do IBGE.\nValidação: Não "
            "informar se o campo {cnpjInstEnsino}(./cnpjInstEnsino) estiver "
            "preenchido. Se informado, deve ser um código válido e existente "
            "na tabela do IBGE."
        ),
    )

    eso11_uf = fields.Selection(
        TS_UF,
        string="a sigla da Unidade da Federação",
        xsd_type="TS_uf",
        help=(
            "a sigla da Unidade da Federação - UF.\nValidação: Não informar se"
            " o campo {cnpjInstEnsino}(./cnpjInstEnsino) estiver preenchido."
        ),
    )


class AgeIntegracao(models.AbstractModel):
    """Agente de integração.
    CONDICAO_GRUPO: OC (se o código de categoria for igual a [901]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ageintegracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoEstagiario.AgeIntegracao"

    eso11_cnpjAgntInteg = fields.Char(
        string="CNPJ do agente de integração",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do agente de integração.\nValidação: Deve ser um CNPJ "
            "válido, com 14 (catorze) algarismos."
        ),
    )


class SupervisorEstagio(models.AbstractModel):
    """Supervisor do estágio.
    CONDICAO_GRUPO: OC (se o código de categoria for igual a [901]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.supervisorestagio"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoEstagiario.SupervisorEstagio"

    eso11_cpfSupervisor = fields.Char(
        string="CPF do responsável pela supervisão",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "CPF do responsável pela supervisão do estagiário.\nValidação: "
            "Deve ser um CPF válido."
        ),
    )


class TInfoMv(models.AbstractModel):
    """Informação de múltiplos vínculos
    DESCRICAO_COMPLETA:Grupo preenchido exclusivamente em caso de trabalhador que
    possua outros vínculos/atividades nos quais já tenha ocorrido desconto de
    contribuição previdenciária.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tinfomv"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoMv"

    eso11_indMV = fields.Selection(
        TS_INDMV, string="indMV", xsd_required=True, xsd_type="TS_indMV"
    )

    eso11_remunOutrEmpr = fields.One2many(
        "eso.11.remunoutrempr",
        "eso11_remunOutrEmpr_T_infoMV_id",
        string="Remuneração recebida pelo trabalhador",
        help=(
            "Remuneração recebida pelo trabalhador em outras empresas ou "
            "atividades\nDESCRICAO_COMPLETA:Informações relativas ao "
            "trabalhador que possui vínculo empregatício com outra(s) "
            "empresa(s) e/ou que exerce outras atividades como contribuinte "
            "individual, detalhando as empresas que efetuaram (ou efetuarão) "
            "desconto da contribuição.\nCHAVE_GRUPO: {tpInsc}, {nrInsc}, "
            "{codCateg}"
        ),
    )


class RemunOutrEmpr(models.AbstractModel):
    """Remuneração recebida pelo trabalhador em outras empresas ou atividades
    DESCRICAO_COMPLETA:Informações relativas ao trabalhador que possui vínculo
    empregatício com outra(s) empresa(s) e/ou que exerce outras atividades como
    contribuinte individual, detalhando as empresas que efetuaram (ou
    efetuarão) desconto da contribuição.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codCateg}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.remunoutrempr"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoMv.RemunOutrEmpr"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo "
            "{remunOutrEmpr/tpInsc}(./tpInsc).\nValidação: a) Se "
            "{remunOutrEmpr/tpInsc}(./tpInsc) = [1], deve ser um CNPJ válido, "
            "diferente do CNPJ base indicado no evento de Informações do "
            "Empregador (S-1000) e dos estabelecimentos informados através do "
            "evento S-1005.\nb) Se {remunOutrEmpr/tpInsc}(./tpInsc) = [2], "
            "deve ser um CPF válido e diferente do CPF do trabalhador e ainda,"
            " caso o empregador seja pessoa física, diferente do CPF do "
            "empregador."
        ),
    )

    eso11_codCateg = fields.Char(
        string="codCateg", xsd_required=True, xsd_type="TS_codCategOE"
    )

    eso11_vlrRemunOE = fields.Float(
        string="vlrRemunOE", xsd_required=True, xsd_type="TS_vlrRemunOE"
    )


class TInfoRra(models.AbstractModel):
    """Informações complementares de RRA.
    DESCRICAO_COMPLETA:Informações complementares relativas a Rendimentos Recebidos
    Acumuladamente - RRA.
    CONDICAO_GRUPO: O (se {indRRA}(../indRRA) = [S]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tinforra"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoRra"

    eso11_tpProcRRA = fields.Selection(
        TS_TPPROC_1_2, string="tpProcRRA", xsd_required=True, xsd_type="TS_tpProc_1_2"
    )

    eso11_nrProcRRA = fields.Char(
        string="número",
        xsd_type="TS_nrProc_17_20_21",
        help=(
            "número do processo/requerimento "
            "administrativo/judicial.\nValidação: Informação obrigatória se "
            "{tpProcRRA}(./tpProcRRA) = [2] e opcional se "
            "{tpProcRRA}(./tpProcRRA) = [1]. Deve ser número de processo "
            "válido e:\na) Se {tpProcRRA}(./tpProcRRA) = [1], deve possuir 17 "
            "(dezessete) ou 21 (vinte e um) algarismos;\nb) Se "
            "{tpProcRRA}(./tpProcRRA) = [2], deve possuir 20 (vinte) "
            "algarismos."
        ),
    )

    eso11_descRRA = fields.Char(string="descRRA", xsd_required=True)

    eso11_qtdMesesRRA = fields.Float(string="qtdMesesRRA", xsd_required=True)

    eso11_despProcJud = fields.Many2one(
        comodel_name="eso.11.despprocjud", string="despProcJud"
    )

    eso11_ideAdv = fields.One2many(
        "eso.11.ideadv",
        "eso11_ideAdv_T_infoRRA_id",
        string="Identificação dos advogados",
        help=(
            "Identificação dos advogados.\nCHAVE_GRUPO: {tpInsc}, "
            "{nrInsc}\nCONDICAO_GRUPO: OC"
        ),
    )


class DespProcJud(models.AbstractModel):
    """Despesas com processo judicial
    DESCRICAO_COMPLETA:Detalhamento das despesas com processo judicial.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.despprocjud"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoRra.DespProcJud"

    eso11_vlrDespCustas = fields.Float(
        string="o valor das despesas",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help="o valor das despesas com custas judiciais.",
    )

    eso11_vlrDespAdvogados = fields.Float(
        string="o valor total das despesas",
        xsd_required=True,
        xsd_type="TS_valorMonetario",
        help="o valor total das despesas com advogado(s).",
    )


class IdeAdv(models.AbstractModel):
    """Identificação dos advogados.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideadv"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoRra.IdeAdv"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2,
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2",
        help=("o código correspondente ao tipo de inscrição, conforme Tabela 05."),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do advogado",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do advogado.\nValidação: Deve ser um número "
            "de inscrição válido, de acordo com o tipo de inscrição indicado "
            "no campo {ideAdv/tpInsc}(./tpInsc), considerando as "
            "particularidades aplicadas à informação de CNPJ de órgão público "
            "em S-1000.\nSe {ideAdv/tpInsc}(./tpInsc) = [1], deve possuir 14 "
            "(catorze) algarismos e, no caso de declarante pessoa jurídica, "
            "ser diferente do CNPJ base do empregador (exceto se "
            "{ideEmpregador/nrInsc}(/ideEmpregador_nrInsc) tiver 14 (catorze) "
            "algarismos).\nSe {ideAdv/tpInsc}(./tpInsc) = [2], deve possuir 11"
            " (onze) algarismos e, no caso de declarante pessoa física, ser "
            "diferente do CPF do empregador."
        ),
    )

    eso11_vlrAdv = fields.Float(
        string="Valor da despesa com o advogado",
        xsd_type="TS_valorMonetario",
        help="Valor da despesa com o advogado, se houver.",
    )


class TInfoSimples(models.AbstractModel):
    """Informação relativa a empresas do Simples
    DESCRICAO_COMPLETA:Informação relativa a empresas enquadradas no regime de
    tributação Simples Nacional.
    CONDICAO_GRUPO: O (se
    {classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000
    = [03]); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tinfosimples"
    _inherit = "spec.mixin.eso"
    _binding_type = "TInfoSimples"

    eso11_indSimples = fields.Selection(
        TS_INDSIMPLES,
        string="Indicador de contribuição substituída",
        xsd_required=True,
        xsd_type="TS_indSimples",
    )


class TItensRemunRpps(models.AbstractModel):
    """Itens da remuneração do trabalhador
    DESCRICAO_COMPLETA:Rubricas que compõem a remuneração do trabalhador."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.titensremunrpps"
    _inherit = "spec.mixin.eso"
    _binding_type = "TItensRemunRpps"

    eso11_codRubr = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador que identifica a rubrica em sua "
            "folha de pagamento."
        ),
    )

    eso11_ideTabRubr = fields.Char(
        string="ideTabRubr", xsd_required=True, xsd_type="TS_ideTabRubr"
    )

    eso11_qtdRubr = fields.Float(
        string="quantidade de referência para apuração",
        xsd_type="TS_qtdRubr",
        help=(
            "quantidade de referência para apuração (em horas, cotas, meses, "
            "etc.).\nValidação: Deve ser maior que 0 (zero)."
        ),
    )

    eso11_fatorRubr = fields.Float(
        string="fator, percentual, etc",
        xsd_type="TS_fator",
        help=(
            "fator, percentual, etc. da rubrica, quando "
            "necessário.\nValidação: Deve ser maior que 0 (zero)."
        ),
    )

    eso11_vrRubr = fields.Float(
        string="vrRubr", xsd_required=True, xsd_type="TS_vrRubr"
    )

    eso11_indApurIR = fields.Selection(
        TS_INDAPURIR,
        string="Indicativo de tipo de apuração de IR",
        xsd_required=True,
        xsd_type="TS_indApurIR",
    )


class TLocalTrabGeral(models.AbstractModel):
    _description = "T_localTrabGeral"
    _name = "eso.11.tlocaltrabgeral"
    _inherit = "spec.mixin.eso"
    _binding_type = "TLocalTrabGeral"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_3_4, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_3_4"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_12_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo "
            "{localTrabGeral/tpInsc}(./tpInsc).\nValidação: Deve ser um número"
            " de inscrição válido e existente na Tabela de Estabelecimentos "
            "(S-1005), bem como compatível com "
            "{localTrabGeral/tpInsc}(./tpInsc)."
        ),
    )

    eso11_descComp = fields.Char(string="descComp")


class TProcJudTrab(models.AbstractModel):
    """Informações sobre a existência de processos judiciais do trabalhador
    DESCRICAO_COMPLETA:Informações sobre a existência de processos judiciais do
    trabalhador com decisão favorável quanto à não incidência de contribuições
    sociais e/ou Imposto de Renda.
    CHAVE_GRUPO: {tpTrib}, {nrProcJud}, {codSusp}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.tprocjudtrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "TProcJudTrab"

    eso11_tpTrib = fields.Selection(
        TS_TPTRIB, string="tpTrib", xsd_required=True, xsd_type="TS_tpTrib"
    )

    eso11_nrProcJud = fields.Char(
        string="nrProcJud", xsd_required=True, xsd_type="TS_nrProcJud_1"
    )

    eso11_codSusp = fields.Char(
        string="codSusp", xsd_required=True, xsd_type="TS_codSusp"
    )


class TRemuneracao(models.AbstractModel):
    _description = "T_remuneracao"
    _name = "eso.11.tremuneracao"
    _inherit = "spec.mixin.eso"
    _binding_type = "TRemuneracao"

    eso11_vrSalFx = fields.Float(
        string="vrSalFx", xsd_required=True, xsd_type="TS_vrSalFx"
    )

    eso11_undSalFixo = fields.Selection(
        TS_UNDSALFIXO, string="undSalFixo", xsd_required=True, xsd_type="TS_undSalFixo"
    )

    eso11_dscSalVar = fields.Char(
        string="Descrição do salário por tarefa",
        xsd_type="TS_texto_999",
        help=(
            "Descrição do salário por tarefa ou variável e como este é "
            "calculado. Ex.: Comissões pagas no percentual de 10% sobre as "
            "vendas.\nValidação: Preenchimento obrigatório se "
            "{undSalFixo}(./undSalFixo) for igual a [6, 7]."
        ),
    )


class TSucessaoVinc(models.AbstractModel):
    _description = "T_sucessaoVinc"
    _name = "eso.11.tsucessaovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "TSucessaoVinc"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1_2"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do empregador anterior, de acordo com o tipo "
            "de inscrição indicado no campo {sucessaoVinc/tpInsc}(./tpInsc)."
        ),
    )

    eso11_matricAnt = fields.Char(
        string="Matrícula do trabalhador",
        xsd_type="TS_codigo_esocial",
        help="Matrícula do trabalhador no empregador anterior.",
    )

    eso11_dtAdm = fields.Date(
        string="a data de admissão do trabalhador",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de admissão do trabalhador. No caso de transferência do "
            "empregado, deve ser preenchida a data inicial do vínculo no "
            "primeiro empregador (data de início do vínculo)."
        ),
    )
