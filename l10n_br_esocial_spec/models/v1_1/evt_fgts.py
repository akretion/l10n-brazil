# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDINCID,
    TSTPACCONVFGTS,
    TSTPINSC1234,
    TSTPINSC124,
    TSTPVALORE,
    TIdeEmpregador,
    TIdeEventoRetornoContrib,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtFGTS/v_S_01_01_00"

"""Tipo de valor que influi na apuração do FGTS.
    Validação: Se o evento de origem for S-5003, deve corresponder ao valor
    informado no campo {tpValor}(5003_infoFGTS_ideEstab_ideLotacao_infoTrabFGTS
    _infoBaseFGTS_basePerApur_tpValor) desse evento.
    Se o evento de origem for S-1270, deve ser retornado [19]."""
BASEPERAPUR_TPVALOR = [
    ("11", "FGTS mensal"),
    ("12", "FGTS 13° salário"),
    ("13", "FGTS (período anterior) mensal"),
    ("14", "FGTS (período anterior) 13º salário"),
    ("15", "FGTS mensal - Aprendiz/Contrato Verde e Amarelo"),
    ("16", "FGTS 13° salário - Aprendiz/Contrato Verde e Amarelo"),
    ("17", "FGTS (período anterior) mensal - Aprendiz/Contrato Verde e Amarelo"),
    ("18", "FGTS (período anterior) 13º salário - Aprendiz/Contrato Verde e Amarelo"),
    ("19", "FGTS - Avulsos não portuários"),
    ("21", "FGTS mês da rescisão"),
    ("22", "FGTS 13° salário rescisório"),
    ("23", "FGTS aviso prévio indenizado"),
    ("24", "FGTS (período anterior) mês da rescisão"),
    ("25", "FGTS (período anterior) 13º salário rescisório"),
    ("26", "FGTS (período anterior) aviso prévio indenizado"),
    ("27", "FGTS mês da rescisão - Aprendiz/Contrato Verde e Amarelo"),
    ("28", "FGTS 13° salário rescisório - Aprendiz/Contrato Verde e Amarelo"),
    ("29", "FGTS aviso prévio indenizado - Aprendiz/Contrato Verde e Amarelo"),
    (
        "30",
        "FGTS (período anterior) mês da rescisão - Aprendiz/Contrato Verde e Amarelo",
    ),
    (
        "31",
        "FGTS (período anterior) 13° salário rescisório - Aprendiz/Contrato Verde e Amarelo",
    ),
    (
        "32",
        "FGTS (período anterior) aviso prévio indenizado - Aprendiz/Contrato Verde e Amarelo",
    ),
    ("41", "FGTS mensal - Indenização compensatória do empregado doméstico"),
    ("42", "FGTS 13° salário - Indenização compensatória do empregado doméstico"),
    (
        "43",
        "FGTS (período anterior) mensal - Indenização compensatória do empregado doméstico",
    ),
    (
        "44",
        "FGTS (período anterior) 13º salário - Indenização compensatória do empregado doméstico",
    ),
    ("45", "FGTS mês da rescisão - Indenização compensatória do empregado doméstico"),
    (
        "46",
        "FGTS 13° salário rescisório - Indenização compensatória do empregado doméstico",
    ),
    (
        "47",
        "FGTS aviso prévio indenizado - Indenização compensatória do empregado doméstico",
    ),
    (
        "48",
        "FGTS (período anterior) mês da rescisão - Indenização compensatória do empregado doméstico",
    ),
    (
        "49",
        "FGTS (período anterior) 13º salário rescisório - Indenização compensatória do empregado doméstico",
    ),
    (
        "50",
        "FGTS (período anterior) aviso prévio indenizado - Indenização compensatória do empregado doméstico",
    ),
]

"Indicativo de existência de FGTS."
INFOFGTS_INDEXISTINFO = [
    ("1", "Há informações de FGTS"),
    ("2", "Há movimento, porém não há informações de FGTS"),
    ("3", "Não há movimento no período informado em {perApur}(5013_ideEvento_perApur)"),
]


class ESocial(models.AbstractModel):
    "S-5013 - Informações do FGTS Consolidadas por Contribuinte"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtFGTS = fields.Many2one(
        comodel_name="eso.11.evtfgts",
        string="Evento Informações do FGTS Consolidadas",
        xsd_required=True,
        help=(
            "Evento Informações do FGTS Consolidadas por "
            "Contribuinte.\nCHAVE_GRUPO: {Id}"
        ),
    )


class EvtFgts(models.AbstractModel):
    """Evento Informações do FGTS Consolidadas por Contribuinte.
    CHAVE_GRUPO: {Id}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtfgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFgts"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoretornocontrib",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_retorno_contrib",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_infoFGTS = fields.Many2one(
        comodel_name="eso.11.infofgts",
        string="Informações relativas ao FGTS",
        xsd_required=True,
        help=(
            "Informações relativas ao FGTS\nDESCRICAO_COMPLETA:Informações "
            "relativas ao Fundo de Garantia do Tempo de Serviço - FGTS."
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id_retorno")


class InfoFgts(models.AbstractModel):
    """Informações relativas ao FGTS
    DESCRICAO_COMPLETA:Informações relativas ao Fundo de Garantia do Tempo de
    Serviço - FGTS."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infofgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFgts.InfoFgts"

    eso11_nrRecArqBase = fields.Char(
        string="nrRecArqBase", xsd_required=True, xsd_type="TS_nrRecArqBase"
    )

    eso11_indExistInfo = fields.Selection(
        INFOFGTS_INDEXISTINFO, string="indExistInfo", xsd_required=True
    )

    eso11_ideEstab = fields.One2many(
        "eso.11.ideestab",
        "eso11_ideEstab_infoFGTS_id",
        string="Identificação do estabelecimento",
        help=(
            "Identificação do "
            "estabelecimento\nDESCRICAO_COMPLETA:Identificação do "
            "estabelecimento ou obra de construção civil.\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}\nCONDICAO_GRUPO: OC"
        ),
    )


class IdeEstab(models.AbstractModel):
    """Identificação do estabelecimento
    DESCRICAO_COMPLETA:Identificação do estabelecimento ou obra de construção
    civil.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFgts.InfoFgts.IdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_3_4,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_1_2_3_4",
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_required=True,
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {ideEstab/tpInsc}(./tpInsc).\nEvento "
            "de origem: S-1270 ou S-5003."
        ),
    )

    eso11_ideLotacao = fields.One2many(
        "eso.11.idelotacao",
        "eso11_ideLotacao_ideEstab_id",
        string="Identificação da lotação tributária",
        help=(
            "Identificação da lotação tributária.\nCHAVE_GRUPO: {codLotacao}, "
            "{tpLotacao}, {tpInsc}, {nrInsc}"
        ),
    )


class IdeLotacao(models.AbstractModel):
    """Identificação da lotação tributária.
    CHAVE_GRUPO: {codLotacao}, {tpLotacao}, {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idelotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFgts.InfoFgts.IdeEstab.IdeLotacao"

    eso11_codLotacao = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador para a lotação "
            "tributária.\nEvento de origem: S-1270 ou S-5003."
        ),
    )

    eso11_tpLotacao = fields.Char(
        string="o código correspondente ao tipo",
        xsd_required=True,
        xsd_type="TS_tpLotacao",
        help=(
            "o código correspondente ao tipo de lotação, conforme Tabela "
            "10.\nEvento de origem: S-1020 ou S-5003."
        ),
    )

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_4,
        string="o código correspondente ao tipo (tpInsc)",
        xsd_type="TS_tpInsc_1_2_4",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nEvento de origem: S-1020 ou S-5003."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="o número de inscrição",
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "o número de inscrição (CNPJ, CPF, CNO) ao qual pertence a lotação"
            " tributária, conforme indicado na Tabela 10.\nEvento de origem: "
            "S-1020 ou S-5003."
        ),
    )

    eso11_infoBaseFGTS = fields.Many2one(
        comodel_name="eso.11.infobasefgts",
        string="Bases de cálculo e valores do FGTS",
        help=(
            "Bases de cálculo e valores do "
            "FGTS\nDESCRICAO_COMPLETA:Informações referentes a bases de "
            "cálculo e valores do FGTS no "
            "estabelecimento/lotação.\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoBaseFgts(models.AbstractModel):
    """Bases de cálculo e valores do FGTS
    DESCRICAO_COMPLETA:Informações referentes a bases de cálculo e valores do FGTS
    no estabelecimento/lotação.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobasefgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFgts.InfoFgts.IdeEstab.IdeLotacao.InfoBaseFgts"

    eso11_basePerApur = fields.One2many(
        "eso.11.baseperapur",
        "eso11_basePerApur_infoBaseFGTS_id",
        string="Bases de cálculo e valores do FGTS",
        help=(
            "Bases de cálculo e valores do FGTS, exceto se {tpAcConv} = [E, "
            "H]\nDESCRICAO_COMPLETA:Informações consolidadas das bases de "
            "cálculo e valores do FGTS do período de apuração e de períodos "
            "anteriores, exceto se {tpAcConv} = [E, H].\nEvento de origem: "
            "S-1270 ou S-5003.\nCHAVE_GRUPO: {tpValor}, "
            "{indIncid}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoBasePerAntE = fields.One2many(
        "eso.11.infobaseperante",
        "eso11_infoBasePerAntE_infoBaseFGTS_id",
        string="Informações sobre bases de cálculo",
        help=(
            "Informações sobre bases de cálculo e valores do FGTS, quando {tpA"
            "cConv}(5013_infoFGTS_ideEstab_ideLotacao_infoBaseFGTS_infoBasePer"
            "AntE_tpAcConv) = [E, H]\nDESCRICAO_COMPLETA:Informações "
            "referentes a bases de cálculo e valores do FGTS de períodos "
            "anteriores quando {tpAcConv}(./tpAcConv) = [E, H].\nEvento de "
            "origem: S-5003.\nCHAVE_GRUPO: {perRef}, "
            "{tpAcConv}\nCONDICAO_GRUPO: OC"
        ),
    )


class BasePerApur(models.AbstractModel):
    """Bases de cálculo e valores do FGTS, exceto se {tpAcConv} = [E, H]
    DESCRICAO_COMPLETA:Informações consolidadas das bases de cálculo e valores do
    FGTS do período de apuração e de períodos anteriores, exceto se {tpAcConv}
    = [E, H].
    Evento de origem: S-1270 ou S-5003.
    CHAVE_GRUPO: {tpValor}, {indIncid}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.baseperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtFgts.InfoFgts.IdeEstab.IdeLotacao.InfoBaseFgts.BasePerApur"
    )

    eso11_tpValor = fields.Selection(
        BASEPERAPUR_TPVALOR, string="tpValor", xsd_required=True
    )

    eso11_indIncid = fields.Selection(
        TS_INDINCID,
        string="Indicativo de incidência de FGTS",
        xsd_required=True,
        xsd_type="TS_indIncid",
        help=(
            "Indicativo de incidência de FGTS.\nValidação: Se "
            "{tpValor}(./tpValor) for diferente de [19], deve corresponder ao "
            "valor informado no campo {indIncid}(5003_infoFGTS_ideEstab_ideLot"
            "acao_infoTrabFGTS_infoBaseFGTS_basePerApur_indIncid) do evento "
            "S-5003.\nSe {tpValor}(./tpValor) = [19], deve ser retornado [1]."
        ),
    )

    eso11_baseFGTS = fields.Float(
        string="Remuneração",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Remuneração (valor da base de cálculo) do FGTS.\nValidação: Deve "
            "ser maior que 0 (zero).\nSe {tpValor}(./tpValor) for diferente de"
            " [19], deve corresponder ao somatório dos valores informados no "
            "campo {remFGTS}(5003_infoFGTS_ideEstab_ideLotacao_infoTrabFGTS_in"
            "foBaseFGTS_basePerApur_remFGTS) do evento S-5003, agrupados por "
            "{tpValor}(./tpValor) e {indIncid}(./indIncid).\nSe "
            "{tpValor}(./tpValor) = [19], deve corresponder à remuneração dos "
            "trabalhadores avulsos não portuários contratados, conforme "
            "informado no campo {vrBcFGTS}(1270_remunAvNP_vrBcFgts) do evento "
            "S-1270."
        ),
    )

    eso11_vrFGTS = fields.Float(
        string="Valor histórico do FGTS a ser depositado",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor histórico do FGTS a ser depositado na conta vinculada do "
            "trabalhador.\nValidação: Deve ser maior que 0 (zero).\nSe "
            "{tpValor}(./tpValor) for diferente de [19], deve corresponder ao "
            "somatório dos valores informados no campo {dpsFGTS}(5003_infoFGTS"
            "_ideEstab_ideLotacao_infoTrabFGTS_infoBaseFGTS_basePerApur_dpsFGT"
            "S) do evento S-5003, agrupados por {tpValor}(./tpValor).\nSe "
            "{tpValor}(./tpValor) = [19], deve corresponder ao somatório dos "
            "valores informados no campo {baseFGTS}(./baseFGTS), e aplicar a "
            "alíquota de 8%."
        ),
    )


class InfoBasePerAntE(models.AbstractModel):
    """Informações sobre bases de cálculo e valores do FGTS, quando {tpAcConv}(
    5013_infoFGTS_ideEstab_ideLotacao_infoBaseFGTS_infoBasePerAntE_tpAcConv
    ) = [E, H]
    DESCRICAO_COMPLETA:Informações referentes a bases de cálculo e valores do FGTS
    de períodos anteriores quando {tpAcConv}(./tpAcConv) = [E, H].
    Evento de origem: S-5003.
    CHAVE_GRUPO: {perRef}, {tpAcConv}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobaseperante"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtFgts.InfoFgts.IdeEstab.IdeLotacao.InfoBaseFgts.InfoBasePerAntE"
    )

    eso11_perRef = fields.Char(
        string="período ao qual se refere a remuneração",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "período ao qual se refere a remuneração no formato AAAA-"
            "MM.\nValidação: Deve corresponder ao período informado no evento "
            "de origem."
        ),
    )

    eso11_tpAcConv = fields.Selection(
        TS_TPACCONV_FGTS,
        string="tpAcConv",
        xsd_required=True,
        xsd_type="TS_tpAcConv_FGTS",
    )

    eso11_basePerAntE = fields.One2many(
        "eso.11.baseperante",
        "eso11_basePerAntE_infoBasePerAntE_id",
        string="Bases de cálculo e valores do FGTS",
        help=(
            "Bases de cálculo e valores do FGTS, quando {tpAcConv}(5013_infoFG"
            "TS_ideEstab_ideLotacao_infoBaseFGTS_infoBasePerAntE_tpAcConv) = "
            "[E, H]\nDESCRICAO_COMPLETA:Informações consolidadas das bases de "
            "cálculo e valores do FGTS de períodos anteriores quando "
            "{tpAcConv}(../tpAcConv) = [E, H].\nCHAVE_GRUPO: {tpValorE}, "
            "{indIncidE}"
        ),
    )


class BasePerAntE(models.AbstractModel):
    """Bases de cálculo e valores do FGTS, quando {tpAcConv}(5013_infoFGTS_ideE
    stab_ideLotacao_infoBaseFGTS_infoBasePerAntE_tpAcConv) = [E, H]
    DESCRICAO_COMPLETA:Informações consolidadas das bases de cálculo e valores do
    FGTS de períodos anteriores quando {tpAcConv}(../tpAcConv) = [E, H].
    CHAVE_GRUPO: {tpValorE}, {indIncidE}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.baseperante"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFgts.InfoFgts.IdeEstab.IdeLotacao.InfoBaseFgts.InfoBasePerAntE.BasePerAntE"

    eso11_tpValorE = fields.Selection(
        TS_TPVALORE,
        string="Tipo de valor que influi na apuração",
        xsd_required=True,
        xsd_type="TS_tpValorE",
        help=(
            "Tipo de valor que influi na apuração do FGTS.\nValidação: Deve "
            "corresponder ao valor informado no campo {tpValorE}(5003_infoFGTS"
            "_ideEstab_ideLotacao_infoTrabFGTS_infoBaseFGTS_infoBasePerAntE_ba"
            "sePerAntE_tpValorE) do evento de origem."
        ),
    )

    eso11_indIncidE = fields.Selection(
        TS_INDINCID,
        string="Indicativo de incidência de FGTS",
        xsd_required=True,
        xsd_type="TS_indIncid",
        help=(
            "Indicativo de incidência de FGTS.\nValidação: Deve corresponder "
            "ao valor informado no campo {indIncidE}(5003_infoFGTS_ideEstab_id"
            "eLotacao_infoTrabFGTS_infoBaseFGTS_infoBasePerAntE_basePerAntE_in"
            "dIncidE) do evento de origem."
        ),
    )

    eso11_baseFGTSE = fields.Float(
        string="Remuneração",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Remuneração (valor da base de cálculo) do FGTS.\nValidação: Deve "
            "ser maior que 0 (zero).\nDeve corresponder ao somatório dos "
            "valores informados no campo {remFGTSE}(5003_infoFGTS_ideEstab_ide"
            "Lotacao_infoTrabFGTS_infoBaseFGTS_infoBasePerAntE_basePerAntE_rem"
            "FGTSE) do evento de origem, agrupados por {tpValorE}(./tpValorE) "
            "e {indIncidE}(./indIncidE)."
        ),
    )

    eso11_vrFGTSE = fields.Float(
        string="Valor histórico do FGTS a ser depositado",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor histórico do FGTS a ser depositado na conta vinculada do "
            "trabalhador.\nValidação: Deve ser maior que 0 (zero).\nDeve "
            "corresponder ao somatório dos valores informados no campo {dpsFGT"
            "SE}(5003_infoFGTS_ideEstab_ideLotacao_infoTrabFGTS_infoBaseFGTS_i"
            "nfoBasePerAntE_basePerAntE_dpsFGTSE) do evento de origem, "
            "agrupados por {tpValorE}(./tpValorE)."
        ),
    )
