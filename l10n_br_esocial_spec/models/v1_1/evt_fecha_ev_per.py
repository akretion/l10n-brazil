# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSSIMNAO,
    TIdeEmpregador,
    TIdeEventoFolhaSemRetificacao,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtFechaEvPer/v_S_01_01_00"

"""Indicativo de exclusão de apuração das aquisições de produção rural
    (eventos S-1250) do período de apuração.
    Validação: Não informar se {perApur}(1299_ideEvento_perApur) &gt;= [2021-07] ou
    se {indApuracao}(1299_ideEvento_indApuracao) = [2]. Preenchimento
    obrigatório caso o campo tenha sido informado em fechamento anterior do
    mesmo período de apuração."""
INFOFECH_INDEXCAPUR1250 = [
    ("S", "Sim"),
]

"""Indicativo de não validação das regras de fechamento, para que os
    grandes contribuintes possam reduzir o tempo de processamento do
    evento.
    O preenchimento deste campo implica a não execução da
    REGRA_VALIDA_FECHAMENTO_FOPAG.
    Validação: Não informar se {procEmi}(1299_ideEvento_procEmi) for diferente de
    [1]."""
INFOFECH_NAOVALID = [
    ("S", "Sim"),
]

"""Solicitação de transmissão imediata da DCTFWeb.
    Validação: Não informar se {perApur}(1299_ideEvento_perApur) &lt; [2021-10].
    Preenchimento obrigatório se {perApur}(1299_ideEvento_perApur) &gt;=
    [2021-10] e
    ({classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) em S-1000
    = [04] ou {indGuia}(1299_ideEvento_indGuia) estiver informado)."""
INFOFECH_TRANSDCTFWEB = [
    ("S", "Sim"),
]


class ESocial(models.AbstractModel):
    "S-1299 - Fechamento dos Eventos Periódicos"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtFechaEvPer = fields.Many2one(
        comodel_name="eso.11.evtfechaevper",
        string="Evento Fechamento dos Eventos Periódicos",
        xsd_required=True,
        help=(
            "Evento Fechamento dos Eventos Periódicos.\nCHAVE_GRUPO: {Id}\nREG"
            "RA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVE_FOPAG_SIMPLIFICAD"
            "O\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_REMUN_ANUAL_DE"
            "ZEMBRO\nREGRA:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_VALIDA_FECHAME"
            "NTO_FOPAG"
        ),
    )


class EvtFechaEvPer(models.AbstractModel):
    """Evento Fechamento dos Eventos Periódicos.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVE_FOPAG_SIMPLIFICADO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_REMUN_ANUAL_DEZEMBRO
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_FECHAMENTO_FOPAG"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtfechaevper"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFechaEvPer"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventofolhasemretificacao",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_folha_sem_retificacao",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_infoFech = fields.Many2one(
        comodel_name="eso.11.infofech",
        string="Informações do fechamento",
        xsd_required=True,
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoFech(models.AbstractModel):
    "Informações do fechamento."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infofech"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtFechaEvPer.InfoFech"

    eso11_evtRemun = fields.Selection(
        TS_SIM_NAO,
        string="Possui informações relativas",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Possui informações relativas a remuneração de trabalhadores ou "
            "provento/pensão de beneficiários no período de "
            "apuração?\nValidação: Se for igual a [S], deve existir evento de "
            "remuneração (S-1200, S-1202, S-1207, S-2299 ou S-2399) para o "
            "período de apuração, considerando o campo "
            "{indGuia}(1299_ideEvento_indGuia). Caso contrário, não deve "
            "existir evento de remuneração."
        ),
    )

    eso11_evtPgtos = fields.Selection(
        TS_SIM_NAO,
        string="Possui informações de pagamento",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Possui informações de pagamento de rendimentos do trabalho no "
            "período de apuração?\nValidação: Se for igual a [S], deve existir"
            " o evento S-1210 para o período de apuração, considerando o campo"
            " {indGuia}(1299_ideEvento_indGuia). Caso contrário, não deve "
            "existir o evento."
        ),
    )

    eso11_evtComProd = fields.Selection(
        TS_SIM_NAO,
        string="Possui informações de comercialização",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Possui informações de comercialização de produção?\nValidação: Se"
            " for igual a [S], deve existir o evento S-1260 para o período de "
            "apuração, considerando o campo {indGuia}(1299_ideEvento_indGuia)."
            " Caso contrário, não deve existir o evento."
        ),
    )

    eso11_evtContratAvNP = fields.Selection(
        TS_SIM_NAO,
        string="Contratou",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Contratou, por intermédio de sindicato, serviços de trabalhadores"
            " avulsos não portuários?\nValidação: Se for igual a [S], deve "
            "existir o evento S-1270 para o período de apuração, considerando "
            "o campo {indGuia}(1299_ideEvento_indGuia). Caso contrário, não "
            "deve existir o evento."
        ),
    )

    eso11_evtInfoComplPer = fields.Selection(
        TS_SIM_NAO,
        string="Possui informações de desoneração",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Possui informações de desoneração de folha de pagamento ou, sendo"
            " empresa enquadrada no Simples, possui informações sobre a "
            "receita obtida em atividades cuja contribuição previdenciária "
            "incidente sobre a folha de pagamento é concomitantemente "
            "substituída e não substituída?\nValidação: Se for igual a [S], "
            "deve existir o evento S-1280 para o período de apuração. Caso "
            "contrário, não deve existir o evento."
        ),
    )

    eso11_indExcApur1250 = fields.Selection(
        INFOFECH_INDEXCAPUR1250, string="indExcApur1250"
    )

    eso11_transDCTFWeb = fields.Selection(INFOFECH_TRANSDCTFWEB, string="transDCTFWeb")

    eso11_naoValid = fields.Selection(INFOFECH_NAOVALID, string="naoValid")
