# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSCONDING,
    TSESTCIVIL,
    TSGRAUINSTR,
    TSNATATIVIDADE,
    TSRACACOR,
    TSSEXO,
    TSSIMNAO,
    TSTMPRESID,
    TSTPINSC12,
    TSTPREGPREV,
    TSTPREGTRAB,
    TContato,
    TEnderecoBrasil,
    TEnderecoExterior,
    TIdeEmpregador,
    TIdeEventoTrab,
    TInfoEstagiario,
    TNascimento,
    TRemuneracao,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTSVInicio/v_S_01_01_00"

"""Indicar se o evento se refere a cadastramento inicial (o ingresso do
    trabalhador no empregador declarante é anterior à data de início da
    obrigatoriedade de envio de seus eventos não periódicos) ou se refere a
    início de TSVE (o ingresso do trabalhador no empregador declarante é
    igual ou posterior à data de início da obrigatoriedade de envio de seus
    eventos não periódicos)."""
INFOTSVINICIO_CADINI = [
  ("S", "Sim (Cadastramento Inicial)"),
  ("N", "Não (Início de TSVE)"),
]


class ESocial(models.AbstractModel):
    "S-2300 - Trabalhador Sem Vínculo de Emprego/Estatutário - Início"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtTSVInicio = fields.Many2one(
        comodel_name="eso.11.evttsvinicio",
        string="Evento TSVE - Início",
        xsd_required=True,
        help=(
            "Evento TSVE - Início\nDESCRICAO_COMPLETA:Evento Trabalhador Sem "
            "Vínculo de Emprego/Estatutário - Início.\nCHAVE_GRUPO: {Id}\nREGR"
            "A:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB\nREGRA:REGRA_COMPATIB"
            "_CATEG_EVENTO\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVE"
            "NTOS_EXTEMP\nREGRA:REGRA_EVETRAB_VALIDA_OPCAO_FGTS\nREGRA:REGRA_E"
            "XCLUSAO_ADMISSAO_TSVE_INICIO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\"
            "nREGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PRO"
            "CEMI\nREGRA:REGRA_MUDANCA_CPF\nREGRA:REGRA_REGISTRO_PRELIMINAR\nR"
            "EGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_TSV_VERIFICA_DUPLI"
            "CIDADE\nREGRA:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_VALIDA_MATRICU"
            "LA\nREGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"
        )
    )
    

class EvtTsvinicio(models.AbstractModel):
    """Evento TSVE - Início
    DESCRICAO_COMPLETA:Evento Trabalhador Sem Vínculo de Emprego/Estatutário -
    Início.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB
    REGRA:REGRA_COMPATIB_CATEG_EVENTO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVETRAB_VALIDA_OPCAO_FGTS
    REGRA:REGRA_EXCLUSAO_ADMISSAO_TSVE_INICIO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_MUDANCA_CPF
    REGRA:REGRA_REGISTRO_PRELIMINAR
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_TSV_VERIFICA_DUPLICIDADE
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_MATRICULA
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttsvinicio"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador"
    )
    
    eso11_trabalhador = fields.Many2one(
        comodel_name="eso.11.trabalhador",
        string="Grupo de informações do trabalhador",
        xsd_required=True,
        help=(
            "Grupo de informações do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}"
        )
    )
    
    eso11_infoTSVInicio = fields.Many2one(
        comodel_name="eso.11.infotsvinicio",
        string="TSVE - Início",
        xsd_required=True,
        help=(
            "TSVE - Início\nDESCRICAO_COMPLETA:Trabalhador Sem Vínculo de "
            "Emprego/Estatutário - TSVE - Início.\nCHAVE_GRUPO: {matricula*}, "
            "{codCateg*}, {dtInicio*}"
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id"
    )
    

class Trabalhador(models.AbstractModel):
    """Grupo de informações do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.Trabalhador"


    
    eso11_cpfTrab = fields.Char(
        string="cpfTrab",
        xsd_required=True,
        xsd_type="TS_cpfTrab"
    )
    
    eso11_nmTrab = fields.Char(
        string="nmTrab",
        xsd_required=True,
        xsd_type="TS_nmTrab"
    )
    
    eso11_sexo = fields.Selection(TS_SEXO,
        string="sexo",
        xsd_required=True,
        xsd_type="TS_sexoTrab"
    )
    
    eso11_racaCor = fields.Selection(TS_RACACOR,
        string="racaCor",
        xsd_required=True,
        xsd_type="TS_racaCorTrab"
    )
    
    eso11_estCiv = fields.Selection(TS_ESTCIVIL,
        string="estCiv",
        xsd_type="TS_estCivilTrab"
    )
    
    eso11_grauInstr = fields.Selection(TS_GRAUINSTR,
        string="grauInstr",
        xsd_required=True,
        xsd_type="TS_grauInstr"
    )
    
    eso11_nmSoc = fields.Char(
        string="nmSoc",
        xsd_type="TS_nmSoc"
    )
    
    eso11_nascimento = fields.Many2one(
        comodel_name="eso.11.tnascimento",
        string="nascimento",
        xsd_required=True,
        xsd_type="T_nascimento"
    )
    
    eso11_endereco = fields.Many2one(
        comodel_name="eso.11.endereco",
        string="Endereço do trabalhador",
        xsd_required=True,
        help=(
            "Endereço do trabalhador\nDESCRICAO_COMPLETA:Grupo de informações "
            "do endereço do trabalhador."
        )
    )
    
    eso11_trabImig = fields.Many2one(
        comodel_name="eso.11.trabimig",
        string="Informações do trabalhador imigrante",
        help=(
            "Informações do trabalhador imigrante.\nCONDICAO_GRUPO: OC (se "
            "{paisNac}(2300_trabalhador_nascimento_paisNac) for diferente de "
            "[105]); N (nos demais casos)"
        )
    )
    
    eso11_infoDeficiencia = fields.Many2one(
        comodel_name="eso.11.infodeficiencia",
        string="Pessoa com deficiência",
        help="Pessoa com deficiência.\nCONDICAO_GRUPO: OC"
    )
    
    eso11_dependente = fields.One2many("eso.11.dependente", "eso11_dependente_trabalhador_id",
        string="Informações dos dependentes",
        help=(
            "Informações dos dependentes.\nCHAVE_GRUPO: {tpDep}, {nmDep}, "
            "{dtNascto}\nCONDICAO_GRUPO: OC"
        )
    )
    
    eso11_contato = fields.Many2one(
        comodel_name="eso.11.tcontato",
        string="Informações de contato",
        xsd_type="T_contato",
        help="Informações de contato.\nCONDICAO_GRUPO: OC"
    )
    

class Endereco(models.AbstractModel):
    """Endereço do trabalhador
    DESCRICAO_COMPLETA:Grupo de informações do endereço do trabalhador."""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.endereco"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.Trabalhador.Endereco"


    
    eso11_brasil = fields.Many2one(
        comodel_name="eso.11.tenderecobrasil",
        string="brasil",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_brasil"
    )
    
    eso11_exterior = fields.Many2one(
        comodel_name="eso.11.tenderecoexterior",
        string="exterior",
        choice="endereco",
        xsd_choice_required=True,
        xsd_type="T_endereco_exterior"
    )
    

class TrabImig(models.AbstractModel):
    """Informações do trabalhador imigrante.
    CONDICAO_GRUPO: OC (se {paisNac}(2300_trabalhador_nascimento_paisNac) for
    diferente de [105]); N (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabimig"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.Trabalhador.TrabImig"


    
    eso11_tmpResid = fields.Selection(TS_TMPRESID,
        string="Tempo de residência",
        xsd_type="TS_tmpResid",
        help=(
            "Tempo de residência do trabalhador imigrante.\nValidação: "
            "Preenchimento obrigatório se "
            "{dtInicio}(2300_infoTSVInicio_dtInicio) &gt;= [2021-07-19]."
        )
    )
    
    eso11_condIng = fields.Selection(TS_CONDING,
        string="condIng",
        xsd_required=True,
        xsd_type="TS_condIng"
    )
    

class InfoDeficiencia(models.AbstractModel):
    """Pessoa com deficiência.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodeficiencia"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.Trabalhador.InfoDeficiencia"


    
    eso11_defFisica = fields.Selection(TS_SIM_NAO,
        string="defFisica",
        xsd_required=True,
        xsd_type="TS_defFisica"
    )
    
    eso11_defVisual = fields.Selection(TS_SIM_NAO,
        string="defVisual",
        xsd_required=True,
        xsd_type="TS_defVisual"
    )
    
    eso11_defAuditiva = fields.Selection(TS_SIM_NAO,
        string="defAuditiva",
        xsd_required=True,
        xsd_type="TS_defAuditiva"
    )
    
    eso11_defMental = fields.Selection(TS_SIM_NAO,
        string="defMental",
        xsd_required=True,
        xsd_type="TS_defMental"
    )
    
    eso11_defIntelectual = fields.Selection(TS_SIM_NAO,
        string="defIntelectual",
        xsd_required=True,
        xsd_type="TS_defIntelectual"
    )
    
    eso11_reabReadap = fields.Selection(TS_SIM_NAO,
        string="reabReadap",
        xsd_required=True,
        xsd_type="TS_reabReadap"
    )
    
    eso11_observacao = fields.Char(
        string="observacao",
        xsd_type="TS_observacao"
    )
    

class Dependente(models.AbstractModel):
    """Informações dos dependentes.
    CHAVE_GRUPO: {tpDep}, {nmDep}, {dtNascto}
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dependente"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.Trabalhador.Dependente"


    
    eso11_tpDep = fields.Char(
        string="tpDep",
        xsd_required=True,
        xsd_type="TS_tpDep"
    )
    
    eso11_nmDep = fields.Char(
        string="nmDep",
        xsd_required=True,
        xsd_type="TS_nmDep"
    )
    
    eso11_dtNascto = fields.Date(
        string="dtNascto",
        xsd_required=True,
        xsd_type="TS_dtNascto"
    )
    
    eso11_cpfDep = fields.Char(
        string="cpfDep",
        xsd_type="TS_cpfDep"
    )
    
    eso11_depIRRF = fields.Selection(TS_SIM_NAO,
        string="depIRRF",
        xsd_required=True,
        xsd_type="TS_depIRRF"
    )
    
    eso11_depSF = fields.Selection(TS_SIM_NAO,
        string="depSF",
        xsd_required=True,
        xsd_type="TS_depSF"
    )
    
    eso11_incTrab = fields.Selection(TS_SIM_NAO,
        string="incTrab",
        xsd_required=True,
        xsd_type="TS_incTrab"
    )
    

class InfoTsvinicio(models.AbstractModel):
    """TSVE - Início
    DESCRICAO_COMPLETA:Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE -
    Início.
    CHAVE_GRUPO: {matricula*}, {codCateg*}, {dtInicio*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotsvinicio"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio"


    
    eso11_cadIni = fields.Selection(INFOTSVINICIO_CADINI,
        string="cadIni",
        xsd_required=True
    )
    
    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa.\nValidação: "
            "Preenchimento obrigatório se {indRetif}(2300_ideEvento_indRetif) "
            "= [1]. No caso de retificação "
            "({indRetif}(2300_ideEvento_indRetif) = [2]), a matrícula deve ser"
            " preenchida caso tenha sido informada no evento original.\nO "
            "valor informado não pode conter a expressão 'eSocial' nas 7 "
            "(sete) primeiras posições.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        )
    )
    
    eso11_codCateg = fields.Char(
        string="codCateg",
        xsd_required=True,
        xsd_type="TS_codCateg"
    )
    
    eso11_dtInicio = fields.Date(
        string="Data de início, que pode",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início, que pode ser:\na) Para o cooperado, a data de "
            "ingresso na cooperativa;\nb) Para o diretor não empregado, a data"
            " de posse no cargo;\nc) Para o dirigente sindical, a data de "
            "início do mandato no sindicato;\nd) Para o estagiário, a data de "
            "início do estágio;\ne) Para o trabalhador avulso, a data de "
            "ingresso no Órgão Gestor de Mão de Obra - OGMO ou no "
            "sindicato;\nf) Para o servidor público exercente de cargo "
            "eletivo, a data de início do mandato;\ng) Para os demais "
            "trabalhadores, a data de início das atividades.\nValidação: Devem"
            " ser observadas as seguintes regras:\na) Deve ser posterior à "
            "data de nascimento do trabalhador e não pode ser posterior a 30 "
            "(trinta) dias da data atual;\nb) Se {cadIni}(./cadIni) = [S], "
            "deve ser anterior à data de início da obrigatoriedade dos eventos"
            " não periódicos para o empregador no eSocial;\nc) Se "
            "{cadIni}(./cadIni) = [N], deve ser igual ou posterior à data de "
            "início da obrigatoriedade dos eventos não periódicos para o "
            "empregador no eSocial."
        )
    )
    
    eso11_nrProcTrab = fields.Char(
        string="Número que identifica",
        xsd_type="TS_nrProcJud",
        help=(
            "Número que identifica o processo trabalhista, quando o início de "
            "TSVE se der por decisão judicial.\nValidação: Se preenchido, deve"
            " ser um processo judicial válido, com 20 (vinte) algarismos."
        )
    )
    
    eso11_natAtividade = fields.Selection(TS_NATATIVIDADE,
        string="Natureza da atividade",
        xsd_type="TS_natAtividade",
        help=(
            "Natureza da atividade.\nValidação: Preenchimento obrigatório se "
            "{codCateg}(./codCateg) = [201, 202, 401, 731, 734, 738]. Não deve"
            " ser preenchido se {codCateg}(./codCateg) = [721, 722, 771, 901]."
        )
    )
    
    eso11_infoComplementares = fields.Many2one(
        comodel_name="eso.11.infocomplementares",
        string="Informações complementares",
        help=(
            "Informações complementares\nDESCRICAO_COMPLETA:Grupo onde são "
            "fornecidas informações complementares, preenchidas conforme a "
            "categoria do TSVE.\nCONDICAO_GRUPO: O (de acordo com a condição "
            "dos grupos inferiores); OC (nos demais casos)"
        )
    )
    
    eso11_mudancaCPF = fields.Many2one(
        comodel_name="eso.11.mudancacpf",
        string="Informações de mudança de CPF",
        help=(
            "Informações de mudança de CPF do trabalhador.\nCONDICAO_GRUPO: N "
            "(se {cadIni}(2300_infoTSVInicio_cadIni) = [S]); OC (nos demais "
            "casos)"
        )
    )
    
    eso11_afastamento = fields.Many2one(
        comodel_name="eso.11.afastamento",
        string="Informações de afastamento do TSVE",
        help=(
            "Informações de afastamento do "
            "TSVE\nDESCRICAO_COMPLETA:Informações de afastamento do "
            "TSVE.\nPreenchimento exclusivo em caso de trabalhador que "
            "permaneça afastado na data de início da obrigatoriedade dos "
            "eventos não periódicos para o empregador no eSocial ou na data de"
            " alteração do CPF.\nCONDICAO_GRUPO: N (se grupo "
            "{termino}(2300_infoTSVInicio_termino) estiver preenchido); OC "
            "(nos demais casos)"
        )
    )
    
    eso11_termino = fields.Many2one(
        comodel_name="eso.11.termino",
        string="Informação do término do TSVE",
        help=(
            "Informação do término do TSVE\nDESCRICAO_COMPLETA:Informação do "
            "término do TSVE.\nGrupo preenchido exclusivamente caso seja "
            "necessário enviar cadastramento inicial referente a trabalhador "
            "com data de término anterior ao início dos eventos não periódicos"
            " para o empregador no eSocial (por exemplo, envio para pagamento "
            "de retiradas em meses posteriores à data de término e sob "
            "vigência dos eventos periódicos para o empregador no "
            "eSocial).\nCONDICAO_GRUPO: N (se "
            "{cadIni}(2300_infoTSVInicio_cadIni) = [N] ou grupo "
            "{afastamento}(2300_infoTSVInicio_afastamento) estiver "
            "preenchido); OC (nos demais casos)"
        )
    )
    

class InfoComplementares(models.AbstractModel):
    """Informações complementares
    DESCRICAO_COMPLETA:Grupo onde são fornecidas informações complementares,
    preenchidas conforme a categoria do TSVE.
    CONDICAO_GRUPO: O (de acordo com a condição dos grupos inferiores); OC (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplementares"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.InfoComplementares"


    
    eso11_cargoFuncao = fields.Many2one(
        comodel_name="eso.11.cargofuncao",
        string="Cargo/Função ocupado pelo TSVE",
        help=(
            "Cargo/Função ocupado pelo TSVE\nDESCRICAO_COMPLETA:Grupo que "
            "apresenta o cargo e/ou função ocupada pelo TSVE.\nCONDICAO_GRUPO:"
            " OC (se {codCateg}(2300_infoTSVInicio_codCateg) = [901, 903, 904,"
            " 906]); O (nos demais casos)"
        )
    )
    
    eso11_remuneracao = fields.Many2one(
        comodel_name="eso.11.tremuneracao",
        string="Informações da remuneração",
        xsd_type="T_remuneracao",
        help=(
            "Informações da remuneração e periodicidade de "
            "pagamento.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2300_infoTSVInicio_codCateg) = [721, 722, 771, 906]); "
            "OC (nos demais casos)"
        )
    )
    
    eso11_FGTS = fields.Many2one(
        comodel_name="eso.11.fgts",
        string="Informações do FGTS",
        help=(
            "Informações do FGTS\nDESCRICAO_COMPLETA:Informações do Fundo de "
            "Garantia do Tempo de Serviço - FGTS.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2300_infoTSVInicio_codCateg) = [721]); N (nos demais "
            "casos)"
        )
    )
    
    eso11_infoDirigenteSindical = fields.Many2one(
        comodel_name="eso.11.infodirigentesindical",
        string="Informações relativas",
        help=(
            "Informações relativas ao dirigente sindical.\nCONDICAO_GRUPO: O "
            "(se {codCateg}(2300_infoTSVInicio_codCateg) = [401]); N (nos "
            "demais casos)"
        )
    )
    
    eso11_infoTrabCedido = fields.Many2one(
        comodel_name="eso.11.infotrabcedido",
        string="Informações relativas (infoTrabCedido)",
        help=(
            "Informações relativas ao trabalhador cedido ou servidor público "
            "indicado para conselho\nDESCRICAO_COMPLETA:Informações relativas "
            "ao trabalhador cedido/em exercício em outro órgão ou servidor "
            "público indicado para conselho, preenchidas exclusivamente pelo "
            "cessionário/órgão de destino.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2300_infoTSVInicio_codCateg) = [305, 410]); N (nos "
            "demais casos)"
        )
    )
    
    eso11_infoMandElet = fields.Many2one(
        comodel_name="eso.11.infomandelet",
        string="Informações relativas (infoMandElet)",
        help=(
            "Informações relativas a servidor público exercente de mandato "
            "eletivo.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2300_infoTSVInicio_codCateg) = [304]); N (nos demais "
            "casos)"
        )
    )
    
    eso11_infoEstagiario = fields.Many2one(
        comodel_name="eso.11.tinfoestagiario",
        string="Informações relativas ao estagiário",
        xsd_type="T_infoEstagiario",
        help=(
            "Informações relativas ao estagiário ou ao beneficiário do "
            "Programa Nacional de Prestação de Serviço Civil "
            "Voluntário.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2300_infoTSVInicio_codCateg) = [901, 906]); N (nos "
            "demais casos)"
        )
    )
    

class CargoFuncao(models.AbstractModel):
    """Cargo/Função ocupado pelo TSVE
    DESCRICAO_COMPLETA:Grupo que apresenta o cargo e/ou função ocupada pelo TSVE.
    CONDICAO_GRUPO: OC (se {codCateg}(2300_infoTSVInicio_codCateg) = [901, 903,
    904, 906]); O (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.cargofuncao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.InfoComplementares.CargoFuncao"


    
    eso11_nmCargo = fields.Char(
        string="nome do cargo",
        xsd_type="TS_texto_100",
        help=(
            "nome do cargo.\nValidação: Preenchimento obrigatório se "
            "{codCateg}(2300_infoTSVInicio_codCateg) for diferente de [410]."
        )
    )
    
    eso11_CBOCargo = fields.Char(
        string="CBOCargo",
        xsd_type="TS_CBOCargo"
    )
    
    eso11_nmFuncao = fields.Char(
        string="nome da função de confiança",
        xsd_type="TS_texto_100",
        help=(
            "nome da função de confiança.\nValidação: Preenchimento "
            "obrigatório se {codCateg}(2300_infoTSVInicio_codCateg) = [410] e "
            "não houver informação de {nmCargo}(./nmCargo)."
        )
    )
    
    eso11_CBOFuncao = fields.Char(
        string="CBOFuncao",
        xsd_type="TS_CBOFuncao"
    )
    

class Fgts(models.AbstractModel):
    """Informações do FGTS
    DESCRICAO_COMPLETA:Informações do Fundo de Garantia do Tempo de Serviço - FGTS.
    CONDICAO_GRUPO: O (se {codCateg}(2300_infoTSVInicio_codCateg) = [721]); N (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.fgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.InfoComplementares.Fgts"


    
    eso11_dtOpcFGTS = fields.Date(
        string="dtOpcFGTS",
        xsd_required=True,
        xsd_type="TS_dtOpcFGTS"
    )
    

class InfoDirigenteSindical(models.AbstractModel):
    """Informações relativas ao dirigente sindical.
    CONDICAO_GRUPO: O (se {codCateg}(2300_infoTSVInicio_codCateg) = [401]); N (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infodirigentesindical"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.InfoComplementares.InfoDirigenteSindical"


    
    eso11_categOrig = fields.Char(
        string="o código correspondente à categoria",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código correspondente à categoria de origem do dirigente "
            "sindical.\nValidação: Deve ser um código válido e existente na "
            "Tabela 01, diferente de [401]."
        )
    )
    
    eso11_tpInsc = fields.Selection(TS_TPINSC_1_2,
        string="o código correspondente ao tipo",
        xsd_type="TS_tpInsc_1_2",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nValidação: O preenchimento é obrigatório e exclusivo se "
            "{infoDirigenteSindical/categOrig}(./categOrig) corresponder a "
            "'Empregado', 'Agente Público', 'Avulso' ou for igual a [721]."
        )
    )
    
    eso11_nrInsc = fields.Char(
        string="número de inscrição do empregador",
        xsd_type="TS_nrInsc_11_14",
        help=(
            "número de inscrição do empregador de origem do dirigente "
            "sindical, de acordo com o tipo de inscrição indicado no campo "
            "{infoDirigenteSindical/tpInsc}(./tpInsc).\nValidação: "
            "Preenchimento obrigatório e exclusivo se "
            "{infoDirigenteSindical/tpInsc}(./tpInsc) for informado. Se "
            "preenchido, deve ser um número de inscrição válido e diferente da"
            " inscrição do declarante, considerando as particularidades "
            "aplicadas à informação de CNPJ de órgão público em S-1000.\nSe "
            "{infoDirigenteSindical/tpInsc}(./tpInsc) = [1], deve possuir 14 "
            "(catorze) algarismos e ser diferente do CNPJ base do empregador e"
            " dos estabelecimentos informados através do evento S-1005.\nSe "
            "{infoDirigenteSindical/tpInsc}(./tpInsc) = [2], deve possuir 11 "
            "(onze) algarismos."
        )
    )
    
    eso11_dtAdmOrig = fields.Date(
        string="a data de admissão",
        xsd_type="xs:date",
        help=(
            "a data de admissão (ou de início) do dirigente sindical na "
            "empresa de origem.\nValidação: O preenchimento é obrigatório se "
            "{infoDirigenteSindical/categOrig}(./categOrig) corresponder a "
            "'Empregado', 'Agente Público', 'Avulso' ou for igual a [721]."
        )
    )
    
    eso11_matricOrig = fields.Char(
        string="a matrícula do trabalhador na empresa",
        xsd_type="TS_codigo_esocial",
        help=(
            "a matrícula do trabalhador na empresa de origem.\nValidação: "
            "Preenchimento obrigatório se "
            "{infoDirigenteSindical/categOrig}(./categOrig) corresponder a "
            "'Empregado' ou 'Agente Público'."
        )
    )
    
    eso11_tpRegTrab = fields.Selection(TS_TPREGTRAB,
        string="Tipo de regime trabalhista",
        xsd_type="TS_tpRegTrab",
        help=(
            "Tipo de regime trabalhista.\nValidação: O preenchimento é "
            "obrigatório e exclusivo se "
            "{infoDirigenteSindical/categOrig}(./categOrig) corresponder a "
            "'Empregado' ou 'Agente Público'."
        )
    )
    
    eso11_tpRegPrev = fields.Selection(TS_TPREGPREV,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev",
        help=(
            "Tipo de regime previdenciário (ou Sistema de Proteção Social dos "
            "Militares).\nValidação: Se "
            "{infoDirigenteSindical/categOrig}(./categOrig) for relativa a "
            "'Empregado', não pode ser preenchido com [2]."
        )
    )
    

class InfoTrabCedido(models.AbstractModel):
    """Informações relativas ao trabalhador cedido ou servidor público indicado
    para conselho
    DESCRICAO_COMPLETA:Informações relativas ao trabalhador cedido/em exercício em
    outro órgão ou servidor público indicado para conselho, preenchidas
    exclusivamente pelo cessionário/órgão de destino.
    CONDICAO_GRUPO: O (se {codCateg}(2300_infoTSVInicio_codCateg) = [305, 410]); N
    (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotrabcedido"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.InfoComplementares.InfoTrabCedido"


    
    eso11_categOrig = fields.Char(
        string="o código correspondente à categoria",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código correspondente à categoria de origem do trabalhador "
            "cedido ou do servidor público indicado para conselho.\nValidação:"
            " Deve ser um código válido e existente na Tabela 01, diferente de"
            " [305, 410]."
        )
    )
    
    eso11_cnpjCednt = fields.Char(
        string="CNPJ",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do empregador/órgão público cedente/de origem.\nValidação: "
            "Deve ser um CNPJ diferente do CNPJ do empregador/órgão público e "
            "diferente dos estabelecimentos informados através do evento "
            "S-1005.\nREGRA:REGRA_VALIDA_CNPJ"
        )
    )
    
    eso11_matricCed = fields.Char(
        string="a matrícula do trabalhador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "a matrícula do trabalhador no empregador/órgão público cedente/de"
            " origem."
        )
    )
    
    eso11_dtAdmCed = fields.Date(
        string="dtAdmCed",
        xsd_required=True
    )
    
    eso11_tpRegTrab = fields.Selection(TS_TPREGTRAB,
        string="Tipo de regime trabalhista",
        xsd_required=True,
        xsd_type="TS_tpRegTrab"
    )
    
    eso11_tpRegPrev = fields.Selection(TS_TPREGPREV,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev",
        help=(
            "Tipo de regime previdenciário (ou Sistema de Proteção Social dos "
            "Militares).\nValidação: Se "
            "{infoTrabCedido/categOrig}(./categOrig) for relativa a "
            "'Empregado', não pode ser preenchido com [2]. Se "
            "{codCateg}(2300_infoTSVInicio_codCateg) = [305], deve ser "
            "preenchido com [2]."
        )
    )
    

class InfoMandElet(models.AbstractModel):
    """Informações relativas a servidor público exercente de mandato eletivo.
    CONDICAO_GRUPO: O (se {codCateg}(2300_infoTSVInicio_codCateg) = [304]); N (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infomandelet"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.InfoComplementares.InfoMandElet"


    
    eso11_categOrig = fields.Char(
        string="o código correspondente à categoria",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código correspondente à categoria de origem do "
            "servidor.\nValidação: Deve ser um código válido e existente na "
            "Tabela 01, diferente de [304]."
        )
    )
    
    eso11_cnpjOrig = fields.Char(
        string="CNPJ do órgão público de origem",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help="CNPJ do órgão público de origem.\nREGRA:REGRA_VALIDA_CNPJ"
    )
    
    eso11_matricOrig = fields.Char(
        string="a matrícula do servidor no órgão público",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help="a matrícula do servidor no órgão público de origem."
    )
    
    eso11_dtExercOrig = fields.Date(
        string="dtExercOrig",
        xsd_required=True
    )
    
    eso11_indRemunCargo = fields.Selection(TS_SIM_NAO,
        string="indRemunCargo",
        xsd_type="TS_indRemunCargo"
    )
    
    eso11_tpRegTrab = fields.Selection(TS_TPREGTRAB,
        string="Tipo de regime trabalhista",
        xsd_required=True,
        xsd_type="TS_tpRegTrab"
    )
    
    eso11_tpRegPrev = fields.Selection(TS_TPREGPREV,
        string="Tipo de regime previdenciário",
        xsd_required=True,
        xsd_type="TS_tpRegPrev",
        help=(
            "Tipo de regime previdenciário (ou Sistema de Proteção Social dos "
            "Militares)."
        )
    )
    

class MudancaCpf(models.AbstractModel):
    """Informações de mudança de CPF do trabalhador.
    CONDICAO_GRUPO: N (se {cadIni}(2300_infoTSVInicio_cadIni) = [S]); OC (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.mudancacpf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.MudancaCpf"


    
    eso11_cpfAnt = fields.Char(
        string="o número do CPF antigo do trabalhador",
        xsd_required=True,
        xsd_type="TS_cpf"
    )
    
    eso11_matricAnt = fields.Char(
        string="a matrícula anterior do trabalhador",
        xsd_type="TS_codigo_esocial"
    )
    
    eso11_dtAltCPF = fields.Date(
        string="Data de alteração do CPF",
        xsd_required=True,
        xsd_type="xs:date"
    )
    
    eso11_observacao = fields.Char(
        string="observacao",
        xsd_type="TS_observacao"
    )
    

class Afastamento(models.AbstractModel):
    """Informações de afastamento do TSVE
    DESCRICAO_COMPLETA:Informações de afastamento do TSVE.
    Preenchimento exclusivo em caso de trabalhador que permaneça afastado na data
    de início da obrigatoriedade dos eventos não periódicos para o empregador
    no eSocial ou na data de alteração do CPF.
    CONDICAO_GRUPO: N (se grupo {termino}(2300_infoTSVInicio_termino) estiver
    preenchido); OC (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.afastamento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.Afastamento"


    
    eso11_dtIniAfast = fields.Date(
        string="Data de início do afastamento",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início do afastamento.\nValidação: Devem ser observadas "
            "as seguintes regras:\na) Deve ser igual ou posterior à data de "
            "início do TSVE;\nb) Se {cadIni}(2300_infoTSVInicio_cadIni) = [S],"
            " deve ser anterior à data de início da obrigatoriedade dos "
            "eventos não periódicos para o empregador;\nc) Se "
            "{cadIni}(2300_infoTSVInicio_cadIni) = [N], deve ser anterior à "
            "data de alteração do CPF do trabalhador "
            "({dtAltCPF}(2300_infoTSVInicio_mudancaCPF_dtAltCPF))."
        )
    )
    
    eso11_codMotAfast = fields.Char(
        string="o código do motivo",
        xsd_required=True,
        xsd_type="TS_codMotAfast",
        help=(
            "o código do motivo de afastamento temporário.\nValidação: Deve "
            "ser um código válido e existente na Tabela 18, bem como "
            "compatível com o código de categoria do trabalhador, conforme "
            "Tabela 18."
        )
    )
    

class Termino(models.AbstractModel):
    """Informação do término do TSVE
    DESCRICAO_COMPLETA:Informação do término do TSVE.
    Grupo preenchido exclusivamente caso seja necessário enviar cadastramento
    inicial referente a trabalhador com data de término anterior ao início dos
    eventos não periódicos para o empregador no eSocial (por exemplo, envio
    para pagamento de retiradas em meses posteriores à data de término e sob
    vigência dos eventos periódicos para o empregador no eSocial).
    CONDICAO_GRUPO: N (se {cadIni}(2300_infoTSVInicio_cadIni) = [N] ou grupo
    {afastamento}(2300_infoTSVInicio_afastamento) estiver preenchido); OC (nos
    demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.termino"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvinicio.InfoTsvinicio.Termino"


    
    eso11_dtTerm = fields.Date(
        string="a data do término",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data do término.\nValidação: Devem ser observadas as seguintes "
            "regras:\na) Deve ser igual ou posterior à data de início do "
            "TSVE;\nb) Deve ser anterior à data de início da obrigatoriedade "
            "dos eventos não periódicos para o empregador."
        )
    )