# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDINCID,
    TSSIMNAO,
    TSTPACCONVFGTS,
    TSTPINSC1234,
    TSTPINSC124,
    TSTPREGTRAB,
    TSTPVALORE,
    TIdeEmpregador,
    TIdeEventoRetornoTrab,
    TSucessaoVinc,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtBasesFGTS/v_S_01_01_00"

"Tipo de valor que influi na apuração do FGTS."
BASEPERAPUR_TPVALOR = [
    ("11", "FGTS mensal"),
    ("12", "FGTS 13° salário"),
    ("13", "FGTS (período anterior) mensal"),
    ("14", "FGTS (período anterior) 13º salário"),
    ("15", "FGTS mensal - Aprendiz/Contrato Verde e Amarelo"),
    ("16", "FGTS 13° salário - Aprendiz/Contrato Verde e Amarelo"),
    ("17", "FGTS (período anterior) mensal - Aprendiz/Contrato Verde e Amarelo"),
    ("18", "FGTS (período anterior) 13º salário - Aprendiz/Contrato Verde e Amarelo"),
    ("21", "FGTS mês da rescisão"),
    ("22", "FGTS 13° salário rescisório"),
    ("23", "FGTS aviso prévio indenizado"),
    ("24", "FGTS (período anterior) mês da rescisão"),
    ("25", "FGTS (período anterior) 13º salário rescisório"),
    ("26", "FGTS (período anterior) aviso prévio indenizado"),
    ("27", "FGTS mês da rescisão - Aprendiz/Contrato Verde e Amarelo"),
    ("28", "FGTS 13° salário rescisório - Aprendiz/Contrato Verde e Amarelo"),
    ("29", "FGTS aviso prévio indenizado - Aprendiz/Contrato Verde e Amarelo"),
    (
        "30",
        "FGTS (período anterior) mês da rescisão - Aprendiz/Contrato Verde e Amarelo",
    ),
    (
        "31",
        "FGTS (período anterior) 13° salário rescisório - Aprendiz/Contrato Verde e Amarelo",
    ),
    (
        "32",
        "FGTS (período anterior) aviso prévio indenizado - Aprendiz/Contrato Verde e Amarelo",
    ),
    ("41", "FGTS mensal - Indenização compensatória do empregado doméstico"),
    ("42", "FGTS 13° salário - Indenização compensatória do empregado doméstico"),
    (
        "43",
        "FGTS (período anterior) mensal - Indenização compensatória do empregado doméstico",
    ),
    (
        "44",
        "FGTS (período anterior) 13º salário - Indenização compensatória do empregado doméstico",
    ),
    ("45", "FGTS mês da rescisão - Indenização compensatória do empregado doméstico"),
    (
        "46",
        "FGTS 13° salário rescisório - Indenização compensatória do empregado doméstico",
    ),
    (
        "47",
        "FGTS aviso prévio indenizado - Indenização compensatória do empregado doméstico",
    ),
    (
        "48",
        "FGTS (período anterior) mês da rescisão - Indenização compensatória do empregado doméstico",
    ),
    (
        "49",
        "FGTS (período anterior) 13º salário rescisório - Indenização compensatória do empregado doméstico",
    ),
    (
        "50",
        "FGTS (período anterior) aviso prévio indenizado - Indenização compensatória do empregado doméstico",
    ),
]


class TDetRubrSusp(models.AbstractModel):
    _description = "T_detRubrSusp"
    _name = "eso.11.tdetrubrsusp"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDetRubrSusp"

    eso11_detRubrSusp_basePerApur_id = fields.Many2one(
        comodel_name="eso.11.baseperapur", xsd_implicit=True, ondelete="cascade"
    )
    eso11_detRubrSusp_basePerAntE_id = fields.Many2one(
        comodel_name="eso.11.baseperante", xsd_implicit=True, ondelete="cascade"
    )
    eso11_codRubr = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador que identifica a rubrica em sua "
            "folha de pagamento.\nEvento de origem: S-1200, S-2299 ou S-2399."
        ),
    )

    eso11_ideTabRubr = fields.Char(
        string="o identificador da Tabela",
        xsd_required=True,
        xsd_type="TS_ideTabRubr",
        help=(
            "o identificador da Tabela de Rubricas para a rubrica definida em "
            "{codRubr}(./codRubr).\nEvento de origem: S-1200, S-2299 ou "
            "S-2399."
        ),
    )

    eso11_vrRubr = fields.Float(
        string="Valor total da rubrica",
        xsd_required=True,
        xsd_type="TS_vrRubr",
        help=(
            "Valor total da rubrica.\nEvento de origem: S-1200, S-2299 ou "
            "S-2399.\nValidação: Deve corresponder ao somatório dos valores "
            "informados no campo {vrRubr} dos eventos de origem para a "
            "respectiva rubrica."
        ),
    )

    eso11_ideProcessoFGTS = fields.One2many(
        "eso.11.ideprocessofgts",
        "eso11_ideProcessoFGTS_T_detRubrSusp_id",
        string="Identificação de processo",
        help=(
            "Identificação de processo - Incidência de "
            "FGTS\nDESCRICAO_COMPLETA:Processo(s) judicial(is) com "
            "decisão/sentença favorável, determinando a não incidência de "
            "FGTS.\nEvento de origem: S-1010.\nCHAVE_GRUPO: {nrProc}"
        ),
    )


class IdeProcessoFgts(models.AbstractModel):
    """Identificação de processo - Incidência de FGTS
    DESCRICAO_COMPLETA:Processo(s) judicial(is) com decisão/sentença favorável,
    determinando a não incidência de FGTS.
    Evento de origem: S-1010.
    CHAVE_GRUPO: {nrProc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideprocessofgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "TDetRubrSusp.IdeProcessoFgts"

    eso11_nrProc = fields.Char(
        string="número do processo", xsd_required=True, xsd_type="TS_nrProcJud"
    )


class ESocial(models.AbstractModel):
    "S-5003 - Informações do FGTS por Trabalhador"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtBasesFGTS = fields.Many2one(
        comodel_name="eso.11.evtbasesfgts",
        string="Evento Informações do FGTS",
        xsd_required=True,
        help=("Evento Informações do FGTS por Trabalhador.\nCHAVE_GRUPO: {Id}"),
    )


class EvtBasesFgts(models.AbstractModel):
    """Evento Informações do FGTS por Trabalhador.
    CHAVE_GRUPO: {Id}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtbasesfgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventoretornotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_retorno_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideTrabalhador = fields.Many2one(
        comodel_name="eso.11.idetrabalhador",
        string="Identificação do trabalhador",
        xsd_required=True,
        help=(
            "Identificação do trabalhador\nDESCRICAO_COMPLETA:Grupo que "
            "apresenta a identificação básica do trabalhador ao qual se refere"
            " o evento de retorno.\nCHAVE_GRUPO: {cpfTrab*}"
        ),
    )

    eso11_infoFGTS = fields.Many2one(
        comodel_name="eso.11.infofgts",
        string="Informações relativas ao FGTS",
        xsd_required=True,
        help=(
            "Informações relativas ao FGTS\nDESCRICAO_COMPLETA:Informações "
            "relativas ao Fundo de Garantia do Tempo de Serviço - FGTS."
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id_retorno")


class IdeTrabalhador(models.AbstractModel):
    """Identificação do trabalhador
    DESCRICAO_COMPLETA:Grupo que apresenta a identificação básica do trabalhador ao
    qual se refere o evento de retorno.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.IdeTrabalhador"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfRetorno"
    )


class InfoFgts(models.AbstractModel):
    """Informações relativas ao FGTS
    DESCRICAO_COMPLETA:Informações relativas ao Fundo de Garantia do Tempo de
    Serviço - FGTS."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infofgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts"

    eso11_dtVenc = fields.Date(
        string="Data de vencimento do FGTS mensal",
        xsd_type="xs:date",
        help=(
            "Data de vencimento do FGTS mensal.\nValidação: Preencher somente "
            "se houver informação no grupo {infoBaseFGTS}(./ideEstab_ideLotaca"
            "o_infoTrabFGTS_infoBaseFGTS).\nSe informada, deve corresponder ao"
            " dia 7 (sete) do mês subsequente ao indicado em "
            "{perApur}(5003_ideEvento_perApur), se esse dia for útil. Caso não"
            " seja, deve corresponder ao dia útil imediatamente "
            "anterior.\nConsidera-se como dia não útil o sábado, o domingo e "
            "todo aquele constante do Calendário Nacional de feriados "
            "bancários divulgados pelo Banco Central do Brasil."
        ),
    )

    eso11_classTrib = fields.Char(string="classTrib")

    eso11_ideEstab = fields.One2many(
        "eso.11.ideestab",
        "eso11_ideEstab_infoFGTS_id",
        string="Identificação do estabelecimento",
        help=(
            "Identificação do "
            "estabelecimento\nDESCRICAO_COMPLETA:Identificação do "
            "estabelecimento ou obra de construção civil.\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}"
        ),
    )


class IdeEstab(models.AbstractModel):
    """Identificação do estabelecimento
    DESCRICAO_COMPLETA:Identificação do estabelecimento ou obra de construção
    civil.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts.IdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_3_4,
        string="o código correspondente ao tipo",
        xsd_type="TS_tpInsc_1_2_3_4",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nOrigem: campo {ideEstabLot/tpInsc} de:\na) "
            "{infoPerApur}(1200_dmDev_infoPerApur) ou "
            "{idePeriodo}(1200_dmDev_infoPerAnt_ideADC_idePeriodo) do "
            "S-1200;\nb) "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur) ou {i"
            "dePeriodo}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_ide"
            "Periodo) do S-2299;\nc) "
            "{dmDev}(2399_infoTSVTermino_verbasResc_dmDev) do S-2399."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do contribuinte",
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "número de inscrição do contribuinte de acordo com o tipo de "
            "inscrição indicado no campo {ideEstab/tpInsc}(./tpInsc).\nOrigem:"
            " campo {ideEstabLot/nrInsc} de:\na) "
            "{infoPerApur}(1200_dmDev_infoPerApur) ou "
            "{idePeriodo}(1200_dmDev_infoPerAnt_ideADC_idePeriodo) do "
            "S-1200;\nb) "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur) ou {i"
            "dePeriodo}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_ide"
            "Periodo) do S-2299;\nc) "
            "{dmDev}(2399_infoTSVTermino_verbasResc_dmDev) do S-2399."
        ),
    )

    eso11_ideLotacao = fields.One2many(
        "eso.11.idelotacao",
        "eso11_ideLotacao_ideEstab_id",
        string="Identificação da lotação tributária",
        help=(
            "Identificação da lotação tributária.\nCHAVE_GRUPO: {codLotacao}, "
            "{tpLotacao}, {tpInsc}, {nrInsc}"
        ),
    )


class IdeLotacao(models.AbstractModel):
    """Identificação da lotação tributária.
    CHAVE_GRUPO: {codLotacao}, {tpLotacao}, {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idelotacao"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao"

    eso11_codLotacao = fields.Char(
        string="código atribuído pelo empregador",
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador para a lotação "
            "tributária.\nOrigem: campo {ideEstabLot/codLotacao} de:\na) "
            "{infoPerApur}(1200_dmDev_infoPerApur) ou "
            "{idePeriodo}(1200_dmDev_infoPerAnt_ideADC_idePeriodo) do "
            "S-1200;\nb) "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur) ou {i"
            "dePeriodo}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_ide"
            "Periodo) do S-2299;\nc) "
            "{dmDev}(2399_infoTSVTermino_verbasResc_dmDev) do S-2399."
        ),
    )

    eso11_tpLotacao = fields.Char(
        string="o código correspondente ao tipo",
        xsd_type="TS_tpLotacao",
        help=(
            "o código correspondente ao tipo de lotação, conforme Tabela "
            "10.\nEvento de origem: S-1020.\nValidação: a) Se origem de "
            "{codLotacao}(./codLotacao) for "
            "{infoPerApur}(1200_dmDev_infoPerApur) do S-1200, "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur) do "
            "S-2299 ou {dmDev}(2399_infoTSVTermino_verbasResc_dmDev) do "
            "S-2399, retornar o tipo de lotação vigente em "
            "{perApur}(5003_ideEvento_perApur);\nb) Se origem de "
            "{codLotacao}(./codLotacao) for "
            "{idePeriodo}(1200_dmDev_infoPerAnt_ideADC_idePeriodo) do S-1200, "
            "retornar o tipo de lotação vigente em "
            "{perRef}(1200_dmDev_infoPerAnt_ideADC_idePeriodo_perRef) desse "
            "evento;\nc) Se origem de {codLotacao}(./codLotacao) for {idePerio"
            "do}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_idePeriodo"
            ") do S-2299, retornar o tipo de lotação vigente em {perRef}(2299_"
            "infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_idePeriodo_perRef) "
            "desse evento."
        ),
    )

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1_2_4,
        string="o código correspondente ao tipo (tpInsc)",
        xsd_type="TS_tpInsc_1_2_4",
        help=(
            "o código correspondente ao tipo de inscrição, conforme Tabela "
            "05.\nEvento de origem: S-1020.\nValidação: a) Se origem de "
            "{codLotacao}(./codLotacao) for "
            "{infoPerApur}(1200_dmDev_infoPerApur) do S-1200, "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur) do "
            "S-2299 ou {dmDev}(2399_infoTSVTermino_verbasResc_dmDev) do "
            "S-2399, retornar o tipo de inscrição vigente em "
            "{perApur}(5003_ideEvento_perApur);\nb) Se origem de "
            "{codLotacao}(./codLotacao) for "
            "{idePeriodo}(1200_dmDev_infoPerAnt_ideADC_idePeriodo) do S-1200, "
            "retornar o tipo de inscrição vigente em "
            "{perRef}(1200_dmDev_infoPerAnt_ideADC_idePeriodo_perRef) desse "
            "evento;\nc) Se origem de {codLotacao}(./codLotacao) for {idePerio"
            "do}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_idePeriodo"
            ") do S-2299, retornar o tipo de inscrição vigente em {perRef}(229"
            "9_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_idePeriodo_perRef"
            ") desse evento."
        ),
    )

    eso11_nrInsc = fields.Char(
        string="o número de inscrição",
        xsd_type="TS_nrInsc_11_12_14",
        help=(
            "o número de inscrição (CNPJ, CPF, CNO) ao qual pertence a lotação"
            " tributária, conforme indicado na Tabela 10.\nEvento de origem: "
            "S-1020.\nValidação: a) Se origem de {codLotacao}(./codLotacao) "
            "for {infoPerApur}(1200_dmDev_infoPerApur) do S-1200, "
            "{infoPerApur}(2299_infoDeslig_verbasResc_dmDev_infoPerApur) do "
            "S-2299 ou {dmDev}(2399_infoTSVTermino_verbasResc_dmDev) do "
            "S-2399, retornar o número de inscrição vigente em "
            "{perApur}(5003_ideEvento_perApur);\nb) Se origem de "
            "{codLotacao}(./codLotacao) for "
            "{idePeriodo}(1200_dmDev_infoPerAnt_ideADC_idePeriodo) do S-1200, "
            "retornar o número de inscrição vigente em "
            "{perRef}(1200_dmDev_infoPerAnt_ideADC_idePeriodo_perRef) desse "
            "evento;\nc) Se origem de {codLotacao}(./codLotacao) for {idePerio"
            "do}(2299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_idePeriodo"
            ") do S-2299, retornar o número de inscrição vigente em {perRef}(2"
            "299_infoDeslig_verbasResc_dmDev_infoPerAnt_ideADC_idePeriodo_perR"
            "ef) desse evento."
        ),
    )

    eso11_infoTrabFGTS = fields.One2many(
        "eso.11.infotrabfgts",
        "eso11_infoTrabFGTS_ideLotacao_id",
        string="Informações relativas à matrícula",
        help=(
            "Informações relativas à matrícula e categoria do "
            "trabalhador.\nCHAVE_GRUPO: {matricula}, {codCateg}"
        ),
    )


class InfoTrabFgts(models.AbstractModel):
    """Informações relativas à matrícula e categoria do trabalhador.
    CHAVE_GRUPO: {matricula}, {codCateg}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotrabfgts"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao.InfoTrabFgts"

    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_matricula_retorno",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nEvento de origem: "
            "S-1200, S-2299, S-2399 ou S-3000.\nValidação: a) Se o evento de "
            "origem for S-1200/S-2299/S-2399, retornar a matrícula informada "
            "nesse evento;\nb) Se o evento de origem for S-3000, retornar a "
            "matrícula informada no evento objeto da exclusão."
        ),
    )

    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador, conforme Tabela 01.\nEvento"
            " de origem: S-1200, S-2299, S-2399 ou S-3000.\nValidação: a) Se o"
            " evento de origem for S-1200, retornar o código de categoria "
            "informado nesse evento;\nb) Se o evento de origem for S-2299 ou "
            "S-2399, retornar o código de categoria existente no Registro de "
            "Eventos Trabalhistas - RET;\nc) Se o evento de origem for S-3000 "
            "(referente a exclusão de S-1200), retornar o código de categoria "
            "informado no evento S-1200 (objeto da exclusão);\nd) Se o evento "
            "de origem for S-3000 (referente a exclusão de S-2299 ou S-2399), "
            "retornar o código de categoria existente no RET relativo ao "
            "contrato informado em S-2299 ou S-2399 (objeto da exclusão)."
        ),
    )

    eso11_categOrig = fields.Char(
        string="o código correspondente à categoria",
        xsd_type="TS_codCateg",
        help=(
            "o código correspondente à categoria de origem do dirigente "
            "sindical ou do trabalhador cedido.\nOrigem: campo {infoDirigenteS"
            "indical/categOrig}(2300_infoTSVInicio_infoComplementares_infoDiri"
            "genteSindical_categOrig) ou {infoTrabCedido/categOrig}(2300_infoT"
            "SVInicio_infoComplementares_infoTrabCedido_categOrig) de S-2300."
        ),
    )

    eso11_tpRegTrab = fields.Selection(
        TS_TPREGTRAB,
        string="Tipo de regime trabalhista",
        xsd_type="TS_tpRegTrab",
        help=(
            "Tipo de regime trabalhista.\nValidação: Deve corresponder ao tipo"
            " de regime trabalhista existente no RET."
        ),
    )

    eso11_remunSuc = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se a remuneração é relativa",
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se a remuneração é relativa a verbas de natureza salarial"
            " ou não salarial devidas pela empresa sucessora a empregados "
            "desligados ainda na sucedida.\nEvento de origem: S-1200."
        ),
    )

    eso11_dtDeslig = fields.Date(
        string="a data de desligamento do vínculo",
        xsd_type="xs:date",
        help=(
            "a data de desligamento do vínculo (último dia "
            "trabalhado).\nValidação: Deve corresponder à data de desligamento"
            " existente no RET. Não retornar caso haja reintegração com data "
            "posterior ao desligamento."
        ),
    )

    eso11_mtvDeslig = fields.Char(string="mtvDeslig")

    eso11_dtTerm = fields.Date(
        string="Data do término",
        xsd_type="xs:date",
        help=(
            "Data do término.\nValidação: Deve corresponder à data do término "
            "existente no RET."
        ),
    )

    eso11_mtvDesligTSV = fields.Char(string="mtvDesligTSV")

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.tsucessaovinc",
        string="Grupo de informações da sucessão",
        xsd_type="T_sucessaoVinc",
        help=(
            "Grupo de informações da sucessão de vínculo "
            "trabalhista\nDESCRICAO_COMPLETA:Grupo de informações da sucessão "
            "de vínculo trabalhista.\nEvento de origem: "
            "S-1200.\nCONDICAO_GRUPO: O (se {remunSuc}(../remunSuc) = [S]); N "
            "(nos demais casos)"
        ),
    )

    eso11_infoBaseFGTS = fields.Many2one(
        comodel_name="eso.11.infobasefgts",
        string="Bases de cálculo e valores do FGTS",
        help=(
            "Bases de cálculo e valores do "
            "FGTS\nDESCRICAO_COMPLETA:Informações referentes a bases de "
            "cálculo e valores do FGTS.\nCONDICAO_GRUPO: OC ((se "
            "{codCateg}(../codCateg) = [1XX, 301, 302, 303, 304, 306, 307, "
            "309, 310, 312] com {tpRegTrab}(../tpRegTrab) = [1] ou não "
            "informado) OU (se {codCateg}(../codCateg) = [201, 202, 721]) OU "
            "(se {codCateg}(../codCateg) = [401, 410] com "
            "{categOrig}(../categOrig) = [1XX, 301, 302, 303, 304, 306, 307, "
            "309, 310, 312] ou não informada e com {tpRegTrab}(../tpRegTrab) ="
            " [1] ou não informado)); N (nos demais casos)"
        ),
    )

    eso11_procCS = fields.Many2one(
        comodel_name="eso.11.proccs",
        string="Informação sobre processo judicial",
        help=(
            "Informação sobre processo judicial que suspende a exigibilidade "
            "da Contribuição Social Rescisória\nDESCRICAO_COMPLETA:Informação "
            "sobre processo judicial que suspende a exigibilidade da "
            "Contribuição Social Rescisória.\nEvento de origem: "
            "S-2299.\nCONDICAO_GRUPO: OC"
        ),
    )


class InfoBaseFgts(models.AbstractModel):
    """Bases de cálculo e valores do FGTS
    DESCRICAO_COMPLETA:Informações referentes a bases de cálculo e valores do FGTS.
    CONDICAO_GRUPO: OC ((se {codCateg}(../codCateg) = [1XX, 301, 302, 303, 304,
    306, 307, 309, 310, 312] com {tpRegTrab}(../tpRegTrab) = [1] ou não
    informado) OU (se {codCateg}(../codCateg) = [201, 202, 721]) OU (se
    {codCateg}(../codCateg) = [401, 410] com {categOrig}(../categOrig) = [1XX,
    301, 302, 303, 304, 306, 307, 309, 310, 312] ou não informada e com
    {tpRegTrab}(../tpRegTrab) = [1] ou não informado)); N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobasefgts"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao.InfoTrabFgts.InfoBaseFgts"
    )

    eso11_basePerApur = fields.One2many(
        "eso.11.baseperapur",
        "eso11_basePerApur_infoBaseFGTS_id",
        string="Bases de cálculo e valores",
        help=(
            "Bases de cálculo e valores, exceto se {tpAcConv} = [E, "
            "H]\nDESCRICAO_COMPLETA:Informações sobre bases de cálculo e "
            "valores do FGTS referentes à remuneração do período de apuração e"
            " de períodos anteriores, exceto se {tpAcConv} = [E, H].\nEvento "
            "de origem: S-1200, S-2299 ou S-2399.\nCHAVE_GRUPO: {tpValor}, "
            "{indIncid}\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_infoBasePerAntE = fields.One2many(
        "eso.11.infobaseperante",
        "eso11_infoBasePerAntE_infoBaseFGTS_id",
        string="Informações sobre bases e valores",
        help=(
            "Informações sobre bases e valores do FGTS quando {tpAcConv}(5003_"
            "infoFGTS_ideEstab_ideLotacao_infoTrabFGTS_infoBaseFGTS_infoBasePe"
            "rAntE_tpAcConv) = [E, H]\nDESCRICAO_COMPLETA:Informações "
            "referentes a bases de cálculo e valores do FGTS de períodos "
            "anteriores quando {tpAcConv}(./tpAcConv) = [E, H].\nCHAVE_GRUPO: "
            "{perRef}, {tpAcConv}\nCONDICAO_GRUPO: OC"
        ),
    )


class BasePerApur(models.AbstractModel):
    """Bases de cálculo e valores, exceto se {tpAcConv} = [E, H]
    DESCRICAO_COMPLETA:Informações sobre bases de cálculo e valores do FGTS
    referentes à remuneração do período de apuração e de períodos anteriores,
    exceto se {tpAcConv} = [E, H].
    Evento de origem: S-1200, S-2299 ou S-2399.
    CHAVE_GRUPO: {tpValor}, {indIncid}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.baseperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao.InfoTrabFgts.InfoBaseFgts.BasePerApur"

    eso11_tpValor = fields.Selection(
        BASEPERAPUR_TPVALOR, string="tpValor", xsd_required=True
    )

    eso11_indIncid = fields.Selection(
        TS_INDINCID, string="indIncid", xsd_required=True, xsd_type="TS_indIncid"
    )

    eso11_remFGTS = fields.Float(
        string="Remuneração",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Remuneração (valor da base de cálculo) do FGTS, conforme definido"
            " nos campos {tpValor}(./tpValor) e "
            "{indIncid}(./indIncid).\nValidação: Deve ser maior que 0 "
            "(zero).\nDeve corresponder ao somatório dos valores informados no"
            " campo {vrRubr} em S-1200 e S-2299 (grupos {infoPerApur} e "
            "{infoPerAnt}, quando {tpAcConv} for diferente de [E, H]), e "
            "também em S-2399, devendo somar os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4], observando a Tabela 23."
        ),
    )

    eso11_dpsFGTS = fields.Float(
        string="Valor histórico do FGTS a ser depositado",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor histórico do FGTS a ser depositado na conta vinculada do "
            "trabalhador.\nValidação: Deve ser maior que 0 (zero) e informado "
            "somente se {indIncid}(./indIncid) = [1].\nDeve corresponder à "
            "multiplicação de {remFGTS}(./remFGTS) pela alíquota abaixo:\na) "
            "Se {tpValor}(./tpValor) = [11, 12, 13, 14, 21, 22, 23, 24, 25, "
            "26], alíquota de 8%;\nb) Se {tpValor}(./tpValor) = [15, 16, 17, "
            "18, 27, 28, 29, 30, 31, 32], alíquota de 2%;\nc) Se "
            "{tpValor}(./tpValor) = [41, 42, 43, 44, 45, 46, 47, 48, 49, 50], "
            "alíquota de 3,2%."
        ),
    )

    eso11_detRubrSusp = fields.One2many(
        "eso.11.tdetrubrsusp",
        "eso11_detRubrSusp_basePerApur_id",
        string="Detalhamento da(s) rubrica(s)",
        xsd_type="T_detRubrSusp",
        help=(
            "Detalhamento da(s) rubrica(s) com incidência de FGTS "
            "suspensa\nDESCRICAO_COMPLETA:Detalhamento da(s) rubrica(s) com "
            "incidência de FGTS suspensa em decorrência de decisão "
            "judicial.\nCHAVE_GRUPO: {codRubr}, {ideTabRubr}\nCONDICAO_GRUPO: "
            "O (se {indIncid}(../indIncid) = [9]); N (nos demais casos)"
        ),
    )


class InfoBasePerAntE(models.AbstractModel):
    """Informações sobre bases e valores do FGTS quando {tpAcConv}(5003_infoFGT
    S_ideEstab_ideLotacao_infoTrabFGTS_infoBaseFGTS_infoBasePerAntE_tpAcCon
    v) = [E, H]
    DESCRICAO_COMPLETA:Informações referentes a bases de cálculo e valores do FGTS
    de períodos anteriores quando {tpAcConv}(./tpAcConv) = [E, H].
    CHAVE_GRUPO: {perRef}, {tpAcConv}
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobaseperante"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao.InfoTrabFgts.InfoBaseFgts.InfoBasePerAntE"

    eso11_perRef = fields.Char(
        string="período ao qual se refere a remuneração",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "período ao qual se refere a remuneração, no formato AAAA-"
            "MM.\nEvento de origem: S-1200 ou S-2299.\nValidação: Deve "
            "corresponder ao período informado no evento de origem."
        ),
    )

    eso11_tpAcConv = fields.Selection(
        TS_TPACCONV_FGTS,
        string="tpAcConv",
        xsd_required=True,
        xsd_type="TS_tpAcConv_FGTS",
    )

    eso11_basePerAntE = fields.One2many(
        "eso.11.baseperante",
        "eso11_basePerAntE_infoBasePerAntE_id",
        string="Bases de cálculo e valores",
        help=(
            "Bases de cálculo e valores quando {tpAcConv}(5003_infoFGTS_ideEst"
            "ab_ideLotacao_infoTrabFGTS_infoBaseFGTS_infoBasePerAntE_tpAcConv)"
            " = [E, H]\nDESCRICAO_COMPLETA:Informações sobre bases de cálculo "
            "e valores do FGTS referentes à remuneração de períodos anteriores"
            " quando {tpAcConv}(../tpAcConv) = [E, H].\nCHAVE_GRUPO: "
            "{tpValorE}, {indIncidE}"
        ),
    )


class BasePerAntE(models.AbstractModel):
    """Bases de cálculo e valores quando {tpAcConv}(5003_infoFGTS_ideEstab_ideL
    otacao_infoTrabFGTS_infoBaseFGTS_infoBasePerAntE_tpAcConv) = [E, H]
    DESCRICAO_COMPLETA:Informações sobre bases de cálculo e valores do FGTS
    referentes à remuneração de períodos anteriores quando
    {tpAcConv}(../tpAcConv) = [E, H].
    CHAVE_GRUPO: {tpValorE}, {indIncidE}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.baseperante"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao.InfoTrabFgts.InfoBaseFgts.InfoBasePerAntE.BasePerAntE"

    eso11_tpValorE = fields.Selection(
        TS_TPVALORE,
        string="Tipo de valor que influi na apuração",
        xsd_required=True,
        xsd_type="TS_tpValorE",
        help="Tipo de valor que influi na apuração do FGTS.",
    )

    eso11_indIncidE = fields.Selection(
        TS_INDINCID, string="indIncidE", xsd_required=True, xsd_type="TS_indIncid"
    )

    eso11_remFGTSE = fields.Float(
        string="Remuneração",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Remuneração (valor da base de cálculo) do FGTS, conforme definido"
            " nos campos {tpValorE}(./tpValorE) e "
            "{indIncidE}(./indIncidE).\nValidação: Deve ser maior que 0 "
            "(zero).\nDeve corresponder ao somatório dos valores informados no"
            " campo {vrRubr} em S-1200 e S-2299 (grupo {infoPerAnt}, agrupado "
            "por {tpAcConv}(../tpAcConv)), devendo somar os valores das "
            "rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4], observando a Tabela 23."
        ),
    )

    eso11_dpsFGTSE = fields.Float(
        string="Valor histórico do FGTS a ser depositado",
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor histórico do FGTS a ser depositado na conta vinculada do "
            "trabalhador.\nValidação: Deve ser maior que 0 (zero) e informado "
            "somente se {indIncidE}(./indIncidE) = [1].\nDeve corresponder à "
            "multiplicação de {remFGTSE}(./remFGTSE) pela alíquota abaixo:\na)"
            " Se {tpValorE}(./tpValorE) = [13, 14, 24, 25, 26], alíquota de "
            "8%;\nb) Se {tpValorE}(./tpValorE) = [17, 18, 30, 31, 32], "
            "alíquota de 2%;\nc) Se {tpValorE}(./tpValorE) = [43, 44, 48, 49, "
            "50], alíquota de 3,2%."
        ),
    )

    eso11_detRubrSusp = fields.One2many(
        "eso.11.tdetrubrsusp",
        "eso11_detRubrSusp_basePerAntE_id",
        string="Detalhamento da(s) rubrica(s)",
        xsd_type="T_detRubrSusp",
        help=(
            "Detalhamento da(s) rubrica(s) com incidência de FGTS "
            "suspensa\nDESCRICAO_COMPLETA:Detalhamento da(s) rubrica(s) com "
            "incidência de FGTS suspensa em decorrência de decisão "
            "judicial.\nCHAVE_GRUPO: {codRubr}, {ideTabRubr}\nCONDICAO_GRUPO: "
            "O (se {indIncidE}(../indIncidE) = [9]); N (nos demais casos)"
        ),
    )


class ProcCs(models.AbstractModel):
    """Informação sobre processo judicial que suspende a exigibilidade da
    Contribuição Social Rescisória
    DESCRICAO_COMPLETA:Informação sobre processo judicial que suspende a
    exigibilidade da Contribuição Social Rescisória.
    Evento de origem: S-2299.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.proccs"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtBasesFgts.InfoFgts.IdeEstab.IdeLotacao.InfoTrabFgts.ProcCs"
    )

    eso11_nrProcJud = fields.Char(
        string="número de processo judicial cadastrado",
        xsd_required=True,
        xsd_type="TS_nrProcJud",
    )
