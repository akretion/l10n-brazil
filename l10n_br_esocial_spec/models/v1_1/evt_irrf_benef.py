# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSCRDIA,
    TSCRMEN,
    TIdeEmpregador,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtIrrfBenef/v_S_01_01_00"

"""Informar o evento de origem do pagamento.
    Origem: campo {tpPgto}(1210_ideBenef_infoPgto_tpPgto) de S-1210."""
DMDEV_TPPGTO = [
  ("1", "S-1200"),
  ("2", "S-2299"),
  ("3", "S-2399"),
  ("4", "S-1202"),
  ("5", "S-1207"),
]

"Consolidação dos tipos de valores relativos ao IRRF."
INFOIR_TPINFOIR = [
  ("11", "Rendimentos tributáveis:
Remuneração mensal"),
  ("12", "13º salário"),
  ("14", "PLR"),
  ("31", "Retenções do IRRF efetuadas sobre:
Remuneração mensal"),
  ("32", "13º salário"),
  ("34", "PLR"),
  ("41", "Deduções da base de cálculo do IRRF:
Previdência Social Oficial - PSO - Remuneração mensal"),
  ("42", "PSO - 13º salário"),
  ("46", "Previdência complementar - Salário mensal"),
  ("47", "Previdência complementar - 13º salário"),
  ("51", "Pensão alimentícia - Remuneração mensal"),
  ("52", "Pensão alimentícia - 13º salário"),
  ("54", "Pensão alimentícia - PLR"),
  ("61", "Fundo de Aposentadoria Programada Individual - FAPI - Remuneração mensal"),
  ("62", "Fundo de Aposentadoria Programada Individual - FAPI - 13º salário"),
  ("63", "Fundação de previdência complementar do servidor público - Remuneração mensal"),
  ("64", "Fundação de previdência complementar do servidor público - 13º salário"),
  ("67", "Plano privado coletivo de assistência à saúde"),
  ("70", "Rendimento não tributável ou isento do IRRF:
Parcela isenta 65 anos - Remuneração mensal"),
  ("71", "Parcela isenta 65 anos - 13º salário"),
  ("72", "Diárias"),
  ("73", "Ajuda de custo"),
  ("74", "Indenização e rescisão de contrato, inclusive a título de PDV e acidentes de trabalho"),
  ("75", "Abono pecuniário"),
  ("76", "Rendimento de beneficiário com moléstia grave ou acidente em serviço - Remuneração mensal"),
  ("77", "Rendimento de beneficiário com moléstia grave ou acidente em serviço - 13º salário"),
  ("700", "Auxílio moradia"),
  ("701", "Parte não tributável do valor de serviço de transporte de passageiros ou cargas"),
  ("79", "Outras isenções"),
  ("7900", "Verba transitada pela folha de pagamento de natureza diversa de rendimento ou retenção/isenção/dedução de IR (exemplo: desconto de convênio farmácia, desconto de consignações, etc.)"),
  ("7950", "Códigos para compatibilidade de versões anteriores:
Rendimento não tributável"),
  ("7951", "Rendimento não tributável em função de acordos internacionais de bitributação"),
  ("7952", "Rendimento tributável - RRA"),
  ("7953", "Retenção de IR - RRA"),
  ("7954", "Previdência Social Oficial - RRA"),
  ("7955", "Pensão alimentícia - RRA"),
  ("7956", "Valores pagos a titular ou sócio de microempresa ou empresa de pequeno porte, exceto pró-labore e aluguéis"),
  ("7957", "Depósito judicial"),
  ("7958", "Compensação judicial do ano-calendário"),
  ("7959", "Compensação judicial de anos anteriores"),
  ("7960", "Exigibilidade suspensa - Remuneração mensal"),
  ("7961", "Exigibilidade suspensa - 13º salário"),
  ("7962", "Exigibilidade suspensa - Férias"),
  ("7963", "Exigibilidade suspensa - PLR"),
  ("7964", "Exigibilidade suspensa - RRA"),
  ("9011", "Exigibilidade suspensa - Rendimento tributável (base de cálculo do IR):
Remuneração mensal"),
  ("9012", "13º salário"),
  ("9014", "PLR"),
  ("9031", "Exigibilidade suspensa - Retenção do IRRF efetuada sobre:
Remuneração mensal"),
  ("9032", "13º salário"),
  ("9034", "PLR"),
  ("9831", "Depósito judicial - Mensal"),
  ("9832", "Depósito judicial - 13º salário"),
  ("9834", "Depósito judicial - PLR"),
  ("9041", "Exigibilidade suspensa - Dedução da base de cálculo do IRRF:
Previdência Social Oficial - PSO - Remuneração mensal"),
  ("9042", "PSO - 13º salário"),
  ("9046", "Previdência complementar - Salário mensal"),
  ("9047", "Previdência complementar - 13º salário"),
  ("9051", "Pensão alimentícia - Remuneração mensal"),
  ("9052", "Pensão alimentícia - 13º salário"),
  ("9054", "Pensão alimentícia - PLR"),
  ("9061", "Fundo de Aposentadoria Programada Individual - FAPI - Remuneração mensal"),
  ("9062", "Fundo de Aposentadoria Programada Individual - FAPI - 13º salário"),
  ("9063", "Fundação de previdência complementar do servidor público - Remuneração mensal"),
  ("9064", "Fundação de previdência complementar do servidor público - 13º salário"),
  ("9067", "Plano privado coletivo de assistência à saúde"),
  ("9082", "Compensação judicial:
Compensação judicial do ano-calendário"),
  ("9083", "Compensação judicial de anos anteriores"),
]


class ESocial(models.AbstractModel):
    "S-5002 - Imposto de Renda Retido na Fonte por Trabalhador"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtIrrfBenef = fields.Many2one(
        comodel_name="eso.11.evtirrfbenef",
        string="Evento IRRF por Trabalhador",
        xsd_required=True,
        help=(
            "Evento IRRF por Trabalhador\nDESCRICAO_COMPLETA:Evento Imposto de"
            " Renda Retido na Fonte por Trabalhador.\nCHAVE_GRUPO: {Id}"
        )
    )
    

class EvtIrrfBenef(models.AbstractModel):
    """Evento IRRF por Trabalhador
    DESCRICAO_COMPLETA:Evento Imposto de Renda Retido na Fonte por Trabalhador.
    CHAVE_GRUPO: {Id}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtirrfbenef"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.ideevento",
        string="Identificação do evento de retorno",
        xsd_required=True,
        help="Identificação do evento de retorno.\nCHAVE_GRUPO: {perApur*}"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador"
    )
    
    eso11_ideTrabalhador = fields.Many2one(
        comodel_name="eso.11.idetrabalhador",
        string="Identificação do beneficiário",
        xsd_required=True,
        help=(
            "Identificação do beneficiário\nDESCRICAO_COMPLETA:Identificação "
            "do beneficiário do pagamento.\nCHAVE_GRUPO: {cpfBenef*}"
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id_retorno"
    )
    

class IdeEvento(models.AbstractModel):
    """Identificação do evento de retorno.
    CHAVE_GRUPO: {perApur*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideevento"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef.IdeEvento"


    
    eso11_nrRecArqBase = fields.Char(
        string="o número do recibo do arquivo",
        xsd_required=True,
        xsd_type="TS_nrRecibo",
        help=(
            "o número do recibo do arquivo que deu origem ao presente arquivo "
            "de retorno ao empregador.\nValidação: Deve corresponder ao recibo"
            " de um arquivo com informações de rendimentos sujeitos a Imposto "
            "de Renda Retido na Fonte - IRRF (S-1210 ou S-3000)."
        )
    )
    
    eso11_perApur = fields.Char(
        string="mês/ano",
        xsd_required=True,
        xsd_type="TS_perApur_mensal",
        help="mês/ano (formato AAAA-MM) de referência das informações."
    )
    

class IdeTrabalhador(models.AbstractModel):
    """Identificação do beneficiário
    DESCRICAO_COMPLETA:Identificação do beneficiário do pagamento.
    CHAVE_GRUPO: {cpfBenef*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef.IdeTrabalhador"


    
    eso11_cpfBenef = fields.Char(
        string="Número de inscrição no Cadastro",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "Número de inscrição no Cadastro de Pessoas Físicas - CPF do "
            "beneficiário do pagamento.\nOrigem: campo "
            "{cpfBenef}(1210_ideBenef_cpfBenef) de S-1210."
        )
    )
    
    eso11_dmDev = fields.One2many("eso.11.dmdev", "eso11_dmDev_ideTrabalhador_id",
        string="Informações do demonstrativo",
        help=(
            "Informações do demonstrativo de valores devidos.\nCHAVE_GRUPO: "
            "{perRef}, {ideDmDev}, {tpPgto}"
        )
    )
    

class DmDev(models.AbstractModel):
    """Informações do demonstrativo de valores devidos.
    CHAVE_GRUPO: {perRef}, {ideDmDev}, {tpPgto}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dmdev"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef.IdeTrabalhador.DmDev"


    
    eso11_perRef = fields.Char(
        string="Período de referência das informações",
        xsd_required=True,
        xsd_type="TS_perApur",
        help=(
            "Período de referência das informações, no formato AAAA-MM (ou "
            "AAAA, se for relativo a 13° salário).\nOrigem: campo "
            "{perRef}(1210_ideBenef_infoPgto_perRef) de S-1210."
        )
    )
    
    eso11_ideDmDev = fields.Char(
        string="Identificador atribuído",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Identificador atribuído pela fonte pagadora para o demonstrativo "
            "de valores devidos ao trabalhador.\nOrigem: campo "
            "{ideDmDev}(1210_ideBenef_infoPgto_ideDmDev) de S-1210."
        )
    )
    
    eso11_tpPgto = fields.Selection(DMDEV_TPPGTO,
        string="tpPgto",
        xsd_required=True
    )
    
    eso11_dtPgto = fields.Date(
        string="data de pagamento",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "data de pagamento.\nOrigem: campo "
            "{dtPgto}(1210_ideBenef_infoPgto_dtPgto) de S-1210."
        )
    )
    
    eso11_codCateg = fields.Char(
        string="o código da categoria do trabalhador",
        xsd_required=True,
        xsd_type="TS_codCateg",
        help=(
            "o código da categoria do trabalhador, conforme Tabela "
            "01.\nValidação: a) Se {tpPgto}(./tpPgto) = [1, 4], retornar o "
            "código de categoria informado no evento de origem;\nb) Se "
            "{tpPgto}(./tpPgto) = [2, 3], retornar o código de categoria "
            "existente no Registro de Eventos Trabalhistas - RET;\nc) Se "
            "{tpPgto}(./tpPgto) = [5], retornar [000]."
        )
    )
    
    eso11_infoIR = fields.One2many("eso.11.infoir", "eso11_infoIR_dmDev_id",
        string="Rendimentos tributáveis, deduções",
        help=(
            "Rendimentos tributáveis, deduções, isenções e retenções do IRRF."
        )
    )
    
    eso11_totApurMen = fields.One2many("eso.11.totapurmen", "eso11_totApurMen_dmDev_id",
        string="Totalizador de tributos com período",
        help=(
            "Totalizador de tributos com período de apuração "
            "mensal.\nCHAVE_GRUPO: {CRMen}\nCONDICAO_GRUPO: OC"
        )
    )
    
    eso11_totApurDia = fields.One2many("eso.11.totapurdia", "eso11_totApurDia_dmDev_id",
        string="totApurDia",
        help=(
            "Totalizador de tributos com período de apuração "
            "diário.\nCHAVE_GRUPO: {perApurDia}, {CRDia}\nCONDICAO_GRUPO: OC"
        )
    )
    

class InfoIr(models.AbstractModel):
    "Rendimentos tributáveis, deduções, isenções e retenções do IRRF."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoir"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef.IdeTrabalhador.DmDev.InfoIr"


    
    eso11_tpInfoIR = fields.Selection(INFOIR_TPINFOIR,
        string="tpInfoIR",
        xsd_required=True
    )
    
    eso11_valor = fields.Float(
        string="Composição do valor",
        xsd_required=True,
        xsd_type="TS_valor",
        help=(
            "Composição do valor do rendimento tributável, não tributável, "
            "retenção, dedução ou isenção do IRRF, de acordo com a "
            "classificação apresentada no campo "
            "{tpInfoIR}(./tpInfoIR).\nValidação: Deve corresponder ao "
            "somatório dos valores informados nas rubricas (campo {vrRubr}) "
            "dos eventos que deram origem ao S-1210 (grupos {infoPerApur} e "
            "{infoPerAnt} do S-1200, S-1202, S-1207 e S-2299, e grupo "
            "{verbasResc} do S-2399), desde que o campo {indApurIR} vinculado "
            "às respectivas rubricas seja igual a [0] ou não informado, "
            "obedecendo ao que segue:\na) Somar os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4], observando a tabela de relacionamento "
            "abaixo:\n{tpInfoIR}(./tpInfoIR) = [11], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [11, 13];\n{tpInfoIR}(./tpInfoIR) = [12], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [12];\n{tpInfoIR}(./tpInfoIR) = [14], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [14];\n{tpInfoIR}(./tpInfoIR) = [70], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [70];\n{tpInfoIR}(./tpInfoIR) = [71], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [71];\n{tpInfoIR}(./tpInfoIR) = [72], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [72];\n{tpInfoIR}(./tpInfoIR) = [73], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [73];\n{tpInfoIR}(./tpInfoIR) = [74], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [74];\n{tpInfoIR}(./tpInfoIR) = [75], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [75];\n{tpInfoIR}(./tpInfoIR) = [76], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [76];\n{tpInfoIR}(./tpInfoIR) = [77], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [77];\n{tpInfoIR}(./tpInfoIR) = [700], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [700];\n{tpInfoIR}(./tpInfoIR) = [701], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [701];\n{tpInfoIR}(./tpInfoIR) = [79], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [79];\n{tpInfoIR}(./tpInfoIR) = [7900], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9];\n{tpInfoIR}(./tpInfoIR) = [7950], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [0];\n{tpInfoIR}(./tpInfoIR) = [7951], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [1];\n{tpInfoIR}(./tpInfoIR) = [7952], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [15];\n{tpInfoIR}(./tpInfoIR) = [7956], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [78];\n{tpInfoIR}(./tpInfoIR) = [7960], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [91];\n{tpInfoIR}(./tpInfoIR) = [7961], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [92];\n{tpInfoIR}(./tpInfoIR) = [7962], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [93];\n{tpInfoIR}(./tpInfoIR) = [7963], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [94];\n{tpInfoIR}(./tpInfoIR) = [7964], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [95];\n{tpInfoIR}(./tpInfoIR) = [9011], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9011, 9013];\n{tpInfoIR}(./tpInfoIR) = [9012], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9012];\n{tpInfoIR}(./tpInfoIR) = [9014], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9014].\n\nb) Somar os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [2, 4] e subtrair os valores das rubricas cujo "
            "{tpRubr}(1010_infoRubrica_inclusao_dadosRubrica_tpRubr) em S-1010"
            " seja igual a [1, 3], observando a tabela de relacionamento "
            "abaixo:\n{tpInfoIR}(./tpInfoIR) = [31], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [31, 33];\n{tpInfoIR}(./tpInfoIR) = [32], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [32];\n{tpInfoIR}(./tpInfoIR) = [34], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [34];\n{tpInfoIR}(./tpInfoIR) = [41], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [41, 43];\n{tpInfoIR}(./tpInfoIR) = [42], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [42];\n{tpInfoIR}(./tpInfoIR) = [46], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [46, 48];\n{tpInfoIR}(./tpInfoIR) = [47], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [47];\n{tpInfoIR}(./tpInfoIR) = [51], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [51, 53];\n{tpInfoIR}(./tpInfoIR) = [52], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [52];\n{tpInfoIR}(./tpInfoIR) = [54], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [54];\n{tpInfoIR}(./tpInfoIR) = [61], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [61, 66];\n{tpInfoIR}(./tpInfoIR) = [62], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [62];\n{tpInfoIR}(./tpInfoIR) = [63], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [63, 65];\n{tpInfoIR}(./tpInfoIR) = [64], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [64];\n{tpInfoIR}(./tpInfoIR) = [67], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [67];\n{tpInfoIR}(./tpInfoIR) = [7953], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [35];\n{tpInfoIR}(./tpInfoIR) = [7954], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [44];\n{tpInfoIR}(./tpInfoIR) = [7955], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [55];\n{tpInfoIR}(./tpInfoIR) = [7957], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [81];\n{tpInfoIR}(./tpInfoIR) = [7958], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [82];\n{tpInfoIR}(./tpInfoIR) = [7959], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [83];\n{tpInfoIR}(./tpInfoIR) = [9031], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9031, 9033];\n{tpInfoIR}(./tpInfoIR) = [9032], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9032];\n{tpInfoIR}(./tpInfoIR) = [9034], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9034];\n{tpInfoIR}(./tpInfoIR) = [9831], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9831, 9833];\n{tpInfoIR}(./tpInfoIR) = [9832], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9832];\n{tpInfoIR}(./tpInfoIR) = [9834], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9834];\n{tpInfoIR}(./tpInfoIR) = [9041], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9041, 9043];\n{tpInfoIR}(./tpInfoIR) = [9042], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9042];\n{tpInfoIR}(./tpInfoIR) = [9046], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9046, 9048];\n{tpInfoIR}(./tpInfoIR) = [9047], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9047];\n{tpInfoIR}(./tpInfoIR) = [9051], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9051, 9053];\n{tpInfoIR}(./tpInfoIR) = [9052], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9052];\n{tpInfoIR}(./tpInfoIR) = [9054], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9054];\n{tpInfoIR}(./tpInfoIR) = [9061], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9061, 9066];\n{tpInfoIR}(./tpInfoIR) = [9062], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9062];\n{tpInfoIR}(./tpInfoIR) = [9063], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9063, 9065];\n{tpInfoIR}(./tpInfoIR) = [9064], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9064];\n{tpInfoIR}(./tpInfoIR) = [9067], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9067];\n{tpInfoIR}(./tpInfoIR) = [9082], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9082];\n{tpInfoIR}(./tpInfoIR) = [9083], "
            "{codIncIRRF}(1010_infoRubrica_inclusao_dadosRubrica_codIncIRRF) "
            "em S-1010 = [9083].\n\nOBS.: Se o campo {indApurIR} vinculado à "
            "rubrica for igual a [1], considerar {vrRubr} = [0]."
        )
    )
    

class TotApurMen(models.AbstractModel):
    """Totalizador de tributos com período de apuração mensal.
    CHAVE_GRUPO: {CRMen}
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.totapurmen"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef.IdeTrabalhador.DmDev.TotApurMen"


    
    eso11_CRMen = fields.Selection(TS_CRMEN,
        string="CRMen",
        xsd_required=True,
        xsd_type="TS_CRMen"
    )
    
    eso11_vlrCRMen = fields.Float(
        string="Valor relativo ao Imposto",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor relativo ao Imposto de Renda Retido na Fonte sobre "
            "rendimentos do trabalho.\nValidação: Deve ser maior que 0 (zero) "
            "e agrupado conforme segue:\na) Quando o evento de origem for "
            "S-1200, S-1202, S-2299, S-2399 e respectivo "
            "S-1210:\n{CRMen}(./CRMen) = [056107]: se {codCateg}(../codCateg) "
            "= [101, 103, 105, 106, 107, 108, 111, 201, 202, 301, 302, 303, "
            "304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 401, 410, 501, "
            "721, 722, 723, 901, 902, 903, 904], {indApurIR} = [0], os campos "
            "{indRRA} e {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não forem informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 for diferente de [22], efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[31, 32];\n{CRMen}(./CRMen) = [056108]: se "
            "{codCateg}(../codCateg) = [104], {indApurIR} = [0] e os campos "
            "{indRRA} e {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não forem informados, efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[31];\n{CRMen}(./CRMen) = [056109]: se {codCateg}(../codCateg) = "
            "[104], {indApurIR} = [0] e os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [32], apenas se origem for "
            "S-2299;\n{CRMen}(./CRMen) = [056110]: se {codCateg}(../codCateg) "
            "= [104], {indApurIR} = [0] e os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [32], exceto se origem for "
            "S-2299;\n{CRMen}(./CRMen) = [056111]: se {codCateg}(../codCateg) "
            "= [101, 102, 103, 105, 106, 107, 108, 111, 201, 202], {indApurIR}"
            " = [0], os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], efetuar o somatório de {valor}(../infoIR_valor)"
            " cujo {tpInfoIR}(../infoIR_tpInfoIR) = [31];\n{CRMen}(./CRMen) = "
            "[056112]: se {codCateg}(../codCateg) = [101, 102, 103, 105, 106, "
            "107, 108, 111, 201, 202], {indApurIR} = [0], os campos {indRRA} e"
            " {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], efetuar o somatório de {valor}(../infoIR_valor)"
            " cujo {tpInfoIR}(../infoIR_tpInfoIR) = [32], exceto se origem for"
            " S-2299/S-2399;\n{CRMen}(./CRMen) = [056113]: se "
            "{codCateg}(../codCateg) = [101, 102, 103, 105, 106, 107, 108, "
            "111, 201, 202], {indApurIR} = [0], os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], efetuar o somatório de {valor}(../infoIR_valor)"
            " cujo {tpInfoIR}(../infoIR_tpInfoIR) = [32], apenas se origem for"
            " S-2299/S-2399;\n{CRMen}(./CRMen) = [058806]: se "
            "{codCateg}(../codCateg) = [701, 711, 712, 731, 734, 738, 741, "
            "751, 761, 771, 781], {indApurIR} = [0] e os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [31, 32, 34];\n{CRMen}(./CRMen) "
            "= [061001]: se {codCateg}(../codCateg) = [712], {indApurIR} = [0]"
            " e {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) = [586], "
            "efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [31];\n{CRMen}(./CRMen) = "
            "[356201]: se {codCateg}(../codCateg) = [1XX], {indApurIR} = [0] e"
            " os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [34];\n{CRMen}(./CRMen) = "
            "[188901]: se {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não for informado, {indApurIR} = [0] e {indRRA} = [S], efetuar o "
            "somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [31, 32, 34].\n\nb) Quando o "
            "evento de origem for S-1207 e respectivo "
            "S-1210:\n{CRMen}(./CRMen) = [353301]: se {indApurIR} = [0] e os "
            "campos {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) e "
            "{indRRA} não forem informados, efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[31, 32, 34];\n{CRMen}(./CRMen) = [188901]: se "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não for "
            "informado, {indApurIR} = [0] e {indRRA} = [S], efetuar o "
            "somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [31, 32, 34]."
        )
    )
    
    eso11_vlrCRMenSusp = fields.Float(
        string="Valor que deixou",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor que deixou de ser descontado relativo ao Imposto de Renda "
            "sobre rendimentos do trabalho em decorrência de "
            "processos.\nValidação: Deve ser maior ou igual a 0 (zero) e "
            "agrupado conforme segue:\na) Quando o evento de origem for "
            "S-1200, S-1202, S-2299, S-2399 e respectivo "
            "S-1210:\n{CRMen}(./CRMen) = [056107]: se {codCateg}(../codCateg) "
            "= [101, 103, 105, 106, 107, 108, 111, 201, 202, 301, 302, 303, "
            "304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 401, 410, 501, "
            "721, 722, 723, 901, 902, 903, 904], {indApurIR} = [0], os campos "
            "{indRRA} e {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não forem informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 for diferente de [22], efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[9031, 9032, 9831, 9832];\n{CRMen}(./CRMen) = [056108]: se "
            "{codCateg}(../codCateg) = [104], {indApurIR} = [0] e os campos "
            "{indRRA} e {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não forem informados, efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[9031, 9831];\n{CRMen}(./CRMen) = [056109]: se "
            "{codCateg}(../codCateg) = [104], {indApurIR} = [0] e os campos "
            "{indRRA} e {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não forem informados, efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[9032, 9832], apenas se origem for S-2299;\n{CRMen}(./CRMen) = "
            "[056110]: se {codCateg}(../codCateg) = [104], {indApurIR} = [0] e"
            " os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [9032, 9832], exceto se origem "
            "for S-2299;\n{CRMen}(./CRMen) = [056111]: se "
            "{codCateg}(../codCateg) = [101, 102, 103, 105, 106, 107, 108, "
            "111, 201, 202], {indApurIR} = [0], os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], efetuar o somatório de {valor}(../infoIR_valor)"
            " cujo {tpInfoIR}(../infoIR_tpInfoIR) = [9031, "
            "9831];\n{CRMen}(./CRMen) = [056112]: se {codCateg}(../codCateg) ="
            " [101, 102, 103, 105, 106, 107, 108, 111, 201, 202], {indApurIR} "
            "= [0], os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], efetuar o somatório de {valor}(../infoIR_valor)"
            " cujo {tpInfoIR}(../infoIR_tpInfoIR) = [9032, 9832], exceto se "
            "origem for S-2299/S-2399;\n{CRMen}(./CRMen) = [056113]: se "
            "{codCateg}(../codCateg) = [101, 102, 103, 105, 106, 107, 108, "
            "111, 201, 202], {indApurIR} = [0], os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados e "
            "{classTrib}(1000_infoEmpregador_inclusao_infoCadastro_classTrib) "
            "em S-1000 = [22], efetuar o somatório de {valor}(../infoIR_valor)"
            " cujo {tpInfoIR}(../infoIR_tpInfoIR) = [9032, 9832], apenas se "
            "origem for S-2299/S-2399;\n{CRMen}(./CRMen) = [058806]: se "
            "{codCateg}(../codCateg) = [701, 711, 712, 731, 734, 738, 741, "
            "751, 761, 771, 781], {indApurIR} = [0] e os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [9031,  9032, 9034, 9831, 9832, "
            "9834];\n{CRMen}(./CRMen) = [061001]: se {codCateg}(../codCateg) ="
            " [712], {indApurIR} = [0] e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) = [586], "
            "efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [9031, 9831];\n{CRMen}(./CRMen) "
            "= [356201]: se {codCateg}(../codCateg) = [1XX], {indApurIR} = [0]"
            " e os campos {indRRA} e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não forem "
            "informados, efetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [9034, 9834];\n{CRMen}(./CRMen) "
            "= [188901]: se "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) não for "
            "informado, {indApurIR} = [0] e {indRRA} = [S], efetuar o "
            "somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [9031, 9032, 9034, 9831, 9832, "
            "9834].\n\nb) Quando o evento de origem for S-1207 e respectivo "
            "S-1210:\n{CRMen}(./CRMen) = [353301]: se {indApurIR} = [0] e os "
            "campos {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) e "
            "{indRRA} não forem informados, efetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[9031, 9032, 9034, 9831, 9832, 9834];\n{CRMen}(./CRMen) = "
            "[188901]: se {paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) "
            "não for informado, {indApurIR} = [0] e {indRRA} = [S], efetuar o "
            "somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [9031, 9032, 9034, 9831, 9832, "
            "9834]."
        )
    )
    

class TotApurDia(models.AbstractModel):
    """Totalizador de tributos com período de apuração diário.
    CHAVE_GRUPO: {perApurDia}, {CRDia}
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.totapurdia"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtIrrfBenef.IdeTrabalhador.DmDev.TotApurDia"


    
    eso11_perApurDia = fields.Char(
        string="Período de apuração diário do Código",
        xsd_required=True,
        xsd_type="TS_dia",
        help=(
            "Período de apuração diário do Código de Receita - CR.\nValidação:"
            " Deve ser igual ao dia ('DD') da data informada em "
            "{dtPgto}(../dtPgto)."
        )
    )
    
    eso11_CRDia = fields.Selection(TS_CRDIA,
        string="CRDia",
        xsd_required=True,
        xsd_type="TS_CRDia"
    )
    
    eso11_vlrCRDia = fields.Float(
        string="Valor relativo ao Imposto",
        xsd_required=True,
        xsd_type="TS_valorMonetario_positivo",
        help=(
            "Valor relativo ao Imposto de Renda Retido na Fonte sobre "
            "rendimentos do trabalho pagos a residente, para fins fiscais, no "
            "exterior.\nEvento de origem: S-1200, S-1202, S-2299, S-2399 e "
            "respectivo S-1210.\nValidação: Deve ser maior que 0 "
            "(zero).\nEfetuar o somatório de {valor}(../infoIR_valor) cujo "
            "{tpInfoIR}(../infoIR_tpInfoIR) = [31, 32, 34], se {indApurIR} = "
            "[0] e:\na) {codCateg}(../codCateg) for diferente de [712] e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) for informado"
            " com qualquer valor; ou\nb) {codCateg}(../codCateg) = [712] e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) for informado"
            " com valor diferente de [586]."
        )
    )
    
    eso11_vlrCRDiaSusp = fields.Float(
        string="Valor que deixou de ser descontado",
        xsd_type="TS_valorMonetario",
        help=(
            "Valor que deixou de ser descontado do trabalhador relativo ao "
            "Imposto de Renda sobre rendimentos do trabalho pagos a residente,"
            " para fins fiscais, no exterior.\nEvento de origem: S-1200, "
            "S-1202, S-2299, S-2399 e respectivo S-1210.\nValidação: Deve ser "
            "maior ou igual a 0 (zero).\nEfetuar o somatório de "
            "{valor}(../infoIR_valor) cujo {tpInfoIR}(../infoIR_tpInfoIR) = "
            "[9031, 9032, 9034, 9831, 9832, 9834], se {indApurIR} = [0] e:\na)"
            " {codCateg}(../codCateg) for diferente de [712] e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) for informado"
            " com qualquer valor; ou\nb) {codCateg}(../codCateg) = [712] e "
            "{paisResidExt}(1210_ideBenef_infoPgto_paisResidExt) for informado"
            " com valor diferente de [586]."
        )
    )