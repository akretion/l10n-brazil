# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDRRA,
    TSSIMNAO,
    TSTPINSC1,
    TIdeEmpregadorCnpj,
    TIdeEventoFolhaOpp,
    TInfoRra,
    TItensRemunRpps,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtRmnRPPS/v_S_01_01_00"


class TRemunPer(models.AbstractModel):
    _description = "T_remunPer"
    _name = "eso.11.tremunper"
    _inherit = "spec.mixin.eso"
    _binding_type = "TRemunPer"

    eso11_remunPerApur_ideEstab_id = fields.Many2one(
        comodel_name="eso.11.infoperapur_ideestab",
        xsd_implicit=True,
        ondelete="cascade",
    )
    eso11_remunPerAnt_ideEstab_id = fields.Many2one(
        comodel_name="eso.11.ideperiodo_ideestab", xsd_implicit=True, ondelete="cascade"
    )
    eso11_matricula = fields.Char(
        string="Matrícula atribuída ao trabalhador",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula atribuída ao trabalhador pela empresa ou, no caso de "
            "servidor público, a matrícula constante no Sistema de "
            "Administração de Recursos Humanos do órgão.\nValidação: Deve "
            "corresponder à matrícula informada pelo empregador no evento "
            "S-2200 ou S-2300 do respectivo contrato. Não preencher no caso de"
            " Trabalhador Sem Vínculo de Emprego/Estatutário - TSVE sem "
            "informação de matrícula no evento S-2300 ou, no caso de {remunPer"
            "Ant}(1202_dmDev_infoPerAnt_idePeriodo_ideEstab_remunPerAnt), se "
            "{remunOrgSuc}(1202_dmDev_infoPerAnt_remunOrgSuc) = [S]."
        ),
    )

    eso11_itensRemun = fields.One2many(
        "eso.11.titensremunrpps",
        "eso11_itensRemun_T_remunPer_id",
        string="itensRemun",
        xsd_type="T_itensRemun_rpps",
    )


class ESocial(models.AbstractModel):
    """S-1202 - Remuneração de Servidor vinculado ao Regime Próprio de Previd.
    Social"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtRmnRPPS = fields.Many2one(
        comodel_name="eso.11.evtrmnrpps",
        string="Evento Remuneração de Servidor vinculado",
        xsd_required=True,
        help=(
            "Evento Remuneração de Servidor vinculado ao "
            "RPPS\nDESCRICAO_COMPLETA:Evento Remuneração de Servidor vinculado"
            " ao Regime Próprio de Previdência Social.\nCHAVE_GRUPO: {Id}\nREG"
            "RA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB\nREGRA:REGRA_COMPATI"
            "B_REGIME_PREV\nREGRA:REGRA_CONTROLE_DUPLICIDADE\nREGRA:REGRA_ENVI"
            "O_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EVENTO"
            "_POSTERIOR_CAT_OBITO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:R"
            "EGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA:REGRA_REMUN_ANUAL_DEZEM"
            "BRO\nREGRA:REGRA_REMUN_CATEG_EXISTENTE_RET\nREGRA:REGRA_REMUN_IND"
            "_RETIFICACAO\nREGRA:REGRA_REMUN_JA_EXISTE_DESLIGAMENTO\nREGRA:REG"
            "RA_REMUN_PERMITE_EXCLUSAO\nREGRA:REGRA_REMUN_TRAB_EXISTENTE_RET\n"
            "REGRA:REGRA_REMUN_VALIDA_INFO_COMPLEMENTAR\nREGRA:REGRA_TSV_ATIVO"
            "_NA_DTEVENTO\nREGRA:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_VALIDA_P"
            "ERIODO_APURACAO"
        ),
    )


class EvtRmnRpps(models.AbstractModel):
    """Evento Remuneração de Servidor vinculado ao RPPS
    DESCRICAO_COMPLETA:Evento Remuneração de Servidor vinculado ao Regime Próprio
    de Previdência Social.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_COMPATIBILIDADE_CATEGORIA_CLASSTRIB
    REGRA:REGRA_COMPATIB_REGIME_PREV
    REGRA:REGRA_CONTROLE_DUPLICIDADE
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_REMUN_ANUAL_DEZEMBRO
    REGRA:REGRA_REMUN_CATEG_EXISTENTE_RET
    REGRA:REGRA_REMUN_IND_RETIFICACAO
    REGRA:REGRA_REMUN_JA_EXISTE_DESLIGAMENTO
    REGRA:REGRA_REMUN_PERMITE_EXCLUSAO
    REGRA:REGRA_REMUN_TRAB_EXISTENTE_RET
    REGRA:REGRA_REMUN_VALIDA_INFO_COMPLEMENTAR
    REGRA:REGRA_TSV_ATIVO_NA_DTEVENTO
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_PERIODO_APURACAO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtrmnrpps"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventofolhaopp",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_folha_opp",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregadorcnpj",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador_cnpj",
    )

    eso11_ideTrabalhador = fields.Many2one(
        comodel_name="eso.11.idetrabalhador",
        string="Identificação do trabalhador",
        xsd_required=True,
        help="Identificação do trabalhador.\nCHAVE_GRUPO: {cpfTrab*}",
    )

    eso11_dmDev = fields.One2many(
        "eso.11.dmdev",
        "eso11_dmDev_evtRmnRPPS_id",
        string="Demonstrativo de valores devidos",
        help=(
            "Demonstrativo de valores devidos ao "
            "trabalhador\nDESCRICAO_COMPLETA:Identificação de cada um dos "
            "demonstrativos de valores devidos ao trabalhador.\nCHAVE_GRUPO: "
            "{ideDmDev}\nREGRA:REGRA_DEMONSTRATIVO"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class IdeTrabalhador(models.AbstractModel):
    """Identificação do trabalhador.
    CHAVE_GRUPO: {cpfTrab*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.idetrabalhador"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.IdeTrabalhador"

    eso11_cpfTrab = fields.Char(
        string="cpfTrab", xsd_required=True, xsd_type="TS_cpfRemun"
    )

    eso11_infoComplem = fields.Many2one(
        comodel_name="eso.11.infocomplem",
        string="Informações complementares",
        help=(
            "Informações complementares de identificação do "
            "trabalhador\nDESCRICAO_COMPLETA:Grupo preenchido quando o evento "
            "de remuneração se referir a trabalhador cuja categoria não está "
            "sujeita ao evento de admissão ou ao evento TSVE - Início, bem "
            "como para informar remuneração devida pelo órgão sucessor a "
            "servidor desligado ainda no sucedido. No caso das categorias em "
            "que o evento TSVE - Início for opcional, o preenchimento do grupo"
            " somente é exigido se não existir o respectivo evento. As "
            "informações complementares são necessárias para correta "
            "identificação do trabalhador.\nCONDICAO_GRUPO: O ((se o "
            "trabalhador não tiver nenhum cadastro no RET) OU (se "
            "{remunOrgSuc}(1202_dmDev_infoPerAnt_remunOrgSuc) = [S])); N (se o"
            " trabalhador tiver cadastro ativo no RET); OC (nos demais casos)"
        ),
    )


class InfoComplem(models.AbstractModel):
    """Informações complementares de identificação do trabalhador
    DESCRICAO_COMPLETA:Grupo preenchido quando o evento de remuneração se referir a
    trabalhador cuja categoria não está sujeita ao evento de admissão ou ao
    evento TSVE - Início, bem como para informar remuneração devida pelo órgão
    sucessor a servidor desligado ainda no sucedido. No caso das categorias em
    que o evento TSVE - Início for opcional, o preenchimento do grupo somente é
    exigido se não existir o respectivo evento. As informações complementares
    são necessárias para correta identificação do trabalhador.
    CONDICAO_GRUPO: O ((se o trabalhador não tiver nenhum cadastro no RET) OU (se
    {remunOrgSuc}(1202_dmDev_infoPerAnt_remunOrgSuc) = [S])); N (se o
    trabalhador tiver cadastro ativo no RET); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocomplem"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.IdeTrabalhador.InfoComplem"

    eso11_nmTrab = fields.Char(string="nmTrab", xsd_required=True, xsd_type="TS_nmTrab")

    eso11_dtNascto = fields.Date(
        string="dtNascto", xsd_required=True, xsd_type="TS_dtNascto"
    )

    eso11_sucessaoVinc = fields.Many2one(
        comodel_name="eso.11.sucessaovinc",
        string="Grupo de informações da sucessão",
        help=(
            "Grupo de informações da sucessão de vínculo.\nCONDICAO_GRUPO: O "
            "(se {remunOrgSuc}(1202_dmDev_infoPerAnt_remunOrgSuc) = [S]); N "
            "(nos demais casos)"
        ),
    )


class SucessaoVinc(models.AbstractModel):
    """Grupo de informações da sucessão de vínculo.
    CONDICAO_GRUPO: O (se {remunOrgSuc}(1202_dmDev_infoPerAnt_remunOrgSuc) = [S]);
    N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.sucessaovinc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.IdeTrabalhador.InfoComplem.SucessaoVinc"

    eso11_cnpjOrgaoAnt = fields.Char(
        string="CNPJ do órgão público anterior",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do órgão público anterior.\nValidação: Deve ser um CNPJ "
            "válido e diferente da inscrição do declarante, considerando as "
            "particularidades aplicadas à informação de CNPJ de órgão público "
            "em S-1000. Além disso, deve possuir 14 (catorze) algarismos e ser"
            " diferente do CNPJ base do órgão público declarante (exceto se "
            "{ideEmpregador/nrInsc}(1202_ideEmpregador_nrInsc) tiver 14 "
            "(catorze) algarismos) e dos estabelecimentos informados através "
            "do evento S-1005."
        ),
    )

    eso11_matricAnt = fields.Char(
        string="Matrícula do trabalhador",
        xsd_type="TS_matricAnt",
        help="Matrícula do trabalhador no órgão público anterior.",
    )

    eso11_dtExercicio = fields.Date(
        string="a data de exercício do servidor",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data de exercício do servidor. No caso de transferência do "
            "servidor, deve ser preenchida a data inicial do vínculo no "
            "primeiro órgão público (data de início do vínculo)."
        ),
    )

    eso11_observacao = fields.Char(string="observacao", xsd_type="TS_observacao")


class DmDev(models.AbstractModel):
    """Demonstrativo de valores devidos ao trabalhador
    DESCRICAO_COMPLETA:Identificação de cada um dos demonstrativos de valores
    devidos ao trabalhador.
    CHAVE_GRUPO: {ideDmDev}
    REGRA:REGRA_DEMONSTRATIVO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dmdev"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.DmDev"

    eso11_ideDmDev = fields.Char(
        string="Identificador atribuído",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Identificador atribuído pelo órgão público para o demonstrativo "
            "de valores devidos ao trabalhador. O ente público pode preencher "
            "este campo utilizando-se de um identificador padrão para todos os"
            " trabalhadores; no entanto, havendo mais de um demonstrativo "
            "relativo a uma mesma competência, devem ser utilizados "
            "identificadores diferentes para cada um dos "
            "demonstrativos.\nValidação: Deve ser um identificador único "
            "dentro do mesmo {perApur}(1202_ideEvento_perApur) para cada um "
            "dos demonstrativos do "
            "trabalhador.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_codCateg = fields.Char(
        string="codCateg", xsd_required=True, xsd_type="TS_codCateg"
    )

    eso11_indRRA = fields.Selection(TS_INDRRA, string="indRRA", xsd_type="TS_indRRA")

    eso11_infoRRA = fields.Many2one(
        comodel_name="eso.11.tinforra", string="infoRRA", xsd_type="T_infoRRA"
    )

    eso11_infoPerApur = fields.Many2one(
        comodel_name="eso.11.infoperapur",
        string="Informações relativas ao período",
        help=(
            "Informações relativas ao período de apuração.\nCONDICAO_GRUPO: O "
            "(se não existir o grupo {infoPerAnt}(1202_dmDev_infoPerAnt)); OC "
            "(nos demais casos)"
        ),
    )

    eso11_infoPerAnt = fields.Many2one(
        comodel_name="eso.11.infoperant",
        string="Informações relativas",
        help=(
            "Informações relativas a períodos "
            "anteriores\nDESCRICAO_COMPLETA:Grupo destinado às informações "
            "de:\na) remuneração relativa a diferenças de vencimento "
            "provenientes de disposições legais;\nb) verbas de natureza "
            "salarial ou não salarial devidas após o desligamento;\nc) "
            "decisões administrativas ou judiciais relativas a diferenças de "
            "remuneração.\nOBS.: As informações previstas acima podem se "
            "referir ao período de apuração definido em "
            "{perApur}(1202_ideEvento_perApur) ou a períodos anteriores a "
            "{perApur}(1202_ideEvento_perApur).\nCONDICAO_GRUPO: O (se não "
            "existir o grupo {infoPerApur}(1202_dmDev_infoPerApur) e "
            "{indApuracao}(1202_ideEvento_indApuracao) = [1]); N (se "
            "{indApuracao}(1202_ideEvento_indApuracao) = [2]); OC (nos demais "
            "casos)"
        ),
    )


class InfoPerApur(models.AbstractModel):
    """Informações relativas ao período de apuração.
    CONDICAO_GRUPO: O (se não existir o grupo {infoPerAnt}(1202_dmDev_infoPerAnt));
    OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperapur"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.DmDev.InfoPerApur"

    eso11_ideEstab = fields.One2many(
        "eso.11.infoperapur_ideestab",
        "eso11_ideEstab_infoPerApur_id",
        string="Identificação da unidade",
        help=(
            "Identificação da unidade do órgão "
            "público\nDESCRICAO_COMPLETA:Identificação da unidade do órgão "
            "público na qual o servidor possui remuneração.\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}"
        ),
    )


class InfoPerApurIdeEstab(models.AbstractModel):
    """Identificação da unidade do órgão público
    DESCRICAO_COMPLETA:Identificação da unidade do órgão público na qual o servidor
    possui remuneração.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperapur_ideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.DmDev.InfoPerApur.IdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição da unidade",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help="número de inscrição da unidade do órgão público.",
    )

    eso11_remunPerApur = fields.One2many(
        "eso.11.tremunper",
        "eso11_remunPerApur_ideEstab_id",
        string="Remuneração do trabalhador",
        xsd_type="T_remunPer",
        help=(
            "Remuneração do trabalhador\nDESCRICAO_COMPLETA:Informações "
            "relativas à remuneração do trabalhador no período de "
            "apuração.\nCHAVE_GRUPO: {matricula}"
        ),
    )


class InfoPerAnt(models.AbstractModel):
    """Informações relativas a períodos anteriores
    DESCRICAO_COMPLETA:Grupo destinado às informações de:
    a) remuneração relativa a diferenças de vencimento provenientes de disposições
    legais;
    b) verbas de natureza salarial ou não salarial devidas após o desligamento;
    c) decisões administrativas ou judiciais relativas a diferenças de remuneração.
    OBS.: As informações previstas acima podem se referir ao período de apuração
    definido em {perApur}(1202_ideEvento_perApur) ou a períodos anteriores a
    {perApur}(1202_ideEvento_perApur).
    CONDICAO_GRUPO: O (se não existir o grupo {infoPerApur}(1202_dmDev_infoPerApur)
    e {indApuracao}(1202_ideEvento_indApuracao) = [1]); N (se
    {indApuracao}(1202_ideEvento_indApuracao) = [2]); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoperant"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.DmDev.InfoPerAnt"

    eso11_remunOrgSuc = fields.Selection(
        TS_SIM_NAO,
        string="Indicar se a remuneração é relativa",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se a remuneração é relativa a verbas de natureza salarial"
            " ou não salarial devidas pelo órgão sucessor a servidor desligado"
            " ainda no sucedido."
        ),
    )

    eso11_idePeriodo = fields.One2many(
        "eso.11.ideperiodo",
        "eso11_idePeriodo_infoPerAnt_id",
        string="Identificação do período de referência",
        help=(
            "Identificação do período de referência da "
            "remuneração\nDESCRICAO_COMPLETA:Identificação do período ao qual "
            "se referem as diferenças de remuneração.\nCHAVE_GRUPO: {perRef}"
        ),
    )


class IdePeriodo(models.AbstractModel):
    """Identificação do período de referência da remuneração
    DESCRICAO_COMPLETA:Identificação do período ao qual se referem as diferenças de
    remuneração.
    CHAVE_GRUPO: {perRef}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.DmDev.InfoPerAnt.IdePeriodo"

    eso11_perRef = fields.Char(
        string="período ao qual se refere o complemento",
        xsd_required=True,
        xsd_type="TS_periodo_mensal",
        help=(
            "período ao qual se refere o complemento de remuneração, no "
            "formato AAAA-MM.\nValidação: Deve ser igual ou anterior ao "
            "período de apuração informado em "
            "{perApur}(/ideEvento_perApur).\nDeve ser informado no formato "
            "AAAA-MM."
        ),
    )

    eso11_ideEstab = fields.One2many(
        "eso.11.ideperiodo_ideestab",
        "eso11_ideEstab_idePeriodo_id",
        string="Identificação da unidade",
        help=(
            "Identificação da unidade do órgão "
            "público\nDESCRICAO_COMPLETA:Identificação da unidade do órgão "
            "público na qual o servidor possui remuneração.\nCHAVE_GRUPO: "
            "{tpInsc}, {nrInsc}"
        ),
    )


class IdePeriodoIdeEstab(models.AbstractModel):
    """Identificação da unidade do órgão público
    DESCRICAO_COMPLETA:Identificação da unidade do órgão público na qual o servidor
    possui remuneração.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideperiodo_ideestab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtRmnRpps.DmDev.InfoPerAnt.IdePeriodo.IdeEstab"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_1, string="tpInsc", xsd_required=True, xsd_type="TS_tpInsc_1"
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição da unidade",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help="número de inscrição da unidade do órgão público.",
    )

    eso11_remunPerAnt = fields.One2many(
        "eso.11.tremunper",
        "eso11_remunPerAnt_ideEstab_id",
        string="Remuneração do trabalhador",
        xsd_type="T_remunPer",
        help=(
            "Remuneração do trabalhador\nDESCRICAO_COMPLETA:Informações "
            "relativas à remuneração do trabalhador em períodos "
            "anteriores.\nCHAVE_GRUPO: {matricula}"
        ),
    )
