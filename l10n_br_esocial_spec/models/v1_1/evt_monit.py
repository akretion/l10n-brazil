# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSUF,
    TIdeEmpregador,
    TIdeEventoTrab,
    TIdeVinculoSst,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtMonit/v_S_01_01_00"

"Resultado do ASO."
ASO_RESASO = [
  ("1", "Apto"),
  ("2", "Inapto"),
]

"""Tipo do exame médico ocupacional.
    Validação: Se informado [0], não pode existir outro evento S-2220 para o mesmo
    contrato com {dtAso}(./aso_dtAso) anterior."""
EXMEDOCUP_TPEXAMEOCUP = [
  ("0", "Exame médico admissional"),
  ("1", "Exame médico periódico, conforme Norma Regulamentadora 07 - NR-07 e/ou planejamento do Programa de Controle Médico de Saúde Ocupacional - PCMSO"),
  ("2", "Exame médico de retorno ao trabalho"),
  ("3", "Exame médico de mudança de função ou de mudança de risco ocupacional"),
  ("4", "Exame médico de monitoração pontual, não enquadrado nos demais casos"),
  ("9", "Exame médico demissional"),
]

"Indicação dos resultados."
EXAME_INDRESULT = [
  ("1", "Normal"),
  ("2", "Alterado"),
  ("3", "Estável"),
  ("4", "Agravamento"),
]

"""Ordem do exame.
    Validação: Preenchimento obrigatório se {procRealizado}(./procRealizado) =
    [0281]."""
EXAME_ORDEXAME = [
  ("1", "Inicial"),
  ("2", "Sequencial"),
]


class ESocial(models.AbstractModel):
    "S-2220 - Monitoramento da Saúde do Trabalhador"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtMonit = fields.Many2one(
        comodel_name="eso.11.evtmonit",
        string="Evento Monitoramento da Saúde",
        xsd_required=True,
        help=(
            "Evento Monitoramento da Saúde do Trabalhador.\nCHAVE_GRUPO: {Id}\"
            "nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nR"
            "EGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG\nREGRA:REGRA_EVENTO_POSTE"
            "RIOR_CAT_OBITO\nREGRA:REGRA_EXISTE_EVENTO_TSV_INICIO\nREGRA:REGRA"
            "_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_EXISTE_VINCULO\nREGRA:REGRA_"
            "EXTEMP_REINTEGRACAO\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_RETIF"
            "ICA_MESMO_VINCULO"
        )
    )
    

class EvtMonit(models.AbstractModel):
    """Evento Monitoramento da Saúde do Trabalhador.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_EXT_SEM_IMPACTO_FOPAG
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXISTE_EVENTO_TSV_INICIO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXISTE_VINCULO
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_MESMO_VINCULO"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtmonit"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtMonit"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador"
    )
    
    eso11_ideVinculo = fields.Many2one(
        comodel_name="eso.11.tidevinculosst",
        string="ideVinculo",
        xsd_required=True,
        xsd_type="T_ideVinculo_sst"
    )
    
    eso11_exMedOcup = fields.Many2one(
        comodel_name="eso.11.exmedocup",
        string="Informações do exame médico ocupacional",
        xsd_required=True,
        help=(
            "Informações do exame médico ocupacional.\nCHAVE_GRUPO: "
            "{tpExameOcup*}"
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id"
    )
    

class ExMedOcup(models.AbstractModel):
    """Informações do exame médico ocupacional.
    CHAVE_GRUPO: {tpExameOcup*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.exmedocup"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtMonit.ExMedOcup"


    
    eso11_tpExameOcup = fields.Selection(EXMEDOCUP_TPEXAMEOCUP,
        string="tpExameOcup",
        xsd_required=True
    )
    
    eso11_aso = fields.Many2one(
        comodel_name="eso.11.aso",
        string="ASO",
        xsd_required=True,
        help=(
            "ASO\nDESCRICAO_COMPLETA:Detalhamento das informações do Atestado "
            "de Saúde Ocupacional - ASO.\nCHAVE_GRUPO: {dtAso*}"
        )
    )
    
    eso11_respMonit = fields.Many2one(
        comodel_name="eso.11.respmonit",
        string="Informações sobre",
        help=(
            "Informações sobre o médico responsável/coordenador do "
            "PCMSO.\nCONDICAO_GRUPO: OC"
        )
    )
    

class Aso(models.AbstractModel):
    """ASO
    DESCRICAO_COMPLETA:Detalhamento das informações do Atestado de Saúde
    Ocupacional - ASO.
    CHAVE_GRUPO: {dtAso*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.aso"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtMonit.ExMedOcup.Aso"


    
    eso11_dtAso = fields.Date(
        string="Data de emissão do ASO",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de emissão do ASO.\nValidação: Deve ser uma data válida, "
            "igual ou anterior à data atual e igual ou posterior à data de "
            "início da obrigatoriedade deste evento para o empregador no "
            "eSocial. Se {tpExameOcup}(../tpExameOcup) for diferente de [0], "
            "também deve ser igual ou posterior à data de admissão/exercício "
            "ou de início."
        )
    )
    
    eso11_resAso = fields.Selection(ASO_RESASO,
        string="resAso"
    )
    
    eso11_exame = fields.One2many("eso.11.exame", "eso11_exame_aso_id",
        string="Avaliações clínicas",
        help=(
            "Avaliações clínicas e exames complementares "
            "realizados\nDESCRICAO_COMPLETA:Grupo que detalha as avaliações "
            "clínicas e os exames complementares porventura realizados pelo "
            "trabalhador em virtude do determinado nos Anexos da NR-07, além "
            "de outros solicitados pelo médico e os referentes ao "
            "ASO.\nCHAVE_GRUPO: {dtExm}, {procRealizado}"
        )
    )
    
    eso11_medico = fields.Many2one(
        comodel_name="eso.11.medico",
        string="Informações sobre o médico emitente",
        xsd_required=True,
        help="Informações sobre o médico emitente do ASO."
    )
    

class Exame(models.AbstractModel):
    """Avaliações clínicas e exames complementares realizados
    DESCRICAO_COMPLETA:Grupo que detalha as avaliações clínicas e os exames
    complementares porventura realizados pelo trabalhador em virtude do
    determinado nos Anexos da NR-07, além de outros solicitados pelo médico e
    os referentes ao ASO.
    CHAVE_GRUPO: {dtExm}, {procRealizado}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.exame"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtMonit.ExMedOcup.Aso.Exame"


    
    eso11_dtExm = fields.Date(
        string="Data do exame realizado",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data do exame realizado.\nValidação: Deve ser uma data válida, "
            "igual ou anterior à data do ASO informada em {dtAso}(../dtAso)."
        )
    )
    
    eso11_procRealizado = fields.Char(
        string="procRealizado",
        xsd_required=True
    )
    
    eso11_obsProc = fields.Char(
        string="Observação sobre",
        xsd_type="TS_texto_999",
        help=(
            "Observação sobre o procedimento diagnóstico "
            "realizado.\nValidação: Preenchimento obrigatório se "
            "{procRealizado}(./procRealizado) = [0583, 0998, 0999, 1128, 1230,"
            " 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 9999]."
        )
    )
    
    eso11_ordExame = fields.Selection(EXAME_ORDEXAME,
        string="ordExame"
    )
    
    eso11_indResult = fields.Selection(EXAME_INDRESULT,
        string="indResult"
    )
    

class Medico(models.AbstractModel):
    "Informações sobre o médico emitente do ASO."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.medico"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtMonit.ExMedOcup.Aso.Medico"


    
    eso11_nmMed = fields.Char(
        string="o nome do médico emitente do ASO",
        xsd_required=True,
        xsd_type="TS_nome"
    )
    
    eso11_nrCRM = fields.Char(
        string="Número de inscrição do médico emitente",
        xsd_required=True,
        xsd_type="TS_crm",
        help=(
            "Número de inscrição do médico emitente do ASO no Conselho "
            "Regional de Medicina - CRM."
        )
    )
    
    eso11_ufCRM = fields.Selection(TS_UF,
        string="a sigla da Unidade da Federação",
        xsd_required=True,
        xsd_type="TS_uf",
        help="a sigla da Unidade da Federação - UF de expedição do CRM."
    )
    

class RespMonit(models.AbstractModel):
    """Informações sobre o médico responsável/coordenador do PCMSO.
    CONDICAO_GRUPO: OC"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.respmonit"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtMonit.ExMedOcup.RespMonit"


    
    eso11_cpfResp = fields.Char(
        string="o CPF do médico responsável/coordenador",
        xsd_type="TS_cpf",
        help=(
            "o CPF do médico responsável/coordenador do PCMSO.\nValidação: Se "
            "informado, deve ser um CPF válido."
        )
    )
    
    eso11_nmResp = fields.Char(
        string="o nome do médico responsável/coordenador",
        xsd_required=True,
        xsd_type="TS_nome",
        help="o nome do médico responsável/coordenador do PCMSO."
    )
    
    eso11_nrCRM = fields.Char(
        string="Número de inscrição",
        xsd_required=True,
        xsd_type="TS_crm",
        help=(
            "Número de inscrição do médico responsável/coordenador do PCMSO no"
            " CRM."
        )
    )
    
    eso11_ufCRM = fields.Selection(TS_UF,
        string="a sigla da UF de expedição do CRM",
        xsd_required=True,
        xsd_type="TS_uf"
    )