# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TIdeBeneficio,
    TIdeEmpregadorCnpj,
    TIdeEventoTrabPj,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtCdBenTerm/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-2420 - Cadastro de Benefício - Entes Públicos - Término"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtCdBenTerm = fields.Many2one(
        comodel_name="eso.11.evtcdbenterm",
        string="Evento Cadastro de Benefício",
        xsd_required=True,
        help=(
            "Evento Cadastro de Benefício - Término\nDESCRICAO_COMPLETA:Evento"
            " Cadastro de Benefício - Entes Públicos - Término.\nCHAVE_GRUPO: "
            "{Id}\nREGRA:REGRA_BENEFICIO_ATIVO_NA_DTEVENTO\nREGRA:REGRA_ENVIO_"
            "PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EXISTE_I"
            "NFO_EMPREGADOR\nREGRA:REGRA_EXTEMP_REATIVACAO\nREGRA:REGRA_MUDANC"
            "A_CPF\nREGRA:REGRA_RETIFICA_MESMO_BENEFICIO\nREGRA:REGRA_VALIDA_C"
            "NPJ"
        ),
    )


class EvtCdBenTerm(models.AbstractModel):
    """Evento Cadastro de Benefício - Término
    DESCRICAO_COMPLETA:Evento Cadastro de Benefício - Entes Públicos - Término.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_BENEFICIO_ATIVO_NA_DTEVENTO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_REATIVACAO
    REGRA:REGRA_MUDANCA_CPF
    REGRA:REGRA_RETIFICA_MESMO_BENEFICIO
    REGRA:REGRA_VALIDA_CNPJ"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcdbenterm"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenTerm"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabpj",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_PJ",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregadorcnpj",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador_cnpj",
    )

    eso11_ideBeneficio = fields.Many2one(
        comodel_name="eso.11.tidebeneficio",
        string="ideBeneficio",
        xsd_required=True,
        xsd_type="T_ideBeneficio",
    )

    eso11_infoBenTermino = fields.Many2one(
        comodel_name="eso.11.infobentermino",
        string="Informações da cessação do benefício",
        xsd_required=True,
        help=(
            "Informações da cessação do benefício.\nCHAVE_GRUPO: " "{dtTermBeneficio*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoBenTermino(models.AbstractModel):
    """Informações da cessação do benefício.
    CHAVE_GRUPO: {dtTermBeneficio*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobentermino"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenTerm.InfoBenTermino"

    eso11_dtTermBeneficio = fields.Date(
        string="Data de cessação do benefício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de cessação do benefício.\nValidação: Deve ser igual ou "
            "anterior à data atual. No caso de benefício reativado, também "
            "deve ser uma data igual ou posterior a "
            "{dtEfetReativ}(2418_infoReativ_dtEfetReativ) do evento S-2418."
        ),
    )

    eso11_mtvTermino = fields.Char(string="mtvTermino", xsd_required=True)

    eso11_cnpjOrgaoSuc = fields.Char(
        string="CNPJ do órgão público sucessor",
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do órgão público sucessor.\nValidação: Preenchimento "
            "obrigatório e exclusivo se {mtvTermino}(./mtvTermino) = "
            "[09].\nDeve ser um CNPJ válido e diferente da inscrição do "
            "declarante, considerando as particularidades aplicadas à "
            "informação de CNPJ de órgão público em S-1000. Além disso, deve "
            "possuir 14 (catorze) algarismos e ser diferente do CNPJ base do "
            "órgão público declarante (exceto se "
            "{ideEmpregador/nrInsc}(2420_ideEmpregador_nrInsc) tiver 14 "
            "(catorze) algarismos) e dos estabelecimentos informados através "
            "do evento S-1005."
        ),
    )

    eso11_novoCPF = fields.Char(
        string="o novo CPF do beneficiário",
        xsd_type="TS_cpf",
        help=(
            "o novo CPF do beneficiário.\nValidação: Preenchimento obrigatório"
            " e exclusivo se {mtvTermino}(./mtvTermino) = [10].\nDeve ser um "
            "CPF válido e diferente do antigo CPF do beneficiário."
        ),
    )
