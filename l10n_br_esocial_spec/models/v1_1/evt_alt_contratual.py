# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSNATATIVIDADE,
    TSSIMNAO,
    TSTPCONTR,
    TSTPPLANRP,
    TSTPREGJOR,
    TSTPREGPREV,
    TAlvaraJudicial,
    TAprend,
    TEnderecoBrasil,
    THorContratual,
    TIdeEmpregador,
    TIdeEventoTrab,
    TIdeVinculo,
    TLocalTrabGeral,
    TRemuneracao,
    TTreiCap,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtAltContratual/v_S_01_01_00"


class ESocial(models.AbstractModel):
    "S-2206 - Alteração de Contrato de Trabalho/Relação Estatutária"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtAltContratual = fields.Many2one(
        comodel_name="eso.11.evtaltcontratual",
        string="Evento Alteração de Contrato",
        xsd_required=True,
        help=(
            "Evento Alteração de Contrato de Trabalho/Relação "
            "Estatutária.\nCHAVE_GRUPO: {Id}\nREGRA:REGRA_ADMISSAO_VALIDA_DURA"
            "CAO_CONTRATO\nREGRA:REGRA_ALTERA_CATEG\nREGRA:REGRA_EMPREGADO_DOM"
            "ESTICO\nREGRA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EX"
            "TEMP\nREGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO\nREGRA:REGRA_EXISTE_"
            "INFO_EMPREGADOR\nREGRA:REGRA_EXTEMP_DOMESTICO\nREGRA:REGRA_EXTEMP"
            "_REINTEGRACAO\nREGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB\nREGRA:R"
            "EGRA_MESMO_PROCEMI\nREGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REG"
            "RA_VALIDA_TRABALHADOR_BASE_CPF\nREGRA:REGRA_VINCULO_ATIVO_NA_DTEV"
            "ENTO"
        ),
    )


class EvtAltContratual(models.AbstractModel):
    """Evento Alteração de Contrato de Trabalho/Relação Estatutária.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ADMISSAO_VALIDA_DURACAO_CONTRATO
    REGRA:REGRA_ALTERA_CATEG
    REGRA:REGRA_EMPREGADO_DOMESTICO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_DOMESTICO
    REGRA:REGRA_EXTEMP_REINTEGRACAO
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_VALIDA_TRABALHADOR_BASE_CPF
    REGRA:REGRA_VINCULO_ATIVO_NA_DTEVENTO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtaltcontratual"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltContratual"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrab",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideVinculo = fields.Many2one(
        comodel_name="eso.11.tidevinculo",
        string="ideVinculo",
        xsd_required=True,
        xsd_type="T_ideVinculo",
    )

    eso11_altContratual = fields.Many2one(
        comodel_name="eso.11.altcontratual",
        string="Alteração de dados contratuais",
        xsd_required=True,
        help=(
            "Alteração de dados contratuais.\nCHAVE_GRUPO: {dtAlteracao*}, " "{dtEf*}"
        ),
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class AltContratual(models.AbstractModel):
    """Alteração de dados contratuais.
    CHAVE_GRUPO: {dtAlteracao*}, {dtEf*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.altcontratual"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltContratual.AltContratual"

    eso11_dtAlteracao = fields.Date(
        string="dtAlteracao", xsd_required=True, xsd_type="TS_dtAlteracao"
    )

    eso11_dtEf = fields.Date(
        string="Data dos efeitos remuneratórios",
        xsd_type="xs:date",
        help=(
            "Data dos efeitos remuneratórios da alteração contratual.\nSe a "
            "alteração foi fruto de lei, acordo coletivo, convenção coletiva "
            "ou sentença normativa, informar a data a partir da qual a "
            "alteração produz efeitos remuneratórios.\nValidação: Deve ser uma"
            " data válida, igual ou posterior à data de admissão."
        ),
    )

    eso11_dscAlt = fields.Char(string="dscAlt")

    eso11_vinculo = fields.Many2one(
        comodel_name="eso.11.vinculo",
        string="Informações do vinculo",
        xsd_required=True,
        help=(
            "Informações do vinculo.\nDESCRICAO_COMPLETA:Grupo de informações "
            "do vínculo trabalhista."
        ),
    )


class Vinculo(models.AbstractModel):
    """Informações do vinculo.
    DESCRICAO_COMPLETA:Grupo de informações do vínculo trabalhista."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.vinculo"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltContratual.AltContratual.Vinculo"

    eso11_tpRegPrev = fields.Selection(
        TS_TPREGPREV, string="tpRegPrev", xsd_required=True, xsd_type="TS_tpRegPrev"
    )

    eso11_infoRegimeTrab = fields.Many2one(
        comodel_name="eso.11.inforegimetrab",
        string="Informações do regime trabalhista",
        help=(
            "Informações do regime trabalhista.\nCONDICAO_GRUPO: N (se "
            "{tpRegPrev}(2206_altContratual_vinculo_tpRegPrev) = [1] e "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [2]); O (nos "
            "demais casos)"
        ),
    )

    eso11_infoContrato = fields.Many2one(
        comodel_name="eso.11.infocontrato",
        string="Informações do contrato de trabalho",
        xsd_required=True,
    )


class InfoRegimeTrab(models.AbstractModel):
    """Informações do regime trabalhista.
    CONDICAO_GRUPO: N (se {tpRegPrev}(2206_altContratual_vinculo_tpRegPrev) = [1] e
    {tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [2]); O (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.inforegimetrab"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoRegimeTrab"

    eso11_infoCeletista = fields.Many2one(
        comodel_name="eso.11.infoceletista",
        string="Informações de trabalhador celetista",
        help=(
            "Informações de trabalhador celetista.\nCONDICAO_GRUPO: O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [1]); N (nos "
            "demais casos)"
        ),
    )

    eso11_infoEstatutario = fields.Many2one(
        comodel_name="eso.11.infoestatutario",
        string="Informações de trabalhador estatutário",
        help=(
            "Informações de trabalhador estatutário.\nCONDICAO_GRUPO: O (se "
            "{tpRegPrev}(2206_altContratual_vinculo_tpRegPrev) = [2] e "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [2]); N (nos "
            "demais casos)"
        ),
    )


class InfoCeletista(models.AbstractModel):
    """Informações de trabalhador celetista.
    CONDICAO_GRUPO: O (se {tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [1]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoceletista"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoRegimeTrab.InfoCeletista"
    )

    eso11_tpRegJor = fields.Selection(
        TS_TPREGJOR, string="tpRegJor", xsd_required=True, xsd_type="TS_tpRegJor"
    )

    eso11_natAtividade = fields.Selection(
        TS_NATATIVIDADE,
        string="natAtividade",
        xsd_required=True,
        xsd_type="TS_natAtividade",
    )

    eso11_dtBase = fields.Char(string="dtBase", xsd_type="TS_dtBase")

    eso11_cnpjSindCategProf = fields.Char(
        string="cnpjSindCategProf", xsd_required=True, xsd_type="TS_cnpjSindCategProf"
    )

    eso11_trabTemporario = fields.Many2one(
        comodel_name="eso.11.trabtemporario",
        string="Dados sobre trabalho temporário",
        help=(
            "Dados sobre trabalho temporário\nDESCRICAO_COMPLETA:Dados sobre "
            "trabalho temporário. Preenchimento obrigatório no caso de "
            "prorrogação de contrato de trabalhador "
            "temporário.\nCONDICAO_GRUPO: OC (se "
            "{codCateg}(2206_altContratual_vinculo_infoContrato_codCateg) = "
            "[106]); N (nos demais casos)"
        ),
    )

    eso11_aprend = fields.Many2one(
        comodel_name="eso.11.taprend",
        string="Informações relacionadas ao aprendiz",
        xsd_type="T_aprend",
        help=(
            "Informações relacionadas ao "
            "aprendiz\nDESCRICAO_COMPLETA:Informações para identificação do "
            "empregador contratante de aprendiz.\nPreenchimento obrigatório no"
            " caso de contratação de aprendiz por entidade educativa sem fins "
            "lucrativos que tenha por objetivo a assistência ao adolescente e "
            "à educação profissional (art. 430, inciso II, CLT) ou por "
            "entidade de prática desportiva filiada ao Sistema Nacional do "
            "Desporto ou a Sistema de Desporto de Estado, do Distrito Federal "
            "ou de Município (art. 430, inciso III, CLT).\nCONDICAO_GRUPO: OC "
            "(se {codCateg}(2206_altContratual_vinculo_infoContrato_codCateg) "
            "= [103]); N (nos demais casos)"
        ),
    )


class TrabTemporario(models.AbstractModel):
    """Dados sobre trabalho temporário
    DESCRICAO_COMPLETA:Dados sobre trabalho temporário. Preenchimento obrigatório
    no caso de prorrogação de contrato de trabalhador temporário.
    CONDICAO_GRUPO: OC (se
    {codCateg}(2206_altContratual_vinculo_infoContrato_codCateg) = [106]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.trabtemporario"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoRegimeTrab.InfoCeletista.TrabTemporario"

    eso11_justProrr = fields.Char(
        string="Descrever a justificativa",
        xsd_required=True,
        xsd_type="TS_texto_999",
        help=(
            "Descrever a justificativa para a prorrogação do contrato de "
            "trabalho temporário."
        ),
    )


class InfoEstatutario(models.AbstractModel):
    """Informações de trabalhador estatutário.
    CONDICAO_GRUPO: O (se {tpRegPrev}(2206_altContratual_vinculo_tpRegPrev) = [2] e
    {tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [2]); N (nos demais
    casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infoestatutario"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoRegimeTrab.InfoEstatutario"
    )

    eso11_tpPlanRP = fields.Selection(
        TS_TPPLANRP, string="tpPlanRP", xsd_required=True, xsd_type="TS_tpPlanRP"
    )

    eso11_indTetoRGPS = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o servidor está sujeito",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o servidor está sujeito ao teto do RGPS pela "
            "instituição do regime de previdência complementar."
        ),
    )

    eso11_indAbonoPerm = fields.Selection(
        TS_SIM_NAO,
        string="Indicar",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help="Indicar se o servidor recebe abono permanência.",
    )


class InfoContrato(models.AbstractModel):
    "Informações do contrato de trabalho."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infocontrato"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoContrato"

    eso11_nmCargo = fields.Char(
        string="nome do cargo",
        xsd_type="TS_texto_100",
        help=(
            "nome do cargo.\nValidação: O preenchimento é obrigatório, exceto "
            "se for relativo a servidor nomeado em cargo em comissão (no "
            "evento S-2200, {tpRegTrab}(2200_vinculo_tpRegTrab) = [2] e "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = "
            "[2])."
        ),
    )

    eso11_CBOCargo = fields.Char(string="CBOCargo", xsd_type="TS_CBOCargo")

    eso11_nmFuncao = fields.Char(
        string="nome da função de confiança/cargo",
        xsd_type="TS_texto_100",
        help=(
            "nome da função de confiança/cargo em comissão.\nValidação: "
            "Preenchimento obrigatório se for relativo a servidor nomeado em "
            "cargo em comissão (no evento S-2200, "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) = [2] e "
            "{tpProv}(2200_vinculo_infoRegimeTrab_infoEstatutario_tpProv) = "
            "[2])."
        ),
    )

    eso11_CBOFuncao = fields.Char(string="CBOFuncao", xsd_type="TS_CBOFuncao")

    eso11_acumCargo = fields.Selection(
        TS_SIM_NAO,
        string="Informar se o cargo",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o cargo, emprego ou função pública é "
            "acumulável.\nValidação: Preenchimento obrigatório se a natureza "
            "jurídica do declarante for igual a 1XX-X, 201-1 ou 203-8."
        ),
    )

    eso11_codCateg = fields.Char(
        string="codCateg", xsd_required=True, xsd_type="TS_codCateg"
    )

    eso11_remuneracao = fields.Many2one(
        comodel_name="eso.11.tremuneracao",
        string="Informações da remuneração",
        xsd_type="T_remuneracao",
        help=(
            "Informações da remuneração e periodicidade de "
            "pagamento.\nCONDICAO_GRUPO: O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [1]); N (nos "
            "demais casos)"
        ),
    )

    eso11_duracao = fields.Many2one(
        comodel_name="eso.11.duracao",
        string="Duração do contrato de trabalho",
        help=(
            "Duração do contrato de trabalho.\nCONDICAO_GRUPO: O (se "
            "{tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [1]); N (nos "
            "demais casos)"
        ),
    )

    eso11_localTrabalho = fields.Many2one(
        comodel_name="eso.11.localtrabalho",
        string="Informações do local de trabalho",
        xsd_required=True,
    )

    eso11_horContratual = fields.Many2one(
        comodel_name="eso.11.thorcontratual",
        string="Informações do horário contratual",
        xsd_type="T_horContratual",
        help=(
            "Informações do horário contratual do "
            "trabalhador.\nCONDICAO_GRUPO: O (se "
            "{tpRegJor}(../../infoRegimeTrab_infoCeletista_tpRegJor) = [1]); "
            "OC (nos demais casos)"
        ),
    )

    eso11_alvaraJudicial = fields.Many2one(
        comodel_name="eso.11.talvarajudicial",
        string="Dados do alvará judicial",
        xsd_type="T_alvaraJudicial",
        help=(
            "Dados do alvará judicial\nDESCRICAO_COMPLETA:Informações do "
            "alvará judicial em caso de contratação de menores de 14 anos, em "
            "qualquer categoria, e de maiores de 14 e menores de 16, em "
            "categoria diferente de 'Aprendiz'.\nCONDICAO_GRUPO: OC"
        ),
    )

    eso11_observacoes = fields.One2many(
        "eso.11.observacoes",
        "eso11_observacoes_infoContrato_id",
        string="Observações do contrato de trabalho",
        help="Observações do contrato de trabalho.\nCONDICAO_GRUPO: OC",
    )

    eso11_treiCap = fields.One2many(
        "eso.11.ttreicap",
        "eso11_treiCap_infoContrato_id",
        string="Treinamentos, capacitações",
        xsd_type="T_treiCap",
        help=(
            "Treinamentos, capacitações, exercícios simulados e outras "
            "anotações.\nDESCRICAO_COMPLETA:Treinamentos, capacitações, "
            "exercícios simulados, autorizações ou outras anotações que devam "
            "ser anotadas no registro de empregados e/ou na CTPS, por "
            "determinação de Norma Regulamentadora - NR.\nCHAVE_GRUPO: "
            "{codTreiCap}\nCONDICAO_GRUPO: OC"
        ),
    )


class Duracao(models.AbstractModel):
    """Duração do contrato de trabalho.
    CONDICAO_GRUPO: O (se {tpRegTrab}(2200_vinculo_tpRegTrab) em S-2200 = [1]); N
    (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.duracao"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoContrato.Duracao"
    )

    eso11_tpContr = fields.Selection(
        TS_TPCONTR, string="tpContr", xsd_required=True, xsd_type="TS_tpContr"
    )

    eso11_dtTerm = fields.Date(string="dtTerm", xsd_type="TS_dtTerm")

    eso11_objDet = fields.Char(string="objDet", xsd_type="TS_objDet")


class LocalTrabalho(models.AbstractModel):
    "Informações do local de trabalho."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.localtrabalho"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoContrato.LocalTrabalho"
    )

    eso11_localTrabGeral = fields.Many2one(
        comodel_name="eso.11.tlocaltrabgeral",
        string="Estabelecimento onde",
        xsd_type="T_localTrabGeral",
        help=(
            "Estabelecimento onde o trabalhador exercerá suas "
            "atividades\nDESCRICAO_COMPLETA:Estabelecimento (CNPJ, CNO, CAEPF)"
            " onde o trabalhador (exceto doméstico) exercerá suas atividades. "
            "Caso o trabalhador exerça suas atividades em instalações de "
            "terceiros, este campo deve ser preenchido com o estabelecimento "
            "do próprio empregador ao qual o trabalhador esteja "
            "vinculado.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2206_altContratual_vinculo_infoContrato_codCateg) for "
            "diferente de [104]); N (nos demais casos)"
        ),
    )

    eso11_localTempDom = fields.Many2one(
        comodel_name="eso.11.tenderecobrasil",
        string="Endereço de trabalho",
        xsd_type="T_endereco_brasil",
        help=(
            "Endereço de trabalho do trabalhador doméstico e trabalhador "
            "temporário\nDESCRICAO_COMPLETA:Grupo preenchido exclusivamente em"
            " caso de trabalhador doméstico e trabalhador temporário, "
            "indicando o endereço onde o trabalhador exerce suas "
            "atividades.\nCONDICAO_GRUPO: O (se "
            "{codCateg}(2206_altContratual_vinculo_infoContrato_codCateg) = "
            "[104, 106]); N (nos demais casos)"
        ),
    )


class Observacoes(models.AbstractModel):
    """Observações do contrato de trabalho.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.observacoes"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtAltContratual.AltContratual.Vinculo.InfoContrato.Observacoes"
    )

    eso11_observacao = fields.Char(
        string="Observação relacionada ao contrato",
        xsd_required=True,
        xsd_type="TS_observacao",
        help="Observação relacionada ao contrato de trabalho.",
    )
