# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSSIMNAO,
    TSTPPENMORTE,
    TSTPPLANRP,
    TIdeEmpregadorCnpj,
    TIdeEventoTrabPj,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtCdBenIn/v_S_01_01_00"

"""Indicar a situação do benefício no órgão declarante.
    Validação: Preenchimento obrigatório e exclusivo se {cadIni}(./cadIni) =
    [N]."""
INFOBENINICIO_INDSITBENEF = [
  ("1", "Benefício concedido pelo próprio órgão declarante"),
  ("2", "Benefício transferido de outro órgão"),
  ("3", "Mudança de CPF do beneficiário"),
]


class ESocial(models.AbstractModel):
    "S-2410 - Cadastro de Benefício - Entes Públicos - Início"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"


    
    eso11_evtCdBenIn = fields.Many2one(
        comodel_name="eso.11.evtcdbenin",
        string="Evento Cadastro de Benefício",
        xsd_required=True,
        help=(
            "Evento Cadastro de Benefício - Início\nDESCRICAO_COMPLETA:Evento "
            "Cadastro de Benefício - Entes Públicos - Início.\nCHAVE_GRUPO: {I"
            "d}\nREGRA:REGRA_BENEFICIO_VALIDA_NUMERO\nREGRA:REGRA_ENVIO_PROC_F"
            "ECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA:REGRA_EXISTE_INFO_EM"
            "PREGADOR\nREGRA:REGRA_EXTEMP_REATIVACAO\nREGRA:REGRA_MUDANCA_CPF\"
            "nREGRA:REGRA_RETIFICA_MESMO_BENEFICIO\nREGRA:REGRA_VALIDA_CNPJ"
        )
    )
    

class EvtCdBenIn(models.AbstractModel):
    """Evento Cadastro de Benefício - Início
    DESCRICAO_COMPLETA:Evento Cadastro de Benefício - Entes Públicos - Início.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_BENEFICIO_VALIDA_NUMERO
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_EXTEMP_REATIVACAO
    REGRA:REGRA_MUDANCA_CPF
    REGRA:REGRA_RETIFICA_MESMO_BENEFICIO
    REGRA:REGRA_VALIDA_CNPJ"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evtcdbenin"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn"


    
    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabpj",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_PJ"
    )
    
    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregadorcnpj",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador_cnpj"
    )
    
    eso11_beneficiario = fields.Many2one(
        comodel_name="eso.11.beneficiario",
        string="Informações do beneficiário",
        xsd_required=True,
        help="Informações do beneficiário.\nCHAVE_GRUPO: {cpfBenef*}"
    )
    
    eso11_infoBenInicio = fields.Many2one(
        comodel_name="eso.11.infobeninicio",
        string="Informações do benefício - Início",
        xsd_required=True,
        help=(
            "Informações do benefício - Início.\nCHAVE_GRUPO: {nrBeneficio*}"
        )
    )
    
    eso11_Id = fields.Char(
        string="Id",
        xsd_required=True,
        xsd_type="TS_Id"
    )
    

class Beneficiario(models.AbstractModel):
    """Informações do beneficiário.
    CHAVE_GRUPO: {cpfBenef*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.beneficiario"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.Beneficiario"


    
    eso11_cpfBenef = fields.Char(
        string="CPF do beneficiário",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "CPF do beneficiário.\nValidação: Deve observar o que segue:\na) "
            "Se {cadIni}(2410_infoBenInicio_cadIni) = [S], deve estar "
            "cadastrado no evento S-2400 com data de início igual à data de "
            "obrigatoriedade dos eventos não periódicos para o ente público no"
            " eSocial;\nb) Se {indSitBenef}(2410_infoBenInicio_indSitBenef) = "
            "[1], deve estar cadastrado no evento S-2400 com data de início "
            "igual ou anterior a "
            "{dtIniBeneficio}(2410_infoBenInicio_dtIniBeneficio) (ou a "
            "{dtPublic}(2410_infoBenInicio_dtPublic), caso este campo tenha "
            "sido informado);\nc) Se "
            "{indSitBenef}(2410_infoBenInicio_indSitBenef) = [2, 3], deve "
            "estar cadastrado no evento S-2400 com data de início igual ou "
            "anterior a {dtTransf}(2410_infoBenInicio_sucessaoBenef_dtTransf) "
            "ou {dtAltCPF}(2410_infoBenInicio_mudancaCPF_dtAltCPF), "
            "respectivamente."
        )
    )
    
    eso11_matricula = fields.Char(
        string="Matrícula do servidor/militar constante",
        xsd_type="TS_codigo_esocial",
        help=(
            "Matrícula do servidor/militar constante no Sistema de "
            "Administração de Recursos Humanos do órgão cujo vínculo deu "
            "ensejo ao benefício. No caso de pensão por morte, informar a "
            "matrícula do instituidor da pensão.\nValidação: Informação "
            "obrigatória se {cadIni}(2410_infoBenInicio_cadIni) = [N] e "
            "{tpBeneficio}(2410_infoBenInicio_dadosBeneficio_tpBeneficio) "
            "pertencer ao grupo [01, 02, 03, 04, 05, 06, 11] da Tabela "
            "25.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        )
    )
    
    eso11_cnpjOrigem = fields.Char(
        string="o CNPJ do órgão público responsável",
        xsd_type="TS_cnpj",
        help=(
            "o CNPJ do órgão público responsável pela matrícula do "
            "servidor/militar. Informação obrigatória se "
            "{cadIni}(2410_infoBenInicio_cadIni) = [N], desde que haja "
            "informação de matrícula.\nValidação: Preenchimento obrigatório se"
            " {cadIni}(2410_infoBenInicio_cadIni) = [N] e houver informação de"
            " {matricula}(./matricula), exceto se existir vínculo (evento "
            "S-2200) no órgão declarante para o beneficiário (indicado em "
            "{cpfBenef}(./cpfBenef) e {matricula}(./matricula)) ou, se "
            "{tpBeneficio}(2410_infoBenInicio_dadosBeneficio_tpBeneficio) "
            "pertencer ao grupo [06] da Tabela 25, para o instituidor da "
            "pensão por morte (indicado em {cpfInst}(2410_infoBenInicio_dadosB"
            "eneficio_infoPenMorte_instPenMorte_cpfInst) e "
            "{matricula}(./matricula)).\nSe informado, deve ser um CNPJ "
            "válido, com 14 (catorze) algarismos."
        )
    )
    

class InfoBenInicio(models.AbstractModel):
    """Informações do benefício - Início.
    CHAVE_GRUPO: {nrBeneficio*}"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobeninicio"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio"


    
    eso11_cadIni = fields.Selection(TS_SIM_NAO,
        string="Indicar se a data de início do benefício",
        xsd_required=True,
        xsd_type="TS_sim_nao",
        help=(
            "Indicar se a data de início do benefício é anterior à "
            "obrigatoriedade dos eventos não periódicos para o ente público no"
            " eSocial."
        )
    )
    
    eso11_indSitBenef = fields.Selection(INFOBENINICIO_INDSITBENEF,
        string="indSitBenef"
    )
    
    eso11_nrBeneficio = fields.Char(
        string="Número do benefício",
        xsd_required=True,
        xsd_type="TS_nrBeneficio",
        help="Número do benefício.\nREGRA:REGRA_CARACTERE_ESPECIAL"
    )
    
    eso11_dtIniBeneficio = fields.Date(
        string="Data de início do benefício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de início do benefício.\nValidação: Deve observar o que "
            "segue:\na) Se {cadIni}(./cadIni) = [S], deve ser anterior à data "
            "de início da obrigatoriedade dos eventos não periódicos para o "
            "ente público no eSocial;\nb) Se {cadIni}(./cadIni) = [N], deve "
            "ser igual ou posterior à data de início da obrigatoriedade dos "
            "eventos não periódicos para o ente público no eSocial e igual ou "
            "anterior à data atual."
        )
    )
    
    eso11_dtPublic = fields.Date(
        string="data de publicação da concessão",
        xsd_type="xs:date",
        help=(
            "data de publicação da concessão do benefício, somente quando o "
            "ato concessório tiver vigência retroativa.\nValidação: Deve ser "
            "posterior a {dtIniBeneficio}(./dtIniBeneficio)."
        )
    )
    
    eso11_dadosBeneficio = fields.Many2one(
        comodel_name="eso.11.dadosbeneficio",
        string="Dados relativos ao benefício",
        xsd_required=True
    )
    
    eso11_sucessaoBenef = fields.Many2one(
        comodel_name="eso.11.sucessaobenef",
        string="Grupo de informações de transferência",
        help=(
            "Grupo de informações de transferência de "
            "benefício.\nCONDICAO_GRUPO: O (se "
            "{indSitBenef}(2410_infoBenInicio_indSitBenef) = [2]); N (nos "
            "demais casos)"
        )
    )
    
    eso11_mudancaCPF = fields.Many2one(
        comodel_name="eso.11.mudancacpf",
        string="Informações de mudança de CPF",
        help=(
            "Informações de mudança de CPF do beneficiário.\nCONDICAO_GRUPO: O"
            " (se {indSitBenef}(2410_infoBenInicio_indSitBenef) = [3]); N (nos"
            " demais casos)"
        )
    )
    
    eso11_infoBenTermino = fields.Many2one(
        comodel_name="eso.11.infobentermino",
        string="Informações da cessação do benefício",
        help=(
            "Informações da cessação do "
            "benefício\nDESCRICAO_COMPLETA:Informações da cessação do "
            "benefício.\nGrupo preenchido exclusivamente caso seja necessário "
            "enviar evento de reativação de benefício cessado antes do início "
            "dos eventos não periódicos para o ente público no eSocial ou para"
            " informação de diferenças de proventos e pensões devidos sob a "
            "vigência dos eventos periódicos para o ente público no "
            "eSocial.\nCONDICAO_GRUPO: OC (se "
            "{cadIni}(2410_infoBenInicio_cadIni) = [S] ou "
            "{indSitBenef}(2410_infoBenInicio_indSitBenef) = [2]); N (nos "
            "demais casos)"
        )
    )
    

class DadosBeneficio(models.AbstractModel):
    "Dados relativos ao benefício."
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dadosbeneficio"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio.DadosBeneficio"


    
    eso11_tpBeneficio = fields.Char(
        string="Tipo de benefício",
        xsd_required=True,
        xsd_type="TS_tpBeneficio",
        help=(
            "Tipo de benefício.\nValidação: Deve ser um código válido e "
            "existente na Tabela 25. Se {cadIni}(2410_infoBenInicio_cadIni) = "
            "[N], não é permitido utilizar código do grupo [08] dessa tabela."
        )
    )
    
    eso11_tpPlanRP = fields.Selection(TS_TPPLANRP,
        string="tpPlanRP",
        xsd_required=True,
        xsd_type="TS_tpPlanRP"
    )
    
    eso11_dsc = fields.Char(
        string="Descrição do instrumento ou situação",
        xsd_type="TS_texto_255",
        help=(
            "Descrição do instrumento ou situação que originou o pagamento do "
            "benefício.\nValidação: Preenchimento obrigatório se "
            "{tpBeneficio}(./tpBeneficio) = [0909, 1001, 1009]."
        )
    )
    
    eso11_indDecJud = fields.Selection(TS_SIM_NAO,
        string="Informar se o benefício foi concedido",
        xsd_type="TS_sim_nao",
        help=(
            "Informar se o benefício foi concedido por determinação "
            "judicial.\nValidação: Preenchimento obrigatório se "
            "{cadIni}(2410_infoBenInicio_cadIni) = [N]."
        )
    )
    
    eso11_infoPenMorte = fields.Many2one(
        comodel_name="eso.11.infopenmorte",
        string="Informações relativas à pensão por morte",
        help=(
            "Informações relativas à pensão por morte.\nCONDICAO_GRUPO: O (se "
            "{tpBeneficio}(../tpBeneficio) pertencer ao grupo [06]); N (nos "
            "demais casos)"
        )
    )
    

class InfoPenMorte(models.AbstractModel):
    """Informações relativas à pensão por morte.
    CONDICAO_GRUPO: O (se {tpBeneficio}(../tpBeneficio) pertencer ao grupo [06]); N
    (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infopenmorte"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio.DadosBeneficio.InfoPenMorte"


    
    eso11_tpPenMorte = fields.Selection(TS_TPPENMORTE,
        string="tpPenMorte",
        xsd_required=True,
        xsd_type="TS_tpPenMorte"
    )
    
    eso11_instPenMorte = fields.Many2one(
        comodel_name="eso.11.instpenmorte",
        string="Informações do instituidor da pensão",
        help=(
            "Informações do instituidor da pensão por morte.\nCONDICAO_GRUPO: "
            "O (se {cadIni}(2410_infoBenInicio_cadIni) = [N]); F (se "
            "{cadIni}(2410_infoBenInicio_cadIni) = [S])"
        )
    )
    

class InstPenMorte(models.AbstractModel):
    """Informações do instituidor da pensão por morte.
    CONDICAO_GRUPO: O (se {cadIni}(2410_infoBenInicio_cadIni) = [N]); F (se
    {cadIni}(2410_infoBenInicio_cadIni) = [S])"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.instpenmorte"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio.DadosBeneficio.InfoPenMorte.InstPenMorte"


    
    eso11_cpfInst = fields.Char(
        string="o CPF do instituidor da pensão por morte",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "o CPF do instituidor da pensão por morte.\nValidação: Deve ser um"
            " CPF válido e diferente do CPF do beneficiário."
        )
    )
    
    eso11_dtInst = fields.Date(
        string="Data de óbito do instituidor da pensão",
        xsd_required=True,
        xsd_type="xs:date",
        help="Data de óbito do instituidor da pensão por morte."
    )
    

class SucessaoBenef(models.AbstractModel):
    """Grupo de informações de transferência de benefício.
    CONDICAO_GRUPO: O (se {indSitBenef}(2410_infoBenInicio_indSitBenef) = [2]); N
    (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.sucessaobenef"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio.SucessaoBenef"


    
    eso11_cnpjOrgaoAnt = fields.Char(
        string="CNPJ do órgão público anterior",
        xsd_required=True,
        xsd_type="TS_cnpj",
        help=(
            "CNPJ do órgão público anterior.\nValidação: Deve ser um CNPJ "
            "válido e diferente da inscrição do declarante, considerando as "
            "particularidades aplicadas à informação de CNPJ de órgão público "
            "em S-1000. Além disso, deve possuir 14 (catorze) algarismos e ser"
            " diferente do CNPJ base do órgão público declarante (exceto se "
            "{ideEmpregador/nrInsc}(2410_ideEmpregador_nrInsc) tiver 14 "
            "(catorze) algarismos) e dos estabelecimentos informados através "
            "do evento S-1005."
        )
    )
    
    eso11_nrBeneficioAnt = fields.Char(
        string="Número do benefício",
        xsd_required=True,
        xsd_type="TS_nrBeneficio",
        help="Número do benefício no ente público anterior."
    )
    
    eso11_dtTransf = fields.Date(
        string="a data da transferência",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data da transferência do benefício para o órgão público "
            "declarante.\nValidação: Devem ser observadas as seguintes "
            "regras:\na) Deve ser posterior à data de início do benefício;\nb)"
            " Deve ser igual ou posterior à data de início da obrigatoriedade "
            "dos eventos não periódicos para o ente público no eSocial e igual"
            " ou anterior à data atual."
        )
    )
    
    eso11_observacao = fields.Char(
        string="observacao",
        xsd_type="TS_observacao"
    )
    

class MudancaCpf(models.AbstractModel):
    """Informações de mudança de CPF do beneficiário.
    CONDICAO_GRUPO: O (se {indSitBenef}(2410_infoBenInicio_indSitBenef) = [3]); N
    (nos demais casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.mudancacpf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio.MudancaCpf"


    
    eso11_cpfAnt = fields.Char(
        string="o número do CPF antigo do beneficiário",
        xsd_required=True,
        xsd_type="TS_cpf"
    )
    
    eso11_nrBeneficioAnt = fields.Char(
        string="o número do benefício anterior",
        xsd_required=True,
        xsd_type="TS_nrBeneficio"
    )
    
    eso11_dtAltCPF = fields.Date(
        string="Data de alteração do CPF",
        xsd_required=True,
        xsd_type="xs:date"
    )
    
    eso11_observacao = fields.Char(
        string="observacao",
        xsd_type="TS_observacao"
    )
    

class InfoBenTermino(models.AbstractModel):
    """Informações da cessação do benefício
    DESCRICAO_COMPLETA:Informações da cessação do benefício.
    Grupo preenchido exclusivamente caso seja necessário enviar evento de
    reativação de benefício cessado antes do início dos eventos não periódicos
    para o ente público no eSocial ou para informação de diferenças de
    proventos e pensões devidos sob a vigência dos eventos periódicos para o
    ente público no eSocial.
    CONDICAO_GRUPO: OC (se {cadIni}(2410_infoBenInicio_cadIni) = [S] ou
    {indSitBenef}(2410_infoBenInicio_indSitBenef) = [2]); N (nos demais
    casos)"""
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infobentermino"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtCdBenIn.InfoBenInicio.InfoBenTermino"


    
    eso11_dtTermBeneficio = fields.Date(
        string="Data de cessação do benefício",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data de cessação do benefício.\nValidação: Devem ser observadas "
            "as seguintes regras:\na) Deve ser igual ou posterior à data de "
            "início do benefício;\nb) Se {cadIni}(2410_infoBenInicio_cadIni) ="
            " [S], deve ser anterior à data de início da obrigatoriedade dos "
            "eventos não periódicos para o ente público no eSocial;\nc) Se "
            "{indSitBenef}(2410_infoBenInicio_indSitBenef) = [2], deve ser "
            "anterior a {dtTransf}(2410_infoBenInicio_sucessaoBenef_dtTransf)."
        )
    )
    
    eso11_mtvTermino = fields.Char(
        string="mtvTermino",
        xsd_required=True
    )