# Copyright 2023 Akretion - Raphaël Valyi <raphael.valyi@akretion.com>
# License LGPL-3.0 or later (https://www.gnu.org/licenses/lgpl-3.0.en.html).
# Generated by https://github.com/akretion/xsdata-odoo
#
import textwrap
from odoo import fields, models
from .tipos import (
    TSINDAPURIR,
    TSINDRRA,
    TSPENSALIM,
    TSTPINSCESTABLOT14,
    TIdeEmpregador,
    TIdeEventoTrabIndGuia,
    TIdeTrabSemVinculo,
    TInfoMv,
    TInfoRra,
    TInfoSimples,
    TProcJudTrab,
)

__NAMESPACE__ = "http://www.esocial.gov.br/schema/evt/evtTSVTermino/v_S_01_01_00"

"""Motivo do término.
    Validação: Informação obrigatória se o código de categoria no Registro de
    Eventos Trabalhistas - RET for igual a [721] ou se o grupo
    {mudancaCPF}(2399_infoTSVTermino_mudancaCPF) estiver preenchido. Não
    preencher nas demais situações."""
INFOTSVTERMINO_MTVDESLIGTSV = [
    (
        "01",
        "Exoneração do diretor não empregado sem justa causa, por deliberação da assembleia, dos sócios cotistas ou da autoridade competente",
    ),
    (
        "02",
        "Término de mandato do diretor não empregado que não tenha sido reconduzido ao cargo",
    ),
    ("03", "Exoneração a pedido de diretor não empregado"),
    ("04", "Exoneração do diretor não empregado por culpa recíproca ou força maior"),
    ("05", "Morte do diretor não empregado"),
    (
        "06",
        "Exoneração do diretor não empregado por falência, encerramento ou supressão de parte da empresa",
    ),
    ("07", "Mudança de CPF"),
    ("99", "Outros"),
]

"""Indicativo de situação de remuneração após o término.
    Validação: Informação obrigatória se {dtTerm}(2399_infoTSVTermino_dtTerm) &gt;=
    [2023-01-16]."""
REMUNAPOSTERM_INDREMUN = [
    ("1", "Quarentena"),
    (
        "2",
        "Término reconhecido judicialmente com data anterior a competências com remunerações já informadas no eSocial",
    ),
]


class ESocial(models.AbstractModel):
    "S-2399 - Trabalhador Sem Vínculo de Emprego/Estatutário - Término"
    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.esocial"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial"

    eso11_evtTSVTermino = fields.Many2one(
        comodel_name="eso.11.evttsvtermino",
        string="Evento TSVE - Término",
        xsd_required=True,
        help=(
            "Evento TSVE - Término\nDESCRICAO_COMPLETA:Evento Trabalhador Sem "
            "Vínculo de Emprego/Estatutário - Término.\nCHAVE_GRUPO: {Id}\nREG"
            "RA:REGRA_ENVIO_PROC_FECHAMENTO\nREGRA:REGRA_EVENTOS_EXTEMP\nREGRA"
            ":REGRA_EVENTO_POSTERIOR_CAT_OBITO\nREGRA:REGRA_EVE_FOPAG_SIMPLIFI"
            "CADO\nREGRA:REGRA_EXISTE_INFO_EMPREGADOR\nREGRA:REGRA_GERAL_VALID"
            "A_DADOS_TABCONTRIB\nREGRA:REGRA_MESMO_PROCEMI\nREGRA:REGRA_MUDANC"
            "A_CPF\nREGRA:REGRA_REMUN_IND_RETIFICACAO\nREGRA:REGRA_REMUN_PERMI"
            "TE_EXCLUSAO\nREGRA:REGRA_RETIFICA_MESMO_VINCULO\nREGRA:REGRA_RUBR"
            "ICA_COMPATIVEL_CATEGORIA\nREGRA:REGRA_TSV_ATIVO_NA_DTEVENTO\nREGR"
            "A:REGRA_VALIDA_EMPREGADOR\nREGRA:REGRA_VALIDA_PERIODO_APURACAO"
        ),
    )


class EvtTsvtermino(models.AbstractModel):
    """Evento TSVE - Término
    DESCRICAO_COMPLETA:Evento Trabalhador Sem Vínculo de Emprego/Estatutário -
    Término.
    CHAVE_GRUPO: {Id}
    REGRA:REGRA_ENVIO_PROC_FECHAMENTO
    REGRA:REGRA_EVENTOS_EXTEMP
    REGRA:REGRA_EVENTO_POSTERIOR_CAT_OBITO
    REGRA:REGRA_EVE_FOPAG_SIMPLIFICADO
    REGRA:REGRA_EXISTE_INFO_EMPREGADOR
    REGRA:REGRA_GERAL_VALIDA_DADOS_TABCONTRIB
    REGRA:REGRA_MESMO_PROCEMI
    REGRA:REGRA_MUDANCA_CPF
    REGRA:REGRA_REMUN_IND_RETIFICACAO
    REGRA:REGRA_REMUN_PERMITE_EXCLUSAO
    REGRA:REGRA_RETIFICA_MESMO_VINCULO
    REGRA:REGRA_RUBRICA_COMPATIVEL_CATEGORIA
    REGRA:REGRA_TSV_ATIVO_NA_DTEVENTO
    REGRA:REGRA_VALIDA_EMPREGADOR
    REGRA:REGRA_VALIDA_PERIODO_APURACAO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.evttsvtermino"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino"

    eso11_ideEvento = fields.Many2one(
        comodel_name="eso.11.tideeventotrabindguia",
        string="ideEvento",
        xsd_required=True,
        xsd_type="T_ideEvento_trab_indGuia",
    )

    eso11_ideEmpregador = fields.Many2one(
        comodel_name="eso.11.tideempregador",
        string="ideEmpregador",
        xsd_required=True,
        xsd_type="T_ideEmpregador",
    )

    eso11_ideTrabSemVinculo = fields.Many2one(
        comodel_name="eso.11.tidetrabsemvinculo",
        string="ideTrabSemVinculo",
        xsd_required=True,
        xsd_type="T_ideTrabSemVinculo",
    )

    eso11_infoTSVTermino = fields.Many2one(
        comodel_name="eso.11.infotsvtermino",
        string="TSVE - Término",
        xsd_required=True,
        help="TSVE - Término.\nCHAVE_GRUPO: {dtTerm*}",
    )

    eso11_Id = fields.Char(string="Id", xsd_required=True, xsd_type="TS_Id")


class InfoTsvtermino(models.AbstractModel):
    """TSVE - Término.
    CHAVE_GRUPO: {dtTerm*}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.infotsvtermino"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino.InfoTsvtermino"

    eso11_dtTerm = fields.Date(
        string="Data do término",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "Data do término.\nValidação: Deve ser uma data igual ou anterior "
            "à data atual acrescida de 10 (dez) dias."
        ),
    )

    eso11_mtvDesligTSV = fields.Selection(
        INFOTSVTERMINO_MTVDESLIGTSV, string="mtvDesligTSV"
    )

    eso11_pensAlim = fields.Selection(
        TS_PENSALIM,
        string="Indicativo de pensão alimentícia",
        xsd_type="TS_pensAlim",
        help=(
            "Indicativo de pensão alimentícia para fins de retenção de "
            "FGTS.\nValidação: Informação obrigatória se o código de categoria"
            " no RET for igual a [201, 202, 721] e se {dtTerm}(./dtTerm) for "
            "posterior a 21/04/2019.\nInformação opcional se o código de "
            "categoria no RET for igual a [201, 202, 721] e se "
            "{dtTerm}(./dtTerm) for igual ou anterior a 21/04/2019.\nNão "
            "preencher nas demais situações."
        ),
    )

    eso11_percAliment = fields.Float(string="percAliment", xsd_type="TS_percAliment")

    eso11_vrAlim = fields.Float(string="vrAlim", xsd_type="TS_vrAlim")

    eso11_nrProcTrab = fields.Char(
        string="Número que identifica",
        xsd_type="TS_nrProcJud",
        help=(
            "Número que identifica o processo trabalhista, quando o término de"
            " TSVE se der por decisão judicial.\nValidação: Se preenchido, "
            "deve ser um processo judicial válido, com 20 (vinte) algarismos."
        ),
    )

    eso11_mudancaCPF = fields.Many2one(
        comodel_name="eso.11.mudancacpf",
        string="Informação do novo CPF do trabalhador",
        help=(
            "Informação do novo CPF do trabalhador.\nCONDICAO_GRUPO: O (se "
            "{mtvDesligTSV}(2399_infoTSVTermino_mtvDesligTSV) = [07]); N (nos "
            "demais casos)"
        ),
    )

    eso11_verbasResc = fields.Many2one(
        comodel_name="eso.11.verbasresc",
        string="Verbas rescisórias",
        help=(
            "Verbas rescisórias\nDESCRICAO_COMPLETA:Grupo onde são prestadas "
            "as informações relativas às verbas rescisórias do diretor não "
            "empregado, com FGTS.\nCONDICAO_GRUPO: N (se "
            "{mtvDesligTSV}(2399_infoTSVTermino_mtvDesligTSV) = [07] OU "
            "{dtTerm}(2399_infoTSVTermino_dtTerm) for anterior ao início de "
            "obrigatoriedade dos eventos periódicos para o empregador OU o "
            "código de categoria no RET for diferente de [721]); OC (nos "
            "demais casos)"
        ),
    )

    eso11_remunAposTerm = fields.Many2one(
        comodel_name="eso.11.remunaposterm",
        string="Informações sobre",
        help=(
            "Informações sobre a quarentena remunerada ou outra situação de "
            "término com data anterior\nDESCRICAO_COMPLETA:Informações sobre a"
            " 'quarentena' remunerada de trabalhador desligado ou outra "
            "situação de término com data anterior.\nO grupo deve ser "
            "preenchido apenas no caso do trabalhador que recebe remuneração "
            "após o desligamento por estar impossibilitado de exercer "
            "atividade remunerada ou no caso de término reconhecido "
            "judicialmente com data anterior a competências com remunerações "
            "já informadas no eSocial.\nCONDICAO_GRUPO: OC"
        ),
    )


class MudancaCpf(models.AbstractModel):
    """Informação do novo CPF do trabalhador.
    CONDICAO_GRUPO: O (se {mtvDesligTSV}(2399_infoTSVTermino_mtvDesligTSV) = [07]);
    N (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.mudancacpf"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino.InfoTsvtermino.MudancaCpf"

    eso11_novoCPF = fields.Char(
        string="o novo CPF do trabalhador",
        xsd_required=True,
        xsd_type="TS_cpf",
        help=(
            "o novo CPF do trabalhador.\nValidação: Deve ser um CPF válido e "
            "diferente do CPF do empregador e do antigo CPF do trabalhador."
        ),
    )


class VerbasResc(models.AbstractModel):
    """Verbas rescisórias
    DESCRICAO_COMPLETA:Grupo onde são prestadas as informações relativas às verbas
    rescisórias do diretor não empregado, com FGTS.
    CONDICAO_GRUPO: N (se {mtvDesligTSV}(2399_infoTSVTermino_mtvDesligTSV) = [07]
    OU {dtTerm}(2399_infoTSVTermino_dtTerm) for anterior ao início de
    obrigatoriedade dos eventos periódicos para o empregador OU o código de
    categoria no RET for diferente de [721]); OC (nos demais casos)"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.verbasresc"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino.InfoTsvtermino.VerbasResc"

    eso11_dmDev = fields.One2many(
        "eso.11.dmdev",
        "eso11_dmDev_verbasResc_id",
        string="Demonstrativo de valores devidos",
        help=(
            "Demonstrativo de valores devidos ao "
            "trabalhador\nDESCRICAO_COMPLETA:Identificação de cada um dos "
            "demonstrativos de valores devidos ao trabalhador.\nCHAVE_GRUPO: "
            "{ideDmDev}\nREGRA:REGRA_DEMONSTRATIVO"
        ),
    )

    eso11_procJudTrab = fields.One2many(
        "eso.11.tprocjudtrab",
        "eso11_procJudTrab_verbasResc_id",
        string="procJudTrab",
        xsd_type="T_procJudTrab",
    )

    eso11_infoMV = fields.Many2one(
        comodel_name="eso.11.tinfomv", string="infoMV", xsd_type="T_infoMV"
    )


class DmDev(models.AbstractModel):
    """Demonstrativo de valores devidos ao trabalhador
    DESCRICAO_COMPLETA:Identificação de cada um dos demonstrativos de valores
    devidos ao trabalhador.
    CHAVE_GRUPO: {ideDmDev}
    REGRA:REGRA_DEMONSTRATIVO"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.dmdev"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino.InfoTsvtermino.VerbasResc.DmDev"

    eso11_ideDmDev = fields.Char(
        string="Identificador atribuído",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "Identificador atribuído pela empresa para o demonstrativo de "
            "valores devidos ao trabalhador relativo a verbas "
            "rescisórias.\nValidação: Deve ser um identificador único dentro "
            "da mesma competência (mês/ano da data de término) para cada um "
            "dos demonstrativos do "
            "trabalhador.\nREGRA:REGRA_CARACTERE_ESPECIAL"
        ),
    )

    eso11_indRRA = fields.Selection(
        TS_INDRRA,
        string="Indicativo",
        xsd_type="TS_indRRA",
        help=(
            "Indicativo de Rendimentos Recebidos Acumuladamente - "
            "RRA.\nSomente preencher este campo se for um demonstrativo de "
            "RRA."
        ),
    )

    eso11_infoRRA = fields.Many2one(
        comodel_name="eso.11.tinforra", string="infoRRA", xsd_type="T_infoRRA"
    )

    eso11_ideEstabLot = fields.One2many(
        "eso.11.ideestablot",
        "eso11_ideEstabLot_dmDev_id",
        string="Identificação do estabelecimento",
        help=(
            "Identificação do estabelecimento e "
            "lotação\nDESCRICAO_COMPLETA:Identificação do estabelecimento e da"
            " lotação nos quais o trabalhador possui remuneração no período de"
            " apuração.\nCHAVE_GRUPO: {tpInsc}, {nrInsc}, {codLotacao}"
        ),
    )


class IdeEstabLot(models.AbstractModel):
    """Identificação do estabelecimento e lotação
    DESCRICAO_COMPLETA:Identificação do estabelecimento e da lotação nos quais o
    trabalhador possui remuneração no período de apuração.
    CHAVE_GRUPO: {tpInsc}, {nrInsc}, {codLotacao}"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.ideestablot"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino.InfoTsvtermino.VerbasResc.DmDev.IdeEstabLot"

    eso11_tpInsc = fields.Selection(
        TS_TPINSC_ESTABLOT_1_4,
        string="tpInsc",
        xsd_required=True,
        xsd_type="TS_tpInsc_EstabLot_1_4",
    )

    eso11_nrInsc = fields.Char(
        string="número de inscrição do estabelecimento",
        xsd_required=True,
        xsd_type="TS_nrInsc_12_14",
        help=(
            "número de inscrição do estabelecimento do contribuinte de acordo "
            "com o tipo de inscrição indicado no campo "
            "{ideEstabLot/tpInsc}(./tpInsc).\nValidação: A inscrição informada"
            " deve ser compatível com {ideEstabLot/tpInsc}(./tpInsc)."
        ),
    )

    eso11_codLotacao = fields.Char(
        string="codLotacao", xsd_required=True, xsd_type="TS_codLotacao"
    )

    eso11_detVerbas = fields.One2many(
        "eso.11.detverbas",
        "eso11_detVerbas_ideEstabLot_id",
        string="Detalhamento das verbas rescisórias",
        help=(
            "Detalhamento das verbas "
            "rescisórias\nDESCRICAO_COMPLETA:Detalhamento das verbas "
            "rescisórias devidas ao trabalhador. Deve haver pelo menos uma "
            "rubrica de folha, mesmo que o valor líquido a ser pago ao "
            "trabalhador seja 0 (zero) em função de descontos."
        ),
    )

    eso11_infoSimples = fields.Many2one(
        comodel_name="eso.11.tinfosimples",
        string="infoSimples",
        xsd_type="T_infoSimples",
    )


class DetVerbas(models.AbstractModel):
    """Detalhamento das verbas rescisórias
    DESCRICAO_COMPLETA:Detalhamento das verbas rescisórias devidas ao trabalhador.
    Deve haver pelo menos uma rubrica de folha, mesmo que o valor líquido a ser
    pago ao trabalhador seja 0 (zero) em função de descontos."""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.detverbas"
    _inherit = "spec.mixin.eso"
    _binding_type = (
        "ESocial.EvtTsvtermino.InfoTsvtermino.VerbasResc.DmDev.IdeEstabLot.DetVerbas"
    )

    eso11_codRubr = fields.Char(
        string="código atribuído pelo empregador",
        xsd_required=True,
        xsd_type="TS_codigo_esocial",
        help=(
            "código atribuído pelo empregador que identifica a rubrica em sua "
            "folha de pagamento ou o código da rubrica constante da Tabela de "
            "Rubricas Padrão.\nValidação: Não pode ser utilizada rubrica:\na) "
            "cujo {codIncCP}(1010_infoRubrica_inclusao_dadosRubrica_codIncCP) "
            "em S-1010 seja igual a [25, 26, 51];\nb) cuja "
            "{natRubr}(1010_infoRubrica_inclusao_dadosRubrica_natRubr) em "
            "S-1010 seja igual a [1801, 9220], desde que mês/ano de "
            "{dtTerm}(2399_infoTSVTermino_dtTerm) &gt;= [2021-07]."
        ),
    )

    eso11_ideTabRubr = fields.Char(
        string="ideTabRubr", xsd_required=True, xsd_type="TS_ideTabRubr"
    )

    eso11_qtdRubr = fields.Float(string="qtdRubr", xsd_type="TS_qtdRubr")

    eso11_fatorRubr = fields.Float(string="fatorRubr", xsd_type="TS_fator")

    eso11_vrRubr = fields.Float(
        string="vrRubr", xsd_required=True, xsd_type="TS_vrRubr"
    )

    eso11_indApurIR = fields.Selection(
        TS_INDAPURIR,
        string="Indicativo de tipo de apuração de IR",
        xsd_type="TS_indApurIR",
        help=(
            "Indicativo de tipo de apuração de IR.\nValidação: Informação "
            "obrigatória e exclusiva se mês/ano de "
            "{dtTerm}(2399_infoTSVTermino_dtTerm) &gt;= [2021-07]."
        ),
    )


class RemunAposTerm(models.AbstractModel):
    """Informações sobre a quarentena remunerada ou outra situação de término
    com data anterior
    DESCRICAO_COMPLETA:Informações sobre a "quarentena" remunerada de trabalhador
    desligado ou outra situação de término com data anterior.
    O grupo deve ser preenchido apenas no caso do trabalhador que recebe
    remuneração após o desligamento por estar impossibilitado de exercer
    atividade remunerada ou no caso de término reconhecido judicialmente com
    data anterior a competências com remunerações já informadas no eSocial.
    CONDICAO_GRUPO: OC"""

    _description = textwrap.dedent("    %s" % (__doc__,))
    _name = "eso.11.remunaposterm"
    _inherit = "spec.mixin.eso"
    _binding_type = "ESocial.EvtTsvtermino.InfoTsvtermino.RemunAposTerm"

    eso11_indRemun = fields.Selection(REMUNAPOSTERM_INDREMUN, string="indRemun")

    eso11_dtFimRemun = fields.Date(
        string="a data final da quarentena",
        xsd_required=True,
        xsd_type="xs:date",
        help=(
            "a data final da quarentena a que está sujeito o trabalhador. No "
            "caso de término reconhecido judicialmente com data anterior a "
            "competências com remunerações já informadas no eSocial, informar "
            "o último dia trabalhado.\nValidação: Deve ser uma data posterior "
            "a {dtTerm}(2399_infoTSVTermino_dtTerm)."
        ),
    )
